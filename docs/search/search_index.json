{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"@import url('https://fonts.googleapis.com/css2?family=Dancing+Script:wght@500&family=Roboto&display=swap'); .md-typeset h1 { line-height: 0; margin: 0; margin-left: -9999px; } .title-sec { min-height: 260px; margin: 80px 0 0 0; } .title-sec h2 { margin: auto; min-height: 100px; text-align: center; line-height: normal; color: #ff6e42; font-weight: bold; font-size: 3.5rem; text-transform: uppercase; margin-bottom: 0.2rem; font-family: 'Dancing Script', cursive; letter-spacing: 0.1em; } .title-desc{ width: 50%; margin: 0 auto; margin-bottom: 30px; text-align: center; color: #ff6e42; font-weight: normal; font-size: 1.7rem; font-family: 'Dancing Script', cursive; } MkDocs Magic Space The easy way to create documentation websites .features{ padding-left: 25%; padding-right: 25%; margin-bottom: 30px; } All-in-one tool to develop and deploy documentation websites Completely free and open-source Designed to make collaboration easy Use the full set of extended markdown features Workspace WEB UI - http://localhost:8020 docker run --name project-1 -d -p 8020-8030:8020-8030 alnoda/mkdocs-magicspace /* ********* Tool listing section ********* */ .usecase-wrapper { display: flex; flex-wrap: wrap; justify-content: center; padding-left: -50px; column-gap: 50px; row-gap: 50px; margin-bottom: 80px; } .usecase-wrapper > div { flex: 600px; max-width: 600px; } .usecase-img{ margin: auto; width: 200px; height: 180px; } .usecase-caption{ font-family: Roboto, Helvetica, sans-serif; text-align: center; /*margin-top: 10px;*/ font-size: 0.7rem; font-weight: bold; letter-spacing: -.02em; line-height: 1; } .usecase-description{ font-family: Roboto, Helvetica, sans-serif; text-align: center; margin-top: 10px; font-size: 0.7rem; font-style: oblique; } Use-cases Professional documentation websites Create a documentation website for your project, that looks very professional, has built-in search, is customizable, searchable, mobile-friendly, and has 40+ languages Unified docs from multiple Git repositories Combine markdown files from multiple Git repositories into one documentation website with powerful search capabilities /* ********* Tool listing section ********* */ .quickstart-wrapper { min-width: 300px; display: flex; flex-wrap: wrap; justify-content: center; padding-left: -50px; column-gap: 50px; row-gap: 50px; margin-bottom: 80px; } .quickstart-wrapper > div { flex: 300px; max-width: 300px; } .tool-img{ box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 5px; border-radius: 5px; } .tool-caption{ font-family: Roboto, Helvetica, sans-serif; text-align: center; margin-top: 10px; font-size: 1.2rem; font-weight: bold; letter-spacing: -.02em; line-height: 1.5; } .tool-description{ font-family: Helvetica, sans-serif; text-align: center; margin-top: 10px; font-size: 0.7rem; font-style: oblique; } Collection of tools included VS-code IDE Browser-based version of Visual Studio Code. Develop in any language, install hundreeds of extensions File Browser Browse, upload and download files and folders to and from the Workspace Cronicle Schedule jobs, manage schedules, observe and monitor executions of tasks Ungit Manage Git repositories and workflows using beautiful UI Static File Server Serve any static websites like a breeze Terminal Full-fledged browser-based terminal with Z-shell .accent-section{ display: flex; flex-wrap: wrap; justify-content: center; padding-left: 40px; padding-right: 0px; padding-bottom: 60px; min-height: 300px; background-color: #F5F5F5; border-radius: 15px; margin-bottom: 80px; } .accent-element { display: flex; flex-wrap: wrap; justify-content: left; margin-right: 40px; margin-top: 60px; flex: 500px; max-width: 600px; text-align: left; /*border-style: dotted;*/ /*border-color: coral;*/ } .accent-img{ width: 130px; max-height: 130px; } .accent-description{ max-width: 400px; margin-left: 20px; font-family: Roboto, Helvetica, sans-serif; font-size: 0.7rem; font-style: oblique; text-align: left; display: flex; justify-content: center; flex-direction: column; } It's a workspace in docker Isolate projects in their dockerized environments, work directly inside the running docker containers, and manage numerous projects easily Move entire workspaces between machines and cloud servers with just a couple of commands. Work on your laptop, home PC, cloud server, or even tablet whenever you want Share the entire workspace with all dependencies with your peers. Or launch a workspace on a cloud server and work together online Version control not only for the code but for your entire workspace with all the files and configurations. Save workspace that works Much more than just an IDE. All the needed tools, packages, extensions are set up and configured. Workspace is fully ready to serve the goal Great for both development and production. No additional steps are needed. Just move the same workspace to the cloud, and use it as a runtime environment Isolate experiments from the main environment. Trying out new things without affecting your primary workspace Tunable, expandable, and customizable. Configure your own professional workspace with all the things you need, and reuse it in many different projects","title":"Home"},{"location":"docs/","text":"Workspaces - are merely docker containers, that's why managing workspaces is easy and intuitive - it is enough to know only docker commands, no need to learn any new tools. In order to avoid confusion, the following convention is adopted: command to execute outside of the workspace command to execute inside the workspace (after entering running docker container) To start a workspace simply execute in terminal docker run --name space-1 -d -p 8020 -8035:8020-8035 alnoda/mkdocs-magicspace (It is recommended to run workspace in the daemon mode) Open http://localhost:8020 Workspace has its own UI, which includes quiklaunch (home) page and documentation pages. From the quiklaunch you can open any workspace tool. Documentation pages you modify in order to document the project, workspace use and setup. Workspace terminal There are several ways how to work with terminal of the the mkdocs-magicspace: built-it in-browser terminal use terminal provided by in-browser IDE http://localhost:8025 ( unless other ports are mapped ) ssh into the running the docker container (of the workspace) from your terminal (Browser-based terminals always work under the user you started the workspace with, the default is non root user \"abc\") If you want to enter running workspace container from your terminal execute: docker exec -it space-1 /bin/zsh If you don't want to use z-shell docker exec -it space-1 /bin/bash This way allows to ssh into the workspace as a root user at any time, even if the workspace itself was not starter as root user (the default user is abc) docker exec -it --user = root space-1 /bin/zsh You can work in Ubuntu terminal now. Execute the followinng command to know your workspace user whoami Multiple workspaces Every workspace requires range of ports. If one workspace is up and running, the ports 8020-8035 are taken. mkdocs-magicspace itself uses 9 ports (8020-8028), but it is recommended to map several extra ports just in case. Having extra ports, you can always launch new applications on these ports, and they will be immediately exposed outside of the workspace. In order to start another workspace, you either need to stop currently runnning workspace, or to run another workspace on the different port range. If you are planning to run more than one workspace at the same time, you can run another workspace with the different port range, for example docker run --name space-2 -d -p 8040 -8055:8020-8035 -e ENTRY_PORT = 8040 alnoda/mkdocs-magicspace Notice that in addition we need to set environmental variable ENTRY_PORT, which should be equal to the first port in the new range. Workspace UI usues this variable to know the new port range, and redirects to the proper addresses of the workspace applications' UIs. Open more ports We started workspace container with a port range mapped \"-p 8020-8035\". If you are planning to expose more applications from inside of a container, add additional port mapping, for example docker run --name space-1 -d -p 8020 -8035:8020-8035 -p 8080 :8080 alnoda/mkdocs-magicspace You can add multiple port mappings: docker run --name space-1 -d -p 8020 -8035:8020-8035 -p 8080 :8080 -p 443 :443 alnoda/mkdocs-magicspace NOTE: It is not a problem if you don't expose any ports, but later on realise you need them - you will just create new image, and run it exposing the required port (look in the section Create new image ) Docker in docker It is possible to work with docker directly from the workspace (using workspace terminal). docker run --name space-1 -d -p 8020-8035:8020-8035 -v /var/run/docker.sock:/var/run/docker.sock alnoda/mkdocs-magicspace NOTE: in order to use docker in docker you need to or enter into the workspace container as root docker exec -it --user = root space-1 /bin/zsh Run on remote server Because workspace is just a docker image, running it in any other server is as easy as running it on local laptop. Running on remote server makes it much simpler to collaborate, because you can just share credentials to the workspace with your peers, and they will be able to use it. You can also run applications that should run permanently, and run jobs on schedule. Unsecure remote workspace The simplest deployment of the workkspace requires only 3 steps: get virtual server on your favourite cloud (Digital Ocean, Linode, AWS, GC, Azure ...) install docker on this server ssh to the remote server and start workspace docker run --name space-1 -d -p 8020-8035:8020-8035 -e WRK_HOST=\"<ip-of-your-remote-server>\" alnoda/mkdocs-magicspace NOTE: When running workspace on the remote server, add envronmental variable -e WRK_HOST=\"<ip-of-your-remote-server>\" . Workspace UI needss this variable to know how redirect properly to the workspace applications' UIs. Open in your browser <ip-of-your-remote-server>:8020 If docker-in-docker is required, then docker run --name space-1 -d -p 8020-8035:8020-8035 -e WRK_HOST=\"<ip-of-your-remote-server>\" -v /var/run/docker.sock:/var/run/docker.sock alnoda/mkdocs-magicspace This way launches workspace in cloud, but such workspace is not secure, everyone who knows IP of your server will be able to use it. Secure remote workspace You might want to restrict access to the workspace, and secure encrypted communication with the workspace Kkdocs-MagicSpace contains utility that will generate everything needed to launch the workspace in cloud in a secure way, with authentication and with TLS. If you want to run workspace on the remote server securely, start mkdocs-magicspace on your local laptop first, open its terminal and use utility /home/abc/utils/remote.py to generate create docker-compose project with TLS certificates. Simply execute python /home/abc/utils/remote.py --workspace=\"mkdocs-magicspace\" --port=\"8020\" --host=\"68.183.69.198\" --user=\"user1\" --password=\"pass1\" NOTE: you have to specify the correct host (IP of the server you want to run the workspace on), and user and password of your choice. You see folder /home/abc/utils/remote is created. Copy this folder to the remote server (any location). Ssh to the server, cd into the directory you copied and execute docker-compose up -d . That's it, you workspace is running securely on the remote server, using self-signed TLS certificates for encrypted https communication between you laptop and the remote workspace, and authentication is added. Use Workspace Among the common actions you'd do in the workspace are installation of new applications and runtimes edit files, write code, scripts build, compile and execute code start/stop applications and services schedule tasks and scripts process data Install applications Use workspace workspace terminal to install new applications. Install with sudo apt install . The default abc user is allowed to install packages. For example, in order to install Emacs text editor open workspace terminal, and execute sudo apt install emacs Schedule jobs with Cron Schedule execution of any task with cron - a time-based job scheduler in Unix-like computer operating systems. Open workspace terminal, and execute crontab -e (chose [1] nano as editor on the first time) In the end of the opened file add line * * * * * echo $(whoami) >> /home/cron.txt This will print every minute username to file /home/cron.txt . (Hit Ctrl+X to exit nano) Hint: example of cron job definition: .---------------- minute (0 - 59) | .------------- hour (0 - 23) | | .---------- day of month (1 - 31) | | | .------- month (1 - 12) OR jan,feb,mar,apr ... | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat | | | | | * * * * * command to be executed NOTE you can disconnect from the image and close terminal - cron will continue working. Instead of cron you might want to use Cronicle - a tool with Web UI, and a great list of features that will provide you with the dashboard, list of executions and statistics, even let you ser limis on resources for each jobs, and create depenndencies between jobs. Python Python and Pip are installed. To use python console, open workspace terminal and execute python install python package with pip, for pip install pandas If you are planning to work with python, we recommend to install IPython, that provides a rich toolkit to help you make the most of using Python interactively. Install and start ipython pip install ipython ipython Node.js We recommend to use nodeenv to create different node environments. For example, open workspace terminal, create folder npmgui, and activate environment with node v. 12.18.3 and npm v.6.0.0 cd /home mkdir npmgui; cd npmgui nodeenv --node=12.18.3 --npm=6.0.0 env Let's install package and start node application . env/bin/activate && npm i -g npm-gui npm-gui 0.0.0.0:8030 Open your browser on http://localhost:8030/ NOTE: If you close terminal, the application will stop. See how to start applications that reamin live after closing a workspace terminal Run applications and services inside the workspace If you want application to keep running after workspace terminal is closed start it with \"&!\" at the end. For example, in the last section we started npm-gui tool with command npm-gui 0.0.0.0:8030 . If you close the workspace terminal, this application witll stop running. To keep it running after terminal is closed, execute npm-gui 0.0.0.0:8030 &! Now, if you disconnect from the workspace and close terminal, the application will continue running in the workspace, untill workspace is stopped . Manage workspaces Workspace is just a docker container. You can start, stop, delete and do anything you can do with docker images and containers. There are two concepts to keep in mind: images and containers . Images are workspace blueprints. For example, alnoda/mkdocs-magicspace - is an image. When you execute this command docker run --name space-1 -d -p 8020 -8035:8020-8035 alnoda/mkdocs-magicspace you create container called space-1 from the image alnoda/mkdocs-magicspace . You can create any number of containers, but you need to map different ports to each of them . Container - is your workspace. You can start, stop and delete them. You can run multiple workspace containers at the same time, or work with one workspace at a time. From the workspace (which is a container) you can create new image. This is called commit docker image . Essentially, this means \"take my workspace and create new image with all the changes I've done in my workspace \" Start and stop workspaces The workspace started in daemon mode will continue working in the background. See all the running docker containers docker ps Stop workspace docker stop space-1 Workspace is stopped. All the processes and cron jobs are not running. See all docker conntainers, including stopped docker ps -a Start workspace again. Processes and cron jobs are resumed. docker start space-1 Delete workspace container (all work will be lost) docker rm space-1 Create new workspace image Having made changes, you can commit them creating new image of the workspace. In order to create new workspace image with the name \"space-image\" and version \"0.2\" execute docker commit space-1 space-image:0.2 Run new workspace with docker run --name space2 -d space-image:0.2 The new workspace accommodates all the changes that you've made in your space-1. Hence you can have versions of your workspaces. Create different versions before the important changes. Manage workspace images See all docker images docker images Delete workspace image entirely docker rmi -f alnoda/mkdocs-magicspace NOTE: you cannot delete image if there is a running container created from it. Stop container first. Save and load workspace images After you commit workspace container, and create new image out of it, you can push it to your docker registry or save it in a file. Save workspace in a file Assuming you created new image space-image:0.4 from your workspace, you can save it as a tar file docker save space-image:0.4 > space-image-0.4.tar We can delete the image with docker rmi -f space-image:0.4 And restore it from the tar file docker load < space-image-0.4.tar Push workspace to a registry A better way to manage images is docker registries. You can use docker registries in multiple clouds. They are cheap annd very convenient. Check out for example, Registry in DigitalOcean or in Scaleway container registry . There are more. Pushing image to registry is merely 2 extra commands: 1) tag image; 2) push image You will be able to pull image on any device, local or cloud. Move workspace to the cloud Ease of running workspace in cloud, and ability to move workspaces between local machine and remote server - is one of the main features of the workspace, and the reasonn why the workspace is entirely in docker. It is often a case that experiment, which started on personal notebook require more computational resources, must be running for a long period of time, or executed periodically. All of these cases are the reasons to move a workspace to the cloud server. Usually it is a hassle, but this workspace can be moved to the remote server easily. The easiest way to move workspace to the cloud is to get your private docker registry. Then moving a workspace from a laptop to a remote server is only 3 commands: Commit workspace to the a image Push workspace to your docker registry ssh to remote server, and run workspace there If you don't want to use container registry, then there are 2 steps more involved: Commit workspace to the a image Save image to file Copy file to remote server. There are many options: Launch filexchange workspace on the remote server Use cyberduck use scp Load workspace image from file on the remote server Start workspace on the remote server","title":"Docs"},{"location":"docs/#workspace-terminal","text":"There are several ways how to work with terminal of the the mkdocs-magicspace: built-it in-browser terminal use terminal provided by in-browser IDE http://localhost:8025 ( unless other ports are mapped ) ssh into the running the docker container (of the workspace) from your terminal (Browser-based terminals always work under the user you started the workspace with, the default is non root user \"abc\") If you want to enter running workspace container from your terminal execute: docker exec -it space-1 /bin/zsh If you don't want to use z-shell docker exec -it space-1 /bin/bash This way allows to ssh into the workspace as a root user at any time, even if the workspace itself was not starter as root user (the default user is abc) docker exec -it --user = root space-1 /bin/zsh You can work in Ubuntu terminal now. Execute the followinng command to know your workspace user whoami","title":"Workspace terminal"},{"location":"docs/#multiple-workspaces","text":"Every workspace requires range of ports. If one workspace is up and running, the ports 8020-8035 are taken. mkdocs-magicspace itself uses 9 ports (8020-8028), but it is recommended to map several extra ports just in case. Having extra ports, you can always launch new applications on these ports, and they will be immediately exposed outside of the workspace. In order to start another workspace, you either need to stop currently runnning workspace, or to run another workspace on the different port range. If you are planning to run more than one workspace at the same time, you can run another workspace with the different port range, for example docker run --name space-2 -d -p 8040 -8055:8020-8035 -e ENTRY_PORT = 8040 alnoda/mkdocs-magicspace Notice that in addition we need to set environmental variable ENTRY_PORT, which should be equal to the first port in the new range. Workspace UI usues this variable to know the new port range, and redirects to the proper addresses of the workspace applications' UIs.","title":"Multiple workspaces"},{"location":"docs/#open-more-ports","text":"We started workspace container with a port range mapped \"-p 8020-8035\". If you are planning to expose more applications from inside of a container, add additional port mapping, for example docker run --name space-1 -d -p 8020 -8035:8020-8035 -p 8080 :8080 alnoda/mkdocs-magicspace You can add multiple port mappings: docker run --name space-1 -d -p 8020 -8035:8020-8035 -p 8080 :8080 -p 443 :443 alnoda/mkdocs-magicspace NOTE: It is not a problem if you don't expose any ports, but later on realise you need them - you will just create new image, and run it exposing the required port (look in the section Create new image )","title":"Open more ports"},{"location":"docs/#docker-in-docker","text":"It is possible to work with docker directly from the workspace (using workspace terminal). docker run --name space-1 -d -p 8020-8035:8020-8035 -v /var/run/docker.sock:/var/run/docker.sock alnoda/mkdocs-magicspace NOTE: in order to use docker in docker you need to or enter into the workspace container as root docker exec -it --user = root space-1 /bin/zsh","title":"Docker in docker"},{"location":"docs/#run-on-remote-server","text":"Because workspace is just a docker image, running it in any other server is as easy as running it on local laptop. Running on remote server makes it much simpler to collaborate, because you can just share credentials to the workspace with your peers, and they will be able to use it. You can also run applications that should run permanently, and run jobs on schedule.","title":"Run on remote server"},{"location":"docs/#unsecure-remote-workspace","text":"The simplest deployment of the workkspace requires only 3 steps: get virtual server on your favourite cloud (Digital Ocean, Linode, AWS, GC, Azure ...) install docker on this server ssh to the remote server and start workspace docker run --name space-1 -d -p 8020-8035:8020-8035 -e WRK_HOST=\"<ip-of-your-remote-server>\" alnoda/mkdocs-magicspace NOTE: When running workspace on the remote server, add envronmental variable -e WRK_HOST=\"<ip-of-your-remote-server>\" . Workspace UI needss this variable to know how redirect properly to the workspace applications' UIs. Open in your browser <ip-of-your-remote-server>:8020 If docker-in-docker is required, then docker run --name space-1 -d -p 8020-8035:8020-8035 -e WRK_HOST=\"<ip-of-your-remote-server>\" -v /var/run/docker.sock:/var/run/docker.sock alnoda/mkdocs-magicspace This way launches workspace in cloud, but such workspace is not secure, everyone who knows IP of your server will be able to use it.","title":"Unsecure remote workspace"},{"location":"docs/#secure-remote-workspace","text":"You might want to restrict access to the workspace, and secure encrypted communication with the workspace Kkdocs-MagicSpace contains utility that will generate everything needed to launch the workspace in cloud in a secure way, with authentication and with TLS. If you want to run workspace on the remote server securely, start mkdocs-magicspace on your local laptop first, open its terminal and use utility /home/abc/utils/remote.py to generate create docker-compose project with TLS certificates. Simply execute python /home/abc/utils/remote.py --workspace=\"mkdocs-magicspace\" --port=\"8020\" --host=\"68.183.69.198\" --user=\"user1\" --password=\"pass1\" NOTE: you have to specify the correct host (IP of the server you want to run the workspace on), and user and password of your choice. You see folder /home/abc/utils/remote is created. Copy this folder to the remote server (any location). Ssh to the server, cd into the directory you copied and execute docker-compose up -d . That's it, you workspace is running securely on the remote server, using self-signed TLS certificates for encrypted https communication between you laptop and the remote workspace, and authentication is added.","title":"Secure remote workspace"},{"location":"docs/#use-workspace","text":"Among the common actions you'd do in the workspace are installation of new applications and runtimes edit files, write code, scripts build, compile and execute code start/stop applications and services schedule tasks and scripts process data","title":"Use Workspace"},{"location":"docs/#install-applications","text":"Use workspace workspace terminal to install new applications. Install with sudo apt install . The default abc user is allowed to install packages. For example, in order to install Emacs text editor open workspace terminal, and execute sudo apt install emacs","title":"Install applications"},{"location":"docs/#schedule-jobs-with-cron","text":"Schedule execution of any task with cron - a time-based job scheduler in Unix-like computer operating systems. Open workspace terminal, and execute crontab -e (chose [1] nano as editor on the first time) In the end of the opened file add line * * * * * echo $(whoami) >> /home/cron.txt This will print every minute username to file /home/cron.txt . (Hit Ctrl+X to exit nano) Hint: example of cron job definition: .---------------- minute (0 - 59) | .------------- hour (0 - 23) | | .---------- day of month (1 - 31) | | | .------- month (1 - 12) OR jan,feb,mar,apr ... | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat | | | | | * * * * * command to be executed NOTE you can disconnect from the image and close terminal - cron will continue working. Instead of cron you might want to use Cronicle - a tool with Web UI, and a great list of features that will provide you with the dashboard, list of executions and statistics, even let you ser limis on resources for each jobs, and create depenndencies between jobs.","title":"Schedule jobs with Cron"},{"location":"docs/#python","text":"Python and Pip are installed. To use python console, open workspace terminal and execute python install python package with pip, for pip install pandas If you are planning to work with python, we recommend to install IPython, that provides a rich toolkit to help you make the most of using Python interactively. Install and start ipython pip install ipython ipython","title":"Python"},{"location":"docs/#nodejs","text":"We recommend to use nodeenv to create different node environments. For example, open workspace terminal, create folder npmgui, and activate environment with node v. 12.18.3 and npm v.6.0.0 cd /home mkdir npmgui; cd npmgui nodeenv --node=12.18.3 --npm=6.0.0 env Let's install package and start node application . env/bin/activate && npm i -g npm-gui npm-gui 0.0.0.0:8030 Open your browser on http://localhost:8030/ NOTE: If you close terminal, the application will stop. See how to start applications that reamin live after closing a workspace terminal","title":"Node.js"},{"location":"docs/#run-applications-and-services-inside-the-workspace","text":"If you want application to keep running after workspace terminal is closed start it with \"&!\" at the end. For example, in the last section we started npm-gui tool with command npm-gui 0.0.0.0:8030 . If you close the workspace terminal, this application witll stop running. To keep it running after terminal is closed, execute npm-gui 0.0.0.0:8030 &! Now, if you disconnect from the workspace and close terminal, the application will continue running in the workspace, untill workspace is stopped .","title":"Run applications and services inside the workspace"},{"location":"docs/#manage-workspaces","text":"Workspace is just a docker container. You can start, stop, delete and do anything you can do with docker images and containers. There are two concepts to keep in mind: images and containers . Images are workspace blueprints. For example, alnoda/mkdocs-magicspace - is an image. When you execute this command docker run --name space-1 -d -p 8020 -8035:8020-8035 alnoda/mkdocs-magicspace you create container called space-1 from the image alnoda/mkdocs-magicspace . You can create any number of containers, but you need to map different ports to each of them . Container - is your workspace. You can start, stop and delete them. You can run multiple workspace containers at the same time, or work with one workspace at a time. From the workspace (which is a container) you can create new image. This is called commit docker image . Essentially, this means \"take my workspace and create new image with all the changes I've done in my workspace \"","title":"Manage workspaces"},{"location":"docs/#start-and-stop-workspaces","text":"The workspace started in daemon mode will continue working in the background. See all the running docker containers docker ps Stop workspace docker stop space-1 Workspace is stopped. All the processes and cron jobs are not running. See all docker conntainers, including stopped docker ps -a Start workspace again. Processes and cron jobs are resumed. docker start space-1 Delete workspace container (all work will be lost) docker rm space-1","title":"Start and stop workspaces"},{"location":"docs/#create-new-workspace-image","text":"Having made changes, you can commit them creating new image of the workspace. In order to create new workspace image with the name \"space-image\" and version \"0.2\" execute docker commit space-1 space-image:0.2 Run new workspace with docker run --name space2 -d space-image:0.2 The new workspace accommodates all the changes that you've made in your space-1. Hence you can have versions of your workspaces. Create different versions before the important changes.","title":"Create new workspace image"},{"location":"docs/#manage-workspace-images","text":"See all docker images docker images Delete workspace image entirely docker rmi -f alnoda/mkdocs-magicspace NOTE: you cannot delete image if there is a running container created from it. Stop container first.","title":"Manage workspace images"},{"location":"docs/#save-and-load-workspace-images","text":"After you commit workspace container, and create new image out of it, you can push it to your docker registry or save it in a file.","title":"Save and load workspace images"},{"location":"docs/#save-workspace-in-a-file","text":"Assuming you created new image space-image:0.4 from your workspace, you can save it as a tar file docker save space-image:0.4 > space-image-0.4.tar We can delete the image with docker rmi -f space-image:0.4 And restore it from the tar file docker load < space-image-0.4.tar","title":"Save workspace in a file"},{"location":"docs/#push-workspace-to-a-registry","text":"A better way to manage images is docker registries. You can use docker registries in multiple clouds. They are cheap annd very convenient. Check out for example, Registry in DigitalOcean or in Scaleway container registry . There are more. Pushing image to registry is merely 2 extra commands: 1) tag image; 2) push image You will be able to pull image on any device, local or cloud.","title":"Push workspace to a registry"},{"location":"docs/#move-workspace-to-the-cloud","text":"Ease of running workspace in cloud, and ability to move workspaces between local machine and remote server - is one of the main features of the workspace, and the reasonn why the workspace is entirely in docker. It is often a case that experiment, which started on personal notebook require more computational resources, must be running for a long period of time, or executed periodically. All of these cases are the reasons to move a workspace to the cloud server. Usually it is a hassle, but this workspace can be moved to the remote server easily. The easiest way to move workspace to the cloud is to get your private docker registry. Then moving a workspace from a laptop to a remote server is only 3 commands: Commit workspace to the a image Push workspace to your docker registry ssh to remote server, and run workspace there If you don't want to use container registry, then there are 2 steps more involved: Commit workspace to the a image Save image to file Copy file to remote server. There are many options: Launch filexchange workspace on the remote server Use cyberduck use scp Load workspace image from file on the remote server Start workspace on the remote server","title":"Move workspace to the cloud"},{"location":"about/features/","text":"MkDocs-MagicSpace is an all-in-one tool, carefully crafted to create awesome static websites, with a primary focus on documentation. This workspace has everything needed to start right away. You can use MkDocs Workspace on you local environment or in the cloud server. Batteries Included MkDocs-MagicSpace has MkDocs installed with a collection of extensions and plugins that bring MkDocs to the next level. MkDocs-MagicSpace is an extension of the workspace-in-docker and has all its features: Workspace UI - launch all workspace tools from one place. Eclipse Theia - open source version of popular Visual Studio Code IDE. Theia is trully open-source, has VS-Code extensions and works in browser. This means it can run inside a docker container on local machine or in cloud. FileBrowser - manage files and folders inside the workspace, and exchange data between local environment and the workspace Cronicle - task scheduler and runner, with a web based front-end UI. It handles both scheduled, repeating and on-demand jobs, targeting any number of worker servers, with real-time stats and live log viewer. Static File Server - view any static html sites as easy as if you do it on your local machine. Serve static websites easily. Ungit - rings user friendliness to git without sacrificing the versatility of it. Midnight Commander - Feature rich visual file manager with internal text viewer and editor. Process Monitor - Monitor running process and resource utilization. Built on top of Base-workspace and Ubuntu-workspace, this workspace gets all the features those workspaces have. In particular, workspace-in-docker provides excellent experience when working directly in the terminal, and has docker-in-docker. The technology behind MkDocs-MagicSpace in its essense is all about MkDocs - a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. MkDocs has many themes, MkDocs-MagicSpace has Material for MkDocs set up and configured by default. It is one of the best themes for MkDocs, which makes your website look very professional. This theme is extremely customizable, searchable, mobile-friendly, has 40+ languages, has built-in search. It also adds lots of markdown features such as tabbed content containers, mathematical formulas, critic markup, task lists, and more than 10k icons and emojis. MkDocs-MagicSpace has lots of packages and extensions already installed: PyMdown Extensions - add even more cool features of the extended markdown: sub- and superscripts, keys, magic links, sane headers etc. Mkdocs-macro plugin - add variables and macros written in Python! Mkdocs-monorepo plugin - build multiple documentation folders in a single Mkdocs. Designed for large codebases. MkDocs Newsletter - show the changes of documentation repositories in a user friendly format, at the same time that it's easy for the authors to maintain. Mkdocs-mermaid2-plugin - renders textual graph descriptions into Mermaid graphs (flow charts, sequence diagrams, pie charts, etc.). Pygments - a generic syntax highlighter suitable for use in code hosting, forums, wikis or other applications that need to prettify source code, with over 500 languages and other text formats. Mkdocs-include-markdown-plugin - include Markdown files completely or partially, and include files of any type. Mkdocs-table-reader-plugin - directly insert CSV files as tables in your website. (The complete list of installed packages - /home/abc/installed-python-packages/mkdocs-requirements.txt) MkDocs Workspace comes with many plugins and markdown extensions set up and configured. This workspace will save you a ton lot of time, that you would otherwise waste on researching, fixing conflicts, and trying things out until they work. Workspace is in Docker MkDocs Workspace was built from Workspace-in-docker , it has all the features that Workspace-in-docker has. Dockerized Workspaces encapsulate and isolate code, configuration files, assets, secrets, installed packages, and libraries for multiple programming languages, as well as system applications. Such workspace has features that allow working conveniently in a local or remote environment having the same experience. It does not influence your local environment in any way. Workspace is super-easy to set up, use, and delete. Because workspace - is a group of applications running inside the docker container, you can develop on your laptop, as well as directly on the virtual server in any cloud. You can also start developing locally, and at any moment push the container to the remote server and vice versa. The very same docker container you use for the development can be instantly committed, in order to create a docker image, which is ready for deployment. This frees you from building new docker images for production, writing docker files, and taking care of dependencies.","title":"Features"},{"location":"about/features/#batteries-included","text":"MkDocs-MagicSpace has MkDocs installed with a collection of extensions and plugins that bring MkDocs to the next level. MkDocs-MagicSpace is an extension of the workspace-in-docker and has all its features: Workspace UI - launch all workspace tools from one place. Eclipse Theia - open source version of popular Visual Studio Code IDE. Theia is trully open-source, has VS-Code extensions and works in browser. This means it can run inside a docker container on local machine or in cloud. FileBrowser - manage files and folders inside the workspace, and exchange data between local environment and the workspace Cronicle - task scheduler and runner, with a web based front-end UI. It handles both scheduled, repeating and on-demand jobs, targeting any number of worker servers, with real-time stats and live log viewer. Static File Server - view any static html sites as easy as if you do it on your local machine. Serve static websites easily. Ungit - rings user friendliness to git without sacrificing the versatility of it. Midnight Commander - Feature rich visual file manager with internal text viewer and editor. Process Monitor - Monitor running process and resource utilization. Built on top of Base-workspace and Ubuntu-workspace, this workspace gets all the features those workspaces have. In particular, workspace-in-docker provides excellent experience when working directly in the terminal, and has docker-in-docker.","title":"Batteries Included"},{"location":"about/features/#the-technology-behind","text":"MkDocs-MagicSpace in its essense is all about MkDocs - a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. MkDocs has many themes, MkDocs-MagicSpace has Material for MkDocs set up and configured by default. It is one of the best themes for MkDocs, which makes your website look very professional. This theme is extremely customizable, searchable, mobile-friendly, has 40+ languages, has built-in search. It also adds lots of markdown features such as tabbed content containers, mathematical formulas, critic markup, task lists, and more than 10k icons and emojis. MkDocs-MagicSpace has lots of packages and extensions already installed: PyMdown Extensions - add even more cool features of the extended markdown: sub- and superscripts, keys, magic links, sane headers etc. Mkdocs-macro plugin - add variables and macros written in Python! Mkdocs-monorepo plugin - build multiple documentation folders in a single Mkdocs. Designed for large codebases. MkDocs Newsletter - show the changes of documentation repositories in a user friendly format, at the same time that it's easy for the authors to maintain. Mkdocs-mermaid2-plugin - renders textual graph descriptions into Mermaid graphs (flow charts, sequence diagrams, pie charts, etc.). Pygments - a generic syntax highlighter suitable for use in code hosting, forums, wikis or other applications that need to prettify source code, with over 500 languages and other text formats. Mkdocs-include-markdown-plugin - include Markdown files completely or partially, and include files of any type. Mkdocs-table-reader-plugin - directly insert CSV files as tables in your website. (The complete list of installed packages - /home/abc/installed-python-packages/mkdocs-requirements.txt) MkDocs Workspace comes with many plugins and markdown extensions set up and configured. This workspace will save you a ton lot of time, that you would otherwise waste on researching, fixing conflicts, and trying things out until they work.","title":"The technology behind"},{"location":"about/features/#workspace-is-in-docker","text":"MkDocs Workspace was built from Workspace-in-docker , it has all the features that Workspace-in-docker has. Dockerized Workspaces encapsulate and isolate code, configuration files, assets, secrets, installed packages, and libraries for multiple programming languages, as well as system applications. Such workspace has features that allow working conveniently in a local or remote environment having the same experience. It does not influence your local environment in any way. Workspace is super-easy to set up, use, and delete. Because workspace - is a group of applications running inside the docker container, you can develop on your laptop, as well as directly on the virtual server in any cloud. You can also start developing locally, and at any moment push the container to the remote server and vice versa. The very same docker container you use for the development can be instantly committed, in order to create a docker image, which is ready for deployment. This frees you from building new docker images for production, writing docker files, and taking care of dependencies.","title":"Workspace is in Docker"},{"location":"about/intro/","text":"MkDocs-MagicSpace lets anyone develop, build and even serve awesome documentation websites. MkDocs Workspace is made with It is free and open-source. Use-cases With the help of MkDocs-MagicSpace you can make different kinds of websites: Awesome looking docs for your open-source project. Use HTML & CSS to create front page and markdown for doc pages. User manuals and API docs. While enterprise docs are for internal use, create great-looking API websites for your users, and manuals for your customers. Enterprise documentation websites that unite numerous git repositories into one documentation project. Tutorials and training websites. Do you have a lot of experience in something? Share it with the world. MkDocs-MagicSpace helps you to highlight the code in many programming languages, write complex mathematical formulas, draw diagrams and so much more! With MkDocs-MagicSpace you can also create books, booklets, and brochures as .pdf files. Mission MkDocs-MagicSpace was made to make the development of documentation websites as easy as possible. Everything is taken care of: required software is installed, packages and extensions were carefully selected and added. Tutorials will help you to start right away, and make the best docs for your project! All you need to know MkDocs Workspace has a documentation website. It would be strange if it didn't have it This documentation provides a brief introduction to MkDocs, contains tutorials teaching how to use Markdown and Extended Markdown features, and explains how to work with MkDocs-MagicSpace. @keyframes heart { 0%, 40%, 80%, 100% { transform: scale(1); } 20%, 60% { transform: scale(1.15); } } .heart { animation: heart 1000ms infinite; color: red; font-size: 1em; }","title":"Intro"},{"location":"about/intro/#use-cases","text":"With the help of MkDocs-MagicSpace you can make different kinds of websites: Awesome looking docs for your open-source project. Use HTML & CSS to create front page and markdown for doc pages. User manuals and API docs. While enterprise docs are for internal use, create great-looking API websites for your users, and manuals for your customers. Enterprise documentation websites that unite numerous git repositories into one documentation project. Tutorials and training websites. Do you have a lot of experience in something? Share it with the world. MkDocs-MagicSpace helps you to highlight the code in many programming languages, write complex mathematical formulas, draw diagrams and so much more! With MkDocs-MagicSpace you can also create books, booklets, and brochures as .pdf files.","title":"Use-cases"},{"location":"about/intro/#mission","text":"MkDocs-MagicSpace was made to make the development of documentation websites as easy as possible. Everything is taken care of: required software is installed, packages and extensions were carefully selected and added. Tutorials will help you to start right away, and make the best docs for your project!","title":"Mission"},{"location":"about/intro/#all-you-need-to-know","text":"MkDocs Workspace has a documentation website. It would be strange if it didn't have it This documentation provides a brief introduction to MkDocs, contains tutorials teaching how to use Markdown and Extended Markdown features, and explains how to work with MkDocs-MagicSpace. @keyframes heart { 0%, 40%, 80%, 100% { transform: scale(1); } 20%, 60% { transform: scale(1.15); } } .heart { animation: heart 1000ms infinite; color: red; font-size: 1em; }","title":"All you need to know"},{"location":"about/motivation/","text":"Any tools is only good if people can use it! This makes documentation essential, if not one of the most important parts of any software product. Building good documentation is not easy hard , and that's why it is often depioritized. Especially among the open-source, resulting in many great projects remaining uderutilised not used at all . Well, it shouldn't be tlike this. And MkDocs Workspace is created to tackle this problem. It is probably one of the easiest way to develop and deploy awesome documentation websites. Why documentation website? Why would I make a separate documentation website? I document code in readme files of my git repository Github does not render extended markdown features like diagrams or formulas. In the case of closed-source software, sharing readme files from the git repository with external users is not an option. MkDocs website with beautiful themes looks much better than readme-files in the git repository. MkDocs adds text search to your documentation website. With MkDocs Workspace you create documentation from the same markdown readme files you have in your repo together with the code. With MkDocs Workspace you can easily create a single documentation website from multiple git repositories in Github, GitLab, Bitbucket, etc. You can easily add such features as Google Analytics, different languages, and separate documentation for different versions of the software product. The resulting documentation website looks professional and classy. We use Confluent / Wiki together with GitHub for internal documentation That's just terrible: having docs in different places. It creates chaos and divergence of documentation. And you never know where to look for the information you need. The best docs live together with the code. With MkDocs Workspace you can follow this practice, and use the docs that you keep with the code in the same repositories, in order to create professional documentation website.","title":"Motivation"},{"location":"about/motivation/#why-documentation-website","text":"Why would I make a separate documentation website? I document code in readme files of my git repository Github does not render extended markdown features like diagrams or formulas. In the case of closed-source software, sharing readme files from the git repository with external users is not an option. MkDocs website with beautiful themes looks much better than readme-files in the git repository. MkDocs adds text search to your documentation website. With MkDocs Workspace you create documentation from the same markdown readme files you have in your repo together with the code. With MkDocs Workspace you can easily create a single documentation website from multiple git repositories in Github, GitLab, Bitbucket, etc. You can easily add such features as Google Analytics, different languages, and separate documentation for different versions of the software product. The resulting documentation website looks professional and classy. We use Confluent / Wiki together with GitHub for internal documentation That's just terrible: having docs in different places. It creates chaos and divergence of documentation. And you never know where to look for the information you need. The best docs live together with the code. With MkDocs Workspace you can follow this practice, and use the docs that you keep with the code in the same repositories, in order to create professional documentation website.","title":"Why documentation website?"},{"location":"mkdocs-magicspace/","text":"MkDocs-MagicSpace MkDocs-MagicSpace is an all-in-one tool, carefully crafted to develop, build and serve awesome static websites, for the purpose of documentation, tutorials, and training. Try it out docker run --name space-1 -d -p 8020-8035:8020-8035 alnoda/mkdocs-magicspace Contents Use-cases Why documentation websites Features The technology behind Launch Workspace Workspace terminal Multiple workspaces Open more ports Docker in docker Run on remote server Use Workspace Install applications Schedule jobs with Cron Python Node.js Run applications and services inside the workspace Manage workspaces Start and stop workspaces Create new workspace image Manage workspace images Save and load workspace images Move workspace to the cloud Use-cases With the help of MkDocs-MagicSpace you can develop, build and serve the following kinds of websites: Awesome looking docs for your open-source project. Use HTML & CSS to create front page and markdown for doc pages. User manuals and API docs. While enterprise docs are for internal use, create great-looking API websites for your users, and manuals for your customers. Enterprise documentation websites that unite numerous git repositories into one documentation project. Tutorials and training websites. Do you have a lot of experience in something? Share it with the world. MkDocs-MagicSpace helps you to highlight the code in many programming languages, write complex mathematical formulas, draw diagrams and so much more! With MkDocs-MagicSpace you can also create books, booklets, and brochures as .pdf files. One of the most convenient features of the MkDocs-MagicSpace - is that it is a workspace in docker. You use it on your local machine, you can run it on the remote server and collaborate with your colleagues, you can give it to your peer as a whole. And you can use it to serve your docs from any server, no matter if it is public or inside the company's VPN. Why documentation websites Why create separate documentation websites? Why not just write Git readme files? MkDocs website with beautiful themes looks much better than any readme file. The resulting documentation website looks professional and awesome. MkDocs adds text search to your documentation website. In the case of closed-source software, sharing readme files from the git repository with external users is not an option. Github does not render beautiful extended markdown features like admonitions, tabs, etc. Neither renders diagrams, formulas, swagger docs, or notebooks. Using MkDocs-MagicSpace you create documentation from the same markdown readme files you have in your repo together with the code. And you can create a unified documentation website from multiple repositories in Github, GitLab, Bitbucket. You can add such features as Google Analytics, multi-language localization. And what about Confluent? The approach of having docs in different places (Git repositories, Confluent, Wiki, etc.) has serious drawbacks. It creates chaos, and documentation inevitably diverges with time. And you never know where to look for the information you need. The best docs live together with the code. With MkDocs-MagicSpace you can follow this practice with ease, build a documentation website from one or many git repositories, include readme files that live close to the code. You can have a build process that even creates auto-documentation directly from the code. Features MkDocs-MagicSpace has MkDocs installed with a collection of extensions and plugins that bring MkDocs to the next level. MkDocs-MagicSpace is an extension of the workspace-in-docker and has all its features: Workspace UI - launch all workspace tools from one place. Eclipse Theia - open source version of popular Visual Studio Code IDE. Theia is trully open-source, has VS-Code extensions and works in browser. This means it can run inside a docker container on local machine or in cloud. FileBrowser - manage files and folders inside the workspace, and exchange data between local environment and the workspace Cronicle - task scheduler and runner, with a web based front-end UI. It handles both scheduled, repeating and on-demand jobs, targeting any number of worker servers, with real-time stats and live log viewer. Static File Server - view any static html sites as easy as if you do it on your local machine. Serve static websites easily. Ungit - rings user friendliness to git without sacrificing the versatility of it. Midnight Commander - Feature rich visual file manager with internal text viewer and editor. Process Monitor - Monitor running process and resource utilization. Built on top of Base-workspace and Ubuntu-workspace, this workspace gets all the features those workspaces have. In particular, workspace-in-docker provides excellent experience when working directly in the terminal, and has docker-in-docker. The technology behind MkDocs-MagicSpace in its essense is all about MkDocs - a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. MkDocs has many themes, MkDocs-MagicSpace has Material for MkDocs set up and configured by default. It is one of the best themes for MkDocs, which makes your website look very professional. This theme is extremely customizable, searchable, mobile-friendly, has 40+ languages, has built-in search. It also adds lots of markdown features such as tabbed content containers, mathematical formulas, critic markup, task lists, and more than 10k icons and emojis. MkDocs-MagicSpace has lots of packages and extensions already installed: PyMdown Extensions - add even more cool features of the extended markdown: sub- and superscripts, keys, magic links, sane headers etc. Mkdocs-macro plugin - add variables and macros written in Python! Mkdocs-monorepo plugin - build multiple documentation folders in a single Mkdocs. Designed for large codebases. MkDocs Newsletter - show the changes of documentation repositories in a user friendly format, at the same time that it's easy for the authors to maintain. Mkdocs-mermaid2-plugin - renders textual graph descriptions into Mermaid graphs (flow charts, sequence diagrams, pie charts, etc.). Pygments - a generic syntax highlighter suitable for use in code hosting, forums, wikis or other applications that need to prettify source code, with over 500 languages and other text formats. Mkdocs-include-markdown-plugin - include Markdown files completely or partially, and include files of any type. Mkdocs-table-reader-plugin - directly insert CSV files as tables in your website. (The complete list of installed packages - /home/abc/installed-python-packages/mkdocs-requirements.txt) Launch Workspace Workspaces - are merely docker containers, that's why managing workspaces is easy and intuitive - it is enough to know only docker commands, no need to learn any new tools. In order to avoid confusion, the following convention is adopted: command to execute outside of the workspace command to execute inside the workspace (after entering running docker container) To start a workspace simply execute in terminal docker run --name space-1 -d -p 8020 -8035:8020-8035 alnoda/mkdocs-magicspace (It is recommended to run workspace in the daemon mode) Open http://localhost:8020 Workspace has its own UI, which includes quiklaunch (home) page and documentation pages. From the quiklaunch you can open any workspace tool. Documentation pages you modify in order to document the project, workspace use and setup. Workspace terminal There are several ways how to work with terminal of the the mkdocs-magicspace: built-it in-browser terminal use terminal provided by in-browser IDE http://localhost:8025 ( unless other ports are mapped ) ssh into the running the docker container (of the workspace) from your terminal (Browser-based terminals always work under the user you started the workspace with, the default is non root user \"abc\") If you want to enter running workspace container from your terminal execute: docker exec -it space-1 /bin/zsh If you don't want to use z-shell docker exec -it space-1 /bin/bash This way allows to ssh into the workspace as a root user at any time, even if the workspace itself was not starter as root user (the default user is abc) docker exec -it --user = root space-1 /bin/zsh You can work in Ubuntu terminal now. Execute the followinng command to know your workspace user whoami Multiple workspaces Every workspace requires range of ports. If one workspace is up and running, the ports 8020-8035 are taken. mkdocs-magicspace itself uses 9 ports (8020-8028), but it is recommended to map several extra ports just in case. Having extra ports, you can always launch new applications on these ports, and they will be immediately exposed outside of the workspace. In order to start another workspace, you either need to stop currently runnning workspace, or to run another workspace on the different port range. If you are planning to run more than one workspace at the same time, you can run another workspace with the different port range, for example docker run --name space-2 -d -p 8040 -8055:8020-8035 -e ENTRY_PORT = 8040 alnoda/mkdocs-magicspace Notice that in addition we need to set environmental variable ENTRY_PORT, which should be equal to the first port in the new range. Workspace UI usues this variable to know the new port range, and redirects to the proper addresses of the workspace applications' UIs. Open more ports We started workspace container with a port range mapped \"-p 8020-8035\". If you are planning to expose more applications from inside of a container, add additional port mapping, for example docker run --name space-1 -d -p 8020 -8035:8020-8035 -p 8080 :8080 alnoda/mkdocs-magicspace You can add multiple port mappings: docker run --name space-1 -d -p 8020 -8035:8020-8035 -p 8080 :8080 -p 443 :443 alnoda/mkdocs-magicspace NOTE: It is not a problem if you don't expose any ports, but later on realise you need them - you will just create new image, and run it exposing the required port (look in the section Create new image ) Docker in docker It is possible to work with docker directly from the workspace (using workspace terminal). docker run --name space-1 -d -p 8020-8035:8020-8035 -v /var/run/docker.sock:/var/run/docker.sock alnoda/mkdocs-magicspace NOTE: in order to use docker in docker you need to or enter into the workspace container as root docker exec -it --user = root space-1 /bin/zsh Run on remote server Because workspace is just a docker image, running it in any other server is as easy as running it on local laptop. Running on remote server makes it much simpler to collaborate, because you can just share credentials to the workspace with your peers, and they will be able to use it. You can also run applications that should run permanently, and run jobs on schedule. Unsecure remote workspace The simplest deployment of the workkspace requires only 3 steps: get virtual server on your favourite cloud (Digital Ocean, Linode, AWS, GC, Azure ...) install docker on this server ssh to the remote server and start workspace docker run --name space-1 -d -p 8020-8035:8020-8035 -e WRK_HOST=\"<ip-of-your-remote-server>\" alnoda/mkdocs-magicspace NOTE: When running workspace on the remote server, add envronmental variable -e WRK_HOST=\"<ip-of-your-remote-server>\" . Workspace UI needss this variable to know how redirect properly to the workspace applications' UIs. Open in your browser <ip-of-your-remote-server>:8020 If docker-in-docker is required, then docker run --name space-1 -d -p 8020-8035:8020-8035 -e WRK_HOST=\"<ip-of-your-remote-server>\" -v /var/run/docker.sock:/var/run/docker.sock alnoda/mkdocs-magicspace This way launches workspace in cloud, but such workspace is not secure, everyone who knows IP of your server will be able to use it. Secure remote workspace You might want to restrict access to the workspace, and secure encrypted communication with the workspace Kkdocs-MagicSpace contains utility that will generate everything needed to launch the workspace in cloud in a secure way, with authentication and with TLS. If you want to run workspace on the remote server securely, start mkdocs-magicspace on your local laptop first, open its terminal and use utility /home/abc/utils/remote.py to generate create docker-compose project with TLS certificates. Simply execute python /home/abc/utils/remote.py --workspace=\"mkdocs-magicspace\" --port=\"8020\" --host=\"68.183.69.198\" --user=\"user1\" --password=\"pass1\" NOTE: you have to specify the correct host (IP of the server you want to run the workspace on), and user and password of your choice. You see folder /home/abc/utils/remote is created. Copy this folder to the remote server (any location). Ssh to the server, cd into the directory you copied and execute docker-compose up -d . That's it, you workspace is running securely on the remote server, using self-signed TLS certificates for encrypted https communication between you laptop and the remote workspace, and authentication is added. Use Workspace Among the common actions you'd do in the workspace are installation of new applications and runtimes edit files, write code, scripts build, compile and execute code start/stop applications and services schedule tasks and scripts process data Install applications Use workspace workspace terminal to install new applications. Install with sudo apt install . The default abc user is allowed to install packages. For example, in order to install Emacs text editor open workspace terminal, and execute sudo apt install emacs Schedule jobs with Cron Schedule execution of any task with cron - a time-based job scheduler in Unix-like computer operating systems. Open workspace terminal, and execute crontab -e (chose [1] nano as editor on the first time) In the end of the opened file add line * * * * * echo $(whoami) >> /home/cron.txt This will print every minute username to file /home/cron.txt . (Hit Ctrl+X to exit nano) Hint: example of cron job definition: .---------------- minute (0 - 59) | .------------- hour (0 - 23) | | .---------- day of month (1 - 31) | | | .------- month (1 - 12) OR jan,feb,mar,apr ... | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat | | | | | * * * * * command to be executed NOTE you can disconnect from the image and close terminal - cron will continue working. Instead of cron you might want to use Cronicle - a tool with Web UI, and a great list of features that will provide you with the dashboard, list of executions and statistics, even let you ser limis on resources for each jobs, and create depenndencies between jobs. Python Python and Pip are installed. To use python console, open workspace terminal and execute python install python package with pip, for pip install pandas If you are planning to work with python, we recommend to install IPython, that provides a rich toolkit to help you make the most of using Python interactively. Install and start ipython pip install ipython ipython Node.js We recommend to use nodeenv to create different node environments. For example, open workspace terminal, create folder npmgui, and activate environment with node v. 12.18.3 and npm v.6.0.0 cd /home mkdir npmgui; cd npmgui nodeenv --node=12.18.3 --npm=6.0.0 env Let's install package and start node application . env/bin/activate && npm i -g npm-gui npm-gui 0.0.0.0:8030 Open your browser on http://localhost:8030/ NOTE: If you close terminal, the application will stop. See how to start applications that reamin live after closing a workspace terminal Run applications and services inside the workspace If you want application to keep running after workspace terminal is closed start it with \"&!\" at the end. For example, in the last section we started npm-gui tool with command npm-gui 0.0.0.0:8030 . If you close the workspace terminal, this application witll stop running. To keep it running after terminal is closed, execute npm-gui 0.0.0.0:8030 &! Now, if you disconnect from the workspace and close terminal, the application will continue running in the workspace, untill workspace is stopped . Manage workspaces Workspace is just a docker container. You can start, stop, delete and do anything you can do with docker images and containers. There are two concepts to keep in mind: images and containers . Images are workspace blueprints. For example, alnoda/mkdocs-magicspace - is an image. When you execute this command docker run --name space-1 -d -p 8020 -8035:8020-8035 alnoda/mkdocs-magicspace you create container called space-1 from the image alnoda/mkdocs-magicspace . You can create any number of containers, but you need to map different ports to each of them . Container - is your workspace. You can start, stop and delete them. You can run multiple workspace containers at the same time, or work with one workspace at a time. From the workspace (which is a container) you can create new image. This is called commit docker image . Essentially, this means \"take my workspace and create new image with all the changes I've done in my workspace \" Start and stop workspaces The workspace started in daemon mode will continue working in the background. See all the running docker containers docker ps Stop workspace docker stop space-1 Workspace is stopped. All the processes and cron jobs are not running. See all docker conntainers, including stopped docker ps -a Start workspace again. Processes and cron jobs are resumed. docker start space-1 Delete workspace container (all work will be lost) docker rm space-1 Create new workspace image Having made changes, you can commit them creating new image of the workspace. In order to create new workspace image with the name \"space-image\" and version \"0.2\" execute docker commit space-1 space-image:0.2 Run new workspace with docker run --name space2 -d space-image:0.2 The new workspace accommodates all the changes that you've made in your space-1. Hence you can have versions of your workspaces. Create different versions before the important changes. Manage workspace images See all docker images docker images Delete workspace image entirely docker rmi -f alnoda/mkdocs-magicspace NOTE: you cannot delete image if there is a running container created from it. Stop container first. Save and load workspace images After you commit workspace container, and create new image out of it, you can push it to your docker registry or save it in a file. Save workspace in a file Assuming you created new image space-image:0.4 from your workspace, you can save it as a tar file docker save space-image:0.4 > space-image-0.4.tar We can delete the image with docker rmi -f space-image:0.4 And restore it from the tar file docker load < space-image-0.4.tar Push workspace to a registry A better way to manage images is docker registries. You can use docker registries in multiple clouds. They are cheap annd very convenient. Check out for example, Registry in DigitalOcean or in Scaleway container registry . There are more. Pushing image to registry is merely 2 extra commands: 1) tag image; 2) push image You will be able to pull image on any device, local or cloud. Move workspace to the cloud Ease of running workspace in cloud, and ability to move workspaces between local machine and remote server - is one of the main features of the workspace, and the reasonn why the workspace is entirely in docker. It is often a case that experiment, which started on personal notebook require more computational resources, must be running for a long period of time, or executed periodically. All of these cases are the reasons to move a workspace to the cloud server. Usually it is a hassle, but this workspace can be moved to the remote server easily. The easiest way to move workspace to the cloud is to get your private docker registry. Then moving a workspace from a laptop to a remote server is only 3 commands: Commit workspace to the a image Push workspace to your docker registry ssh to remote server, and run workspace there If you don't want to use container registry, then there are 2 steps more involved: Commit workspace to the a image Save image to file Copy file to remote server. There are many options: Launch filexchange workspace on the remote server Use cyberduck use scp Load workspace image from file on the remote server Start workspace on the remote server","title":"MkDocs-MagicSpace"},{"location":"mkdocs-magicspace/#mkdocs-magicspace","text":"MkDocs-MagicSpace is an all-in-one tool, carefully crafted to develop, build and serve awesome static websites, for the purpose of documentation, tutorials, and training.","title":"MkDocs-MagicSpace"},{"location":"mkdocs-magicspace/#try-it-out","text":"docker run --name space-1 -d -p 8020-8035:8020-8035 alnoda/mkdocs-magicspace","title":"Try it out"},{"location":"mkdocs-magicspace/#contents","text":"Use-cases Why documentation websites Features The technology behind Launch Workspace Workspace terminal Multiple workspaces Open more ports Docker in docker Run on remote server Use Workspace Install applications Schedule jobs with Cron Python Node.js Run applications and services inside the workspace Manage workspaces Start and stop workspaces Create new workspace image Manage workspace images Save and load workspace images Move workspace to the cloud","title":"Contents"},{"location":"mkdocs-magicspace/#use-cases","text":"With the help of MkDocs-MagicSpace you can develop, build and serve the following kinds of websites: Awesome looking docs for your open-source project. Use HTML & CSS to create front page and markdown for doc pages. User manuals and API docs. While enterprise docs are for internal use, create great-looking API websites for your users, and manuals for your customers. Enterprise documentation websites that unite numerous git repositories into one documentation project. Tutorials and training websites. Do you have a lot of experience in something? Share it with the world. MkDocs-MagicSpace helps you to highlight the code in many programming languages, write complex mathematical formulas, draw diagrams and so much more! With MkDocs-MagicSpace you can also create books, booklets, and brochures as .pdf files. One of the most convenient features of the MkDocs-MagicSpace - is that it is a workspace in docker. You use it on your local machine, you can run it on the remote server and collaborate with your colleagues, you can give it to your peer as a whole. And you can use it to serve your docs from any server, no matter if it is public or inside the company's VPN.","title":"Use-cases"},{"location":"mkdocs-magicspace/#why-documentation-websites","text":"Why create separate documentation websites? Why not just write Git readme files? MkDocs website with beautiful themes looks much better than any readme file. The resulting documentation website looks professional and awesome. MkDocs adds text search to your documentation website. In the case of closed-source software, sharing readme files from the git repository with external users is not an option. Github does not render beautiful extended markdown features like admonitions, tabs, etc. Neither renders diagrams, formulas, swagger docs, or notebooks. Using MkDocs-MagicSpace you create documentation from the same markdown readme files you have in your repo together with the code. And you can create a unified documentation website from multiple repositories in Github, GitLab, Bitbucket. You can add such features as Google Analytics, multi-language localization. And what about Confluent? The approach of having docs in different places (Git repositories, Confluent, Wiki, etc.) has serious drawbacks. It creates chaos, and documentation inevitably diverges with time. And you never know where to look for the information you need. The best docs live together with the code. With MkDocs-MagicSpace you can follow this practice with ease, build a documentation website from one or many git repositories, include readme files that live close to the code. You can have a build process that even creates auto-documentation directly from the code.","title":"Why documentation websites"},{"location":"mkdocs-magicspace/#features","text":"MkDocs-MagicSpace has MkDocs installed with a collection of extensions and plugins that bring MkDocs to the next level. MkDocs-MagicSpace is an extension of the workspace-in-docker and has all its features: Workspace UI - launch all workspace tools from one place. Eclipse Theia - open source version of popular Visual Studio Code IDE. Theia is trully open-source, has VS-Code extensions and works in browser. This means it can run inside a docker container on local machine or in cloud. FileBrowser - manage files and folders inside the workspace, and exchange data between local environment and the workspace Cronicle - task scheduler and runner, with a web based front-end UI. It handles both scheduled, repeating and on-demand jobs, targeting any number of worker servers, with real-time stats and live log viewer. Static File Server - view any static html sites as easy as if you do it on your local machine. Serve static websites easily. Ungit - rings user friendliness to git without sacrificing the versatility of it. Midnight Commander - Feature rich visual file manager with internal text viewer and editor. Process Monitor - Monitor running process and resource utilization. Built on top of Base-workspace and Ubuntu-workspace, this workspace gets all the features those workspaces have. In particular, workspace-in-docker provides excellent experience when working directly in the terminal, and has docker-in-docker.","title":"Features"},{"location":"mkdocs-magicspace/#the-technology-behind","text":"MkDocs-MagicSpace in its essense is all about MkDocs - a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. MkDocs has many themes, MkDocs-MagicSpace has Material for MkDocs set up and configured by default. It is one of the best themes for MkDocs, which makes your website look very professional. This theme is extremely customizable, searchable, mobile-friendly, has 40+ languages, has built-in search. It also adds lots of markdown features such as tabbed content containers, mathematical formulas, critic markup, task lists, and more than 10k icons and emojis. MkDocs-MagicSpace has lots of packages and extensions already installed: PyMdown Extensions - add even more cool features of the extended markdown: sub- and superscripts, keys, magic links, sane headers etc. Mkdocs-macro plugin - add variables and macros written in Python! Mkdocs-monorepo plugin - build multiple documentation folders in a single Mkdocs. Designed for large codebases. MkDocs Newsletter - show the changes of documentation repositories in a user friendly format, at the same time that it's easy for the authors to maintain. Mkdocs-mermaid2-plugin - renders textual graph descriptions into Mermaid graphs (flow charts, sequence diagrams, pie charts, etc.). Pygments - a generic syntax highlighter suitable for use in code hosting, forums, wikis or other applications that need to prettify source code, with over 500 languages and other text formats. Mkdocs-include-markdown-plugin - include Markdown files completely or partially, and include files of any type. Mkdocs-table-reader-plugin - directly insert CSV files as tables in your website. (The complete list of installed packages - /home/abc/installed-python-packages/mkdocs-requirements.txt)","title":"The technology behind"},{"location":"mkdocs-magicspace/#launch-workspace","text":"Workspaces - are merely docker containers, that's why managing workspaces is easy and intuitive - it is enough to know only docker commands, no need to learn any new tools. In order to avoid confusion, the following convention is adopted: command to execute outside of the workspace command to execute inside the workspace (after entering running docker container) To start a workspace simply execute in terminal docker run --name space-1 -d -p 8020 -8035:8020-8035 alnoda/mkdocs-magicspace (It is recommended to run workspace in the daemon mode) Open http://localhost:8020 Workspace has its own UI, which includes quiklaunch (home) page and documentation pages. From the quiklaunch you can open any workspace tool. Documentation pages you modify in order to document the project, workspace use and setup.","title":"Launch Workspace"},{"location":"mkdocs-magicspace/#workspace-terminal","text":"There are several ways how to work with terminal of the the mkdocs-magicspace: built-it in-browser terminal use terminal provided by in-browser IDE http://localhost:8025 ( unless other ports are mapped ) ssh into the running the docker container (of the workspace) from your terminal (Browser-based terminals always work under the user you started the workspace with, the default is non root user \"abc\") If you want to enter running workspace container from your terminal execute: docker exec -it space-1 /bin/zsh If you don't want to use z-shell docker exec -it space-1 /bin/bash This way allows to ssh into the workspace as a root user at any time, even if the workspace itself was not starter as root user (the default user is abc) docker exec -it --user = root space-1 /bin/zsh You can work in Ubuntu terminal now. Execute the followinng command to know your workspace user whoami","title":"Workspace terminal"},{"location":"mkdocs-magicspace/#multiple-workspaces","text":"Every workspace requires range of ports. If one workspace is up and running, the ports 8020-8035 are taken. mkdocs-magicspace itself uses 9 ports (8020-8028), but it is recommended to map several extra ports just in case. Having extra ports, you can always launch new applications on these ports, and they will be immediately exposed outside of the workspace. In order to start another workspace, you either need to stop currently runnning workspace, or to run another workspace on the different port range. If you are planning to run more than one workspace at the same time, you can run another workspace with the different port range, for example docker run --name space-2 -d -p 8040 -8055:8020-8035 -e ENTRY_PORT = 8040 alnoda/mkdocs-magicspace Notice that in addition we need to set environmental variable ENTRY_PORT, which should be equal to the first port in the new range. Workspace UI usues this variable to know the new port range, and redirects to the proper addresses of the workspace applications' UIs.","title":"Multiple workspaces"},{"location":"mkdocs-magicspace/#open-more-ports","text":"We started workspace container with a port range mapped \"-p 8020-8035\". If you are planning to expose more applications from inside of a container, add additional port mapping, for example docker run --name space-1 -d -p 8020 -8035:8020-8035 -p 8080 :8080 alnoda/mkdocs-magicspace You can add multiple port mappings: docker run --name space-1 -d -p 8020 -8035:8020-8035 -p 8080 :8080 -p 443 :443 alnoda/mkdocs-magicspace NOTE: It is not a problem if you don't expose any ports, but later on realise you need them - you will just create new image, and run it exposing the required port (look in the section Create new image )","title":"Open more ports"},{"location":"mkdocs-magicspace/#docker-in-docker","text":"It is possible to work with docker directly from the workspace (using workspace terminal). docker run --name space-1 -d -p 8020-8035:8020-8035 -v /var/run/docker.sock:/var/run/docker.sock alnoda/mkdocs-magicspace NOTE: in order to use docker in docker you need to or enter into the workspace container as root docker exec -it --user = root space-1 /bin/zsh","title":"Docker in docker"},{"location":"mkdocs-magicspace/#run-on-remote-server","text":"Because workspace is just a docker image, running it in any other server is as easy as running it on local laptop. Running on remote server makes it much simpler to collaborate, because you can just share credentials to the workspace with your peers, and they will be able to use it. You can also run applications that should run permanently, and run jobs on schedule.","title":"Run on remote server"},{"location":"mkdocs-magicspace/#unsecure-remote-workspace","text":"The simplest deployment of the workkspace requires only 3 steps: get virtual server on your favourite cloud (Digital Ocean, Linode, AWS, GC, Azure ...) install docker on this server ssh to the remote server and start workspace docker run --name space-1 -d -p 8020-8035:8020-8035 -e WRK_HOST=\"<ip-of-your-remote-server>\" alnoda/mkdocs-magicspace NOTE: When running workspace on the remote server, add envronmental variable -e WRK_HOST=\"<ip-of-your-remote-server>\" . Workspace UI needss this variable to know how redirect properly to the workspace applications' UIs. Open in your browser <ip-of-your-remote-server>:8020 If docker-in-docker is required, then docker run --name space-1 -d -p 8020-8035:8020-8035 -e WRK_HOST=\"<ip-of-your-remote-server>\" -v /var/run/docker.sock:/var/run/docker.sock alnoda/mkdocs-magicspace This way launches workspace in cloud, but such workspace is not secure, everyone who knows IP of your server will be able to use it.","title":"Unsecure remote workspace"},{"location":"mkdocs-magicspace/#secure-remote-workspace","text":"You might want to restrict access to the workspace, and secure encrypted communication with the workspace Kkdocs-MagicSpace contains utility that will generate everything needed to launch the workspace in cloud in a secure way, with authentication and with TLS. If you want to run workspace on the remote server securely, start mkdocs-magicspace on your local laptop first, open its terminal and use utility /home/abc/utils/remote.py to generate create docker-compose project with TLS certificates. Simply execute python /home/abc/utils/remote.py --workspace=\"mkdocs-magicspace\" --port=\"8020\" --host=\"68.183.69.198\" --user=\"user1\" --password=\"pass1\" NOTE: you have to specify the correct host (IP of the server you want to run the workspace on), and user and password of your choice. You see folder /home/abc/utils/remote is created. Copy this folder to the remote server (any location). Ssh to the server, cd into the directory you copied and execute docker-compose up -d . That's it, you workspace is running securely on the remote server, using self-signed TLS certificates for encrypted https communication between you laptop and the remote workspace, and authentication is added.","title":"Secure remote workspace"},{"location":"mkdocs-magicspace/#use-workspace","text":"Among the common actions you'd do in the workspace are installation of new applications and runtimes edit files, write code, scripts build, compile and execute code start/stop applications and services schedule tasks and scripts process data","title":"Use Workspace"},{"location":"mkdocs-magicspace/#install-applications","text":"Use workspace workspace terminal to install new applications. Install with sudo apt install . The default abc user is allowed to install packages. For example, in order to install Emacs text editor open workspace terminal, and execute sudo apt install emacs","title":"Install applications"},{"location":"mkdocs-magicspace/#schedule-jobs-with-cron","text":"Schedule execution of any task with cron - a time-based job scheduler in Unix-like computer operating systems. Open workspace terminal, and execute crontab -e (chose [1] nano as editor on the first time) In the end of the opened file add line * * * * * echo $(whoami) >> /home/cron.txt This will print every minute username to file /home/cron.txt . (Hit Ctrl+X to exit nano) Hint: example of cron job definition: .---------------- minute (0 - 59) | .------------- hour (0 - 23) | | .---------- day of month (1 - 31) | | | .------- month (1 - 12) OR jan,feb,mar,apr ... | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat | | | | | * * * * * command to be executed NOTE you can disconnect from the image and close terminal - cron will continue working. Instead of cron you might want to use Cronicle - a tool with Web UI, and a great list of features that will provide you with the dashboard, list of executions and statistics, even let you ser limis on resources for each jobs, and create depenndencies between jobs.","title":"Schedule jobs with Cron"},{"location":"mkdocs-magicspace/#python","text":"Python and Pip are installed. To use python console, open workspace terminal and execute python install python package with pip, for pip install pandas If you are planning to work with python, we recommend to install IPython, that provides a rich toolkit to help you make the most of using Python interactively. Install and start ipython pip install ipython ipython","title":"Python"},{"location":"mkdocs-magicspace/#nodejs","text":"We recommend to use nodeenv to create different node environments. For example, open workspace terminal, create folder npmgui, and activate environment with node v. 12.18.3 and npm v.6.0.0 cd /home mkdir npmgui; cd npmgui nodeenv --node=12.18.3 --npm=6.0.0 env Let's install package and start node application . env/bin/activate && npm i -g npm-gui npm-gui 0.0.0.0:8030 Open your browser on http://localhost:8030/ NOTE: If you close terminal, the application will stop. See how to start applications that reamin live after closing a workspace terminal","title":"Node.js"},{"location":"mkdocs-magicspace/#run-applications-and-services-inside-the-workspace","text":"If you want application to keep running after workspace terminal is closed start it with \"&!\" at the end. For example, in the last section we started npm-gui tool with command npm-gui 0.0.0.0:8030 . If you close the workspace terminal, this application witll stop running. To keep it running after terminal is closed, execute npm-gui 0.0.0.0:8030 &! Now, if you disconnect from the workspace and close terminal, the application will continue running in the workspace, untill workspace is stopped .","title":"Run applications and services inside the workspace"},{"location":"mkdocs-magicspace/#manage-workspaces","text":"Workspace is just a docker container. You can start, stop, delete and do anything you can do with docker images and containers. There are two concepts to keep in mind: images and containers . Images are workspace blueprints. For example, alnoda/mkdocs-magicspace - is an image. When you execute this command docker run --name space-1 -d -p 8020 -8035:8020-8035 alnoda/mkdocs-magicspace you create container called space-1 from the image alnoda/mkdocs-magicspace . You can create any number of containers, but you need to map different ports to each of them . Container - is your workspace. You can start, stop and delete them. You can run multiple workspace containers at the same time, or work with one workspace at a time. From the workspace (which is a container) you can create new image. This is called commit docker image . Essentially, this means \"take my workspace and create new image with all the changes I've done in my workspace \"","title":"Manage workspaces"},{"location":"mkdocs-magicspace/#start-and-stop-workspaces","text":"The workspace started in daemon mode will continue working in the background. See all the running docker containers docker ps Stop workspace docker stop space-1 Workspace is stopped. All the processes and cron jobs are not running. See all docker conntainers, including stopped docker ps -a Start workspace again. Processes and cron jobs are resumed. docker start space-1 Delete workspace container (all work will be lost) docker rm space-1","title":"Start and stop workspaces"},{"location":"mkdocs-magicspace/#create-new-workspace-image","text":"Having made changes, you can commit them creating new image of the workspace. In order to create new workspace image with the name \"space-image\" and version \"0.2\" execute docker commit space-1 space-image:0.2 Run new workspace with docker run --name space2 -d space-image:0.2 The new workspace accommodates all the changes that you've made in your space-1. Hence you can have versions of your workspaces. Create different versions before the important changes.","title":"Create new workspace image"},{"location":"mkdocs-magicspace/#manage-workspace-images","text":"See all docker images docker images Delete workspace image entirely docker rmi -f alnoda/mkdocs-magicspace NOTE: you cannot delete image if there is a running container created from it. Stop container first.","title":"Manage workspace images"},{"location":"mkdocs-magicspace/#save-and-load-workspace-images","text":"After you commit workspace container, and create new image out of it, you can push it to your docker registry or save it in a file.","title":"Save and load workspace images"},{"location":"mkdocs-magicspace/#save-workspace-in-a-file","text":"Assuming you created new image space-image:0.4 from your workspace, you can save it as a tar file docker save space-image:0.4 > space-image-0.4.tar We can delete the image with docker rmi -f space-image:0.4 And restore it from the tar file docker load < space-image-0.4.tar","title":"Save workspace in a file"},{"location":"mkdocs-magicspace/#push-workspace-to-a-registry","text":"A better way to manage images is docker registries. You can use docker registries in multiple clouds. They are cheap annd very convenient. Check out for example, Registry in DigitalOcean or in Scaleway container registry . There are more. Pushing image to registry is merely 2 extra commands: 1) tag image; 2) push image You will be able to pull image on any device, local or cloud.","title":"Push workspace to a registry"},{"location":"mkdocs-magicspace/#move-workspace-to-the-cloud","text":"Ease of running workspace in cloud, and ability to move workspaces between local machine and remote server - is one of the main features of the workspace, and the reasonn why the workspace is entirely in docker. It is often a case that experiment, which started on personal notebook require more computational resources, must be running for a long period of time, or executed periodically. All of these cases are the reasons to move a workspace to the cloud server. Usually it is a hassle, but this workspace can be moved to the remote server easily. The easiest way to move workspace to the cloud is to get your private docker registry. Then moving a workspace from a laptop to a remote server is only 3 commands: Commit workspace to the a image Push workspace to your docker registry ssh to remote server, and run workspace there If you don't want to use container registry, then there are 2 steps more involved: Commit workspace to the a image Save image to file Copy file to remote server. There are many options: Launch filexchange workspace on the remote server Use cyberduck use scp Load workspace image from file on the remote server Start workspace on the remote server","title":"Move workspace to the cloud"},{"location":"mkdocs-magicspace/mkdocs/showcase/","text":"Few of the Extended Markdown features Code 1 2 3 4 5 6 7 8 def insertion_sort ( nums ): for i in range ( 1 , len ( nums )): item_to_insert = nums [ i ] j = i - 1 while j >= 0 and nums [ j ] > item_to_insert : nums [ j + 1 ] = nums [ j ] j -= 1 nums [ j + 1 ] = item_to_insert Emoji Critic We Uber drivers never know whom we\u2019re going to end up with as a passenger in the same car . One day, I was driving over a new bridge, the design of which was very confusing ugly . Completely confounded, I muttered Actually I said it out loud , \u201cI\u2019d love to meet the genius retard who designed this mess.\u201d With that, my passenger extended his hand in my direction I thought he wanted to choke me and said, \u201cWell, today is your very lucky day. My name is Mike, I work for the county engineer\u2019s office, and I\u2019m the genius obviously an irony who designed this!\u201d. Surprisingly, he still gave me a tip of 2 dollars . Keys Enter Tab Space Up Down Page Up Home Backspace Ins Tabls, lists & admonitions Tasklist Output Plans at work Make vanilla pudding. Put in mayo jar. Eat in the office during the lunch break Wear shirt that says \u201cLife\u201d. Hand out lemons to colleagues. Hire two private investigators. Get them to follow each other. Personal plans Make an alcoholic beverage and name it \u201cresponsibly.\u201d Start drinking Responsibly. Sneeze in front of the Pope. Get blessed. Buy a horse, name it \u201cOscar Takes The Lead,\u201d enter it in horse races. Markdown - [X] Plans at work * [X] Make vanilla pudding. Put in mayo jar. Eat in the office during the lunch break * [X] Wear shirt that says \u201cLife\u201d. Hand out lemons to colleagues. * [ ] Hire two private investigators. Get them to follow each other. - [ ] Personal plans * [X] Make an alcoholic beverage and name it \u201cresponsibly.\u201d Start drinking Responsibly. * [ ] Sneeze in front of the Pope. Get blessed. * [ ] Buy a horse, name it \u201cOscar Takes The Lead,\u201d enter it in horse races. Tables Substance Description Bombastium Rarest element in the world. Dropped into a barrel of water becomes one barrel of ice cream Jerktonium Ingestion of jerktonium causes a bad attitude, but the effects are curable by song. Philote The smallest possible particle, occupying no space at all. Formulas \\[ \\left(\\frac{\\left(\\sqrt{\\frac{73^2}{12x}}\\sqrt{\\frac{x|x|}{\\log_x}}\\right)}{\\sqrt[3]{\\frac xy}}\\right) \\] Diargams classDiagram Animal < |-- Duck Animal < |-- Fish Animal < |-- Zebra class Animal{ +int age +String gender +isMammal() +mate() } class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() }","title":"Showcase"},{"location":"mkdocs-magicspace/mkdocs/showcase/#code","text":"1 2 3 4 5 6 7 8 def insertion_sort ( nums ): for i in range ( 1 , len ( nums )): item_to_insert = nums [ i ] j = i - 1 while j >= 0 and nums [ j ] > item_to_insert : nums [ j + 1 ] = nums [ j ] j -= 1 nums [ j + 1 ] = item_to_insert","title":"Code"},{"location":"mkdocs-magicspace/mkdocs/showcase/#emoji","text":"","title":"Emoji"},{"location":"mkdocs-magicspace/mkdocs/showcase/#critic","text":"We Uber drivers never know whom we\u2019re going to end up with as a passenger in the same car . One day, I was driving over a new bridge, the design of which was very confusing ugly . Completely confounded, I muttered Actually I said it out loud , \u201cI\u2019d love to meet the genius retard who designed this mess.\u201d With that, my passenger extended his hand in my direction I thought he wanted to choke me and said, \u201cWell, today is your very lucky day. My name is Mike, I work for the county engineer\u2019s office, and I\u2019m the genius obviously an irony who designed this!\u201d. Surprisingly, he still gave me a tip of 2 dollars .","title":"Critic"},{"location":"mkdocs-magicspace/mkdocs/showcase/#keys","text":"Enter Tab Space Up Down Page Up Home Backspace Ins","title":"Keys"},{"location":"mkdocs-magicspace/mkdocs/showcase/#tabls-lists-admonitions","text":"Tasklist Output Plans at work Make vanilla pudding. Put in mayo jar. Eat in the office during the lunch break Wear shirt that says \u201cLife\u201d. Hand out lemons to colleagues. Hire two private investigators. Get them to follow each other. Personal plans Make an alcoholic beverage and name it \u201cresponsibly.\u201d Start drinking Responsibly. Sneeze in front of the Pope. Get blessed. Buy a horse, name it \u201cOscar Takes The Lead,\u201d enter it in horse races. Markdown - [X] Plans at work * [X] Make vanilla pudding. Put in mayo jar. Eat in the office during the lunch break * [X] Wear shirt that says \u201cLife\u201d. Hand out lemons to colleagues. * [ ] Hire two private investigators. Get them to follow each other. - [ ] Personal plans * [X] Make an alcoholic beverage and name it \u201cresponsibly.\u201d Start drinking Responsibly. * [ ] Sneeze in front of the Pope. Get blessed. * [ ] Buy a horse, name it \u201cOscar Takes The Lead,\u201d enter it in horse races.","title":"Tabls, lists &amp; admonitions"},{"location":"mkdocs-magicspace/mkdocs/showcase/#tables","text":"Substance Description Bombastium Rarest element in the world. Dropped into a barrel of water becomes one barrel of ice cream Jerktonium Ingestion of jerktonium causes a bad attitude, but the effects are curable by song. Philote The smallest possible particle, occupying no space at all.","title":"Tables"},{"location":"mkdocs-magicspace/mkdocs/showcase/#formulas","text":"\\[ \\left(\\frac{\\left(\\sqrt{\\frac{73^2}{12x}}\\sqrt{\\frac{x|x|}{\\log_x}}\\right)}{\\sqrt[3]{\\frac xy}}\\right) \\]","title":"Formulas"},{"location":"mkdocs-magicspace/mkdocs/showcase/#diargams","text":"classDiagram Animal < |-- Duck Animal < |-- Fish Animal < |-- Zebra class Animal{ +int age +String gender +isMammal() +mate() } class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() }","title":"Diargams"},{"location":"tutorials/appearance/","text":"Theme and colors You can customize how your documentation website looks, including fonts, colors and even complete themes. MkDocs themes MkDocs has many themes . The default boilerplate theme is Material for MkDocs . Let's change colors in the file mkdocs.yml . mkdocs.yml # =========================================================== # APPEARANCE # =========================================================== theme : name : 'material' favicon : 'assets/favicon.ico' logo : 'assets/Alnoda-logo.svg' custom_dir : overrides font : text : Lexend icon : repo : fontawesome/brands/github features : - search.suggest palette : - scheme : default toggle : icon : material/weather-sunny name : Switch to light mode primary : deep purple accent : deep orange - scheme : slate toggle : icon : material/weather-night name : Switch to dark mode primary : deep purple accent : lime Both primary and accent colors can be selected from this palette: (Click on any of these buttons to try primary color out!) red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-primary\") document.body.setAttribute(\"data-md-color-primary\", attr) var name = document.querySelector(\"#__code_2 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) }) Material MkDocs Material fo Mkdocs is beautiful and very customizable. Check its documentation Name and links Change the name of the documentation website, and link it to your Git repository mkdocs.yml # =========================================================== # CONFIGURATION # =========================================================== site_name : MkDocs MagicSpace repo_url : https://github.com/Alnoda/workspaces-in-docker/tree/main/workspaces/base-workspace site_url : https://alnoda.org edit_uri : \"\"","title":"Change appearance"},{"location":"tutorials/appearance/#theme-and-colors","text":"You can customize how your documentation website looks, including fonts, colors and even complete themes. MkDocs themes MkDocs has many themes . The default boilerplate theme is Material for MkDocs . Let's change colors in the file mkdocs.yml . mkdocs.yml # =========================================================== # APPEARANCE # =========================================================== theme : name : 'material' favicon : 'assets/favicon.ico' logo : 'assets/Alnoda-logo.svg' custom_dir : overrides font : text : Lexend icon : repo : fontawesome/brands/github features : - search.suggest palette : - scheme : default toggle : icon : material/weather-sunny name : Switch to light mode primary : deep purple accent : deep orange - scheme : slate toggle : icon : material/weather-night name : Switch to dark mode primary : deep purple accent : lime Both primary and accent colors can be selected from this palette: (Click on any of these buttons to try primary color out!) red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-primary\") document.body.setAttribute(\"data-md-color-primary\", attr) var name = document.querySelector(\"#__code_2 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) }) Material MkDocs Material fo Mkdocs is beautiful and very customizable. Check its documentation","title":"Theme and colors"},{"location":"tutorials/appearance/#name-and-links","text":"Change the name of the documentation website, and link it to your Git repository mkdocs.yml # =========================================================== # CONFIGURATION # =========================================================== site_name : MkDocs MagicSpace repo_url : https://github.com/Alnoda/workspaces-in-docker/tree/main/workspaces/base-workspace site_url : https://alnoda.org edit_uri : \"\"","title":"Name and links"},{"location":"tutorials/get-started/","text":"Getting started with MkDocs-MagicSpace is extremely easy. It already has everything needed: tools, packages and extensions for the Extended Markdown (and more advanced features), documentation and tutorials, and even a boilerplate. (Let's assume that you have started MkDocs-MagicSpace on your laptop or remote server. If not, read the Docs first) MkDocs MkDocs-MagicSpace is based on the popular open-source static site generator MkDocs . MkDocs project - is a folder in your MkDocs-MagicSpace workspace, which must have the following minnimal structure mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. When you cd into the MkDocs project folder, 2 commands to remember: mkdocs serve -a 0.0.0.0:<PORT> - Start the live-reloading docs server. mkdocs build -d <OUTPUT_PATH> - Build the documentation site. For the full documentation visit mkdocs.org . Create your Mkdocs project MkDocs-MagicSpace contains a boilerplate documentation project, which you can use to get started. It is the same project, that serves the workspace UI, the one you might use it to document the workspace itself. Simply copy it to the project folder, and customize it as you wish. Open MkDocs-MagicSpace terminal, and execute cp -r /home/docs /home/project/my-docs Great! You have started your own documentation project! Start the Mkdocs development server on any of the free ports in the port range you have provided for the workspace cd /home/project/my-docs; mkdocs serve -a 0.0.0.0:8030 Open your Browser on localhost:8030 Tricky ports If you have used the default port range to run the MkDocs-MagicSpace (8020-8035:8020-8035) then the internal port you use to run the mkdocs server ( mkdocs serve -a 0.0.0.0:8030 ) is the same as the external port - 8030. If you have used different port ranges, you will need to understand to which external port, the internal ports are mapped. Let's imagine we used different port range to start MkDocs-MagicSpace, for example, 9070-9085:8020-8035 . In this case, internal port 8030 will map to external port 9080. So when you start the mkdocs server (in the workspace terminal) on port 8030 (as in mkdocs serve -a 0.0.0.0:8030 ), then you need to open in your browser http://localhost:9080 Customize boilerplate The boilerplate you have copied to start your own project contains pages you might not need. You can modify them, or simply delete and create your own. When you work with Mkdocs, you create websites using Markdown . Mkdocs renders .md from the docs subfolder of the project, and you specify which .md files to show (and in which order) in the mkdocs.yml file in the root of the project folder. Let's delete all existing markdown files from the boilerplate folder. To do this you can use Filebrowser, Theia IDE, M.Commander, or just terminal. The easiest way - is to use filebrowser, which is well-suited to manipulate workspace filesystem, and to easily exchange files and folders between the outer environment and the workspace. Filebrowser provides the same user experience, no matter if the workspace is running on your laptop, or launched in the cloud server). It is convenient to use IDE for this too We need to remove references to these markdown files from the mkdocs.yml file too mkdocs.yml # =========================================================== # NAVIGATION # =========================================================== nav : - Home : pages/home/home.md - About : README.md - Get started : get-started.md - Showcase : showcase.md Let's create our own new markdown file in the same docs subfolder And add a reference to this markdown file in the mkdocs.yml file mkdocs.yml # =========================================================== # NAVIGATION # =========================================================== nav : - My Project : myproject.md Save Ctrl + S the files you have created and modified. Mkdocs server will reload automatically, and in couple of seconds you will see that new changes are applied.","title":"Get started"},{"location":"tutorials/get-started/#mkdocs","text":"MkDocs-MagicSpace is based on the popular open-source static site generator MkDocs . MkDocs project - is a folder in your MkDocs-MagicSpace workspace, which must have the following minnimal structure mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. When you cd into the MkDocs project folder, 2 commands to remember: mkdocs serve -a 0.0.0.0:<PORT> - Start the live-reloading docs server. mkdocs build -d <OUTPUT_PATH> - Build the documentation site. For the full documentation visit mkdocs.org .","title":"MkDocs"},{"location":"tutorials/get-started/#create-your-mkdocs-project","text":"MkDocs-MagicSpace contains a boilerplate documentation project, which you can use to get started. It is the same project, that serves the workspace UI, the one you might use it to document the workspace itself. Simply copy it to the project folder, and customize it as you wish. Open MkDocs-MagicSpace terminal, and execute cp -r /home/docs /home/project/my-docs Great! You have started your own documentation project! Start the Mkdocs development server on any of the free ports in the port range you have provided for the workspace cd /home/project/my-docs; mkdocs serve -a 0.0.0.0:8030 Open your Browser on localhost:8030 Tricky ports If you have used the default port range to run the MkDocs-MagicSpace (8020-8035:8020-8035) then the internal port you use to run the mkdocs server ( mkdocs serve -a 0.0.0.0:8030 ) is the same as the external port - 8030. If you have used different port ranges, you will need to understand to which external port, the internal ports are mapped. Let's imagine we used different port range to start MkDocs-MagicSpace, for example, 9070-9085:8020-8035 . In this case, internal port 8030 will map to external port 9080. So when you start the mkdocs server (in the workspace terminal) on port 8030 (as in mkdocs serve -a 0.0.0.0:8030 ), then you need to open in your browser http://localhost:9080","title":"Create your Mkdocs project"},{"location":"tutorials/get-started/#customize-boilerplate","text":"The boilerplate you have copied to start your own project contains pages you might not need. You can modify them, or simply delete and create your own. When you work with Mkdocs, you create websites using Markdown . Mkdocs renders .md from the docs subfolder of the project, and you specify which .md files to show (and in which order) in the mkdocs.yml file in the root of the project folder. Let's delete all existing markdown files from the boilerplate folder. To do this you can use Filebrowser, Theia IDE, M.Commander, or just terminal. The easiest way - is to use filebrowser, which is well-suited to manipulate workspace filesystem, and to easily exchange files and folders between the outer environment and the workspace. Filebrowser provides the same user experience, no matter if the workspace is running on your laptop, or launched in the cloud server). It is convenient to use IDE for this too We need to remove references to these markdown files from the mkdocs.yml file too mkdocs.yml # =========================================================== # NAVIGATION # =========================================================== nav : - Home : pages/home/home.md - About : README.md - Get started : get-started.md - Showcase : showcase.md Let's create our own new markdown file in the same docs subfolder And add a reference to this markdown file in the mkdocs.yml file mkdocs.yml # =========================================================== # NAVIGATION # =========================================================== nav : - My Project : myproject.md Save Ctrl + S the files you have created and modified. Mkdocs server will reload automatically, and in couple of seconds you will see that new changes are applied.","title":"Customize boilerplate"},{"location":"tutorials/extra-features/include/","text":"One of the very useful features of the MkDocs-MagicSpace - is its abilty to include .md files from many git repositories (public and private). This helps you to create easily a single unified documentation website, which includes doc files from the source-code repositories. Add another repository to the project Open terminal of the MkDocs-MagicSpace, and clone the repository to /home/project git clone https://github.com/bluxmit/alnoda-workspaces.git /home/project/alnoda-workspaces In the docs folder of your mkdocs project, create symlink to the cloned repo folder. Assuming your mkdocs project has path /home/project/my-docs ln -s /home/project/alnoda-workspaces /home/project/my-docs/docs/alnoda-workspaces Include Markdown files from another repository Now you can add .md files from the GitHub repo as if they were in your mkdocs project. Simply add entry to the mkdocs.yml to include any markdown file from the repository mkdocs.yml # =========================================================== # NAVIGATION # =========================================================== nav : - My Project : myproject.md - MagicSpace Readme : alnoda-workspaces/workspaces/mkdocs-magicspace/README.md Warning The path to the .md file that we include in the file mkdocs.yml is relative to the docs subfolder, which is in your Mkdocs project directory Voila! the Markdown file from another Git repository is included in your documentation website Include parts of the Markdown files Let's create a page in our doc website, and this page will include only part of the save README.md file from the previous section. First, create mew empty file part-of-the-file.md (in the docs subfolder of the Mkdocs project), and add reference to the mkdocs.yml mkdocs.yml # =========================================================== # NAVIGATION # =========================================================== nav : - My Project : myproject.md - MagicSpace Readme : alnoda-workspaces/workspaces/mkdocs-magicspace/README.md - Part of the file : part-of-the-file.md Open file part-of-the-file.md (in the workspace IDE) and add the following code snippet without ' in the '{%' (first line)! docs/part-of-the-file.md '{%' include-markdown \"alnoda-workspaces/workspaces/mkdocs-magicspace/README.md\" start=\"### Multiple workspaces\" end=\"### Open more ports\" %} This piece of code will include into the file docs/part-of-the-file.md from another Markdown file docs/alnoda-workspaces/workspaces/mkdocs-magicspace/README.md everything between headers Multiple workspaces and Open more ports","title":"Include docs from other repositories"},{"location":"tutorials/extra-features/include/#add-another-repository-to-the-project","text":"Open terminal of the MkDocs-MagicSpace, and clone the repository to /home/project git clone https://github.com/bluxmit/alnoda-workspaces.git /home/project/alnoda-workspaces In the docs folder of your mkdocs project, create symlink to the cloned repo folder. Assuming your mkdocs project has path /home/project/my-docs ln -s /home/project/alnoda-workspaces /home/project/my-docs/docs/alnoda-workspaces","title":"Add another repository to the project"},{"location":"tutorials/extra-features/include/#include-markdown-files-from-another-repository","text":"Now you can add .md files from the GitHub repo as if they were in your mkdocs project. Simply add entry to the mkdocs.yml to include any markdown file from the repository mkdocs.yml # =========================================================== # NAVIGATION # =========================================================== nav : - My Project : myproject.md - MagicSpace Readme : alnoda-workspaces/workspaces/mkdocs-magicspace/README.md Warning The path to the .md file that we include in the file mkdocs.yml is relative to the docs subfolder, which is in your Mkdocs project directory Voila! the Markdown file from another Git repository is included in your documentation website","title":"Include Markdown files from another repository"},{"location":"tutorials/extra-features/include/#include-parts-of-the-markdown-files","text":"Let's create a page in our doc website, and this page will include only part of the save README.md file from the previous section. First, create mew empty file part-of-the-file.md (in the docs subfolder of the Mkdocs project), and add reference to the mkdocs.yml mkdocs.yml # =========================================================== # NAVIGATION # =========================================================== nav : - My Project : myproject.md - MagicSpace Readme : alnoda-workspaces/workspaces/mkdocs-magicspace/README.md - Part of the file : part-of-the-file.md Open file part-of-the-file.md (in the workspace IDE) and add the following code snippet without ' in the '{%' (first line)! docs/part-of-the-file.md '{%' include-markdown \"alnoda-workspaces/workspaces/mkdocs-magicspace/README.md\" start=\"### Multiple workspaces\" end=\"### Open more ports\" %} This piece of code will include into the file docs/part-of-the-file.md from another Markdown file docs/alnoda-workspaces/workspaces/mkdocs-magicspace/README.md everything between headers Multiple workspaces and Open more ports","title":"Include parts of the Markdown files"},{"location":"tutorials/get-online/build/","text":"The first thing to do - is to build static documentation website from our project. Cd to the Mkdocs project folder, and execute mkdocs build -d /home/static-server/my-website Static HTML website was built, and you can use Static File Server (a tool that comes installed in the Mkdocs-MagicSpace) to view the ready documentation. Done! Your static documentation website is ready. You can deploy it on any service that allows to serve HTML websites. Info You don't really need Mkdocs-MagicSpace to serve a static HTML website. You can publish it on any web hosting service. Mkdocs-MagicSpace can also do that. In fact, Mkdocs-MagicSpace comes together with the server for static websites (Static File Server). In this tutorial we will explain how to do that.","title":"Build"},{"location":"tutorials/get-online/github-pages/","text":"One of the easiest ways to go online with your website - is to publish it to GitHub pages. You just need to build and push the ready static documentation website to GitHub. Info GitHub Pages is available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. Let's assume you git repository has a folder structure, where MkDocs project is in subfolder called mkdocs , i.e. mkdocs/ mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Let's now build website, with the output folder docs in the same repository root folder, as mkdos mkdocs build -d ../docs The resulting folder structure of your repository is docs/ index.html 404.html ... mkdocs/ mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Commit these changes, and push to GitHub. Open your GitHub repository page, and perform the following actions: Under your repository name, click Settings In the left sidebar, click Pages Select branch master , folder docs/ and click Save That's it! Your website is online","title":"Publish on GitHub Pages"},{"location":"tutorials/get-online/serve-workspace/","text":"MkDocs-Magicspace can be used to serve documentation website too. Get a server For the documentation website to be online all the time, you need to get a cloud server. There are lots of cloud providers where you can buy a server easily, for instance digitalocean.com , linode.com , vultr.com , etc. You can also use services of \"big clouds\" like AWS, Google Cloud, MS Azure, etc., but it is harder if you are not familiar with any of them. Serving static website requires little resources, even if scale out Mkdocs-MagicSpace, and run several workspaces to ensure higher concurrency and better performance for your users. Server with 2 (V)CPU and 4 GB RAM will be enough. It usually costs around 5$ per month. NOTE: The server should have public IP in order to be accessible in the Internet. Tip If possible, chose server option that aleady has docker installed. Many cloud services already provide them. Tip I recommend to choose Ubuntu as OS If the server does not come with docker, we need to install it. Install docker on Ubuntu 18 , and install docker-compose Domain name In order to publish your documentation website you need to get a domain name. There are a lot of services where you can do that, for example name.com , namecheap.com etc. After you buy a domain name, find in the website of your domain provider how to add \"A-record\" that will point to the IP of your server. This is how it looks on name.com Create docker image from workspace Commiting workspace - is creating a new docker image from your workspace with all the work and changes you've done in this workspace. After image is created, you will be able to create many copies of your workspace from this image. You can also create different versions of your workspace by committing at different moments of time. In oder to commit image open terminal on the server, laptop or PC where worrkspace is running. Assuming the name of your workspace is space-1 , execute docker commit space-1 ready-website:0.1 where 0.1 is a version. This image can already be used to deploy and serve static website. But it is not optimal: we only need static server to run and serve the website, and workspace starts many applications, including IDE, Cronicle, Filebrowser and other. We will delete those applications in the final image. Create Dockerfile FROM ready-website:0.1 USER root RUN rm -rf /home/project RUN rm -rf /opt/cronicle RUN rm -rf /opt/filebrowser RUN rm -rf /opt/theia RUN rm -rf /opt/ungit RUN apt-get remove -y docker docker-engine docker.io containerd runc nano mc git gitflow ncdu USER abc And make new more optimized image docker build -t ready-website:0.2 . Deploy In order to deploy documentation website with Mkdocs-MagicSpace you will need to perform only the following 2 steps: Get workspace image on the cloud server Launch workspace in production Get workspace image on the cloud server Unless you are already developing in the remote workspace on the same server you want to deploy your documentation website, you will need to get the image of this workspace on the remote server. The best way - is to use private docker registry, that you can buy from many docker registry providers and cloud services (you can buy it even on hub.docker.com itself) Warning It is not recommended to use free public docker registry, because it is public , and anyone can pull and open your workspace. I've got a private registry on docker hub, called alnoda/ready-website, and pushing image to the registry is as easy as docker tag ready-website:0.1 alnoda/ready-website:0.2 docker push alnoda/ready-website:0.2 On the colud server I simply login to the docker registry, and execute docker pull alnoda/ready-website:0.2 Easy! Now workspace image with the documentation website is on the cloud server ready to be deployed. Launch workspace in production We use Traefik to take care of TLS certificates and HTTPS. That is the reason why we start workspace in production together with Traefic service using docker-compose. Tip Configuring load balancer/reverse proxy is not an extremely easy task, that's why Mkdocs-MagicSpace comes with a small utility that will do it for you. In order to generate a production-ready docker-compose.yml file, open terminal in the running Mkdocs-MagicSpace, and execute python /home/abc/utils/staticserver.py --image=\"alnoda/ready-website:0.1\" --domain=\"<YOUR DOMAIN>\" --email=\"<YOUR EMAIL>\" --homepage=\"my-website/\" NOTE: argument --homepage=\"my-website/\" is a path to the website in the Static File Server You see that a file docker-compose.yml is generated. Copy this file to the cloud server, and execute docker-compose up -d You are live! Open your browser, and navigate to your domain.","title":"Serve Workspace"},{"location":"tutorials/get-online/serve-workspace/#get-a-server","text":"For the documentation website to be online all the time, you need to get a cloud server. There are lots of cloud providers where you can buy a server easily, for instance digitalocean.com , linode.com , vultr.com , etc. You can also use services of \"big clouds\" like AWS, Google Cloud, MS Azure, etc., but it is harder if you are not familiar with any of them. Serving static website requires little resources, even if scale out Mkdocs-MagicSpace, and run several workspaces to ensure higher concurrency and better performance for your users. Server with 2 (V)CPU and 4 GB RAM will be enough. It usually costs around 5$ per month. NOTE: The server should have public IP in order to be accessible in the Internet. Tip If possible, chose server option that aleady has docker installed. Many cloud services already provide them. Tip I recommend to choose Ubuntu as OS If the server does not come with docker, we need to install it. Install docker on Ubuntu 18 , and install docker-compose","title":"Get a server"},{"location":"tutorials/get-online/serve-workspace/#domain-name","text":"In order to publish your documentation website you need to get a domain name. There are a lot of services where you can do that, for example name.com , namecheap.com etc. After you buy a domain name, find in the website of your domain provider how to add \"A-record\" that will point to the IP of your server. This is how it looks on name.com","title":"Domain name"},{"location":"tutorials/get-online/serve-workspace/#create-docker-image-from-workspace","text":"Commiting workspace - is creating a new docker image from your workspace with all the work and changes you've done in this workspace. After image is created, you will be able to create many copies of your workspace from this image. You can also create different versions of your workspace by committing at different moments of time. In oder to commit image open terminal on the server, laptop or PC where worrkspace is running. Assuming the name of your workspace is space-1 , execute docker commit space-1 ready-website:0.1 where 0.1 is a version. This image can already be used to deploy and serve static website. But it is not optimal: we only need static server to run and serve the website, and workspace starts many applications, including IDE, Cronicle, Filebrowser and other. We will delete those applications in the final image. Create Dockerfile FROM ready-website:0.1 USER root RUN rm -rf /home/project RUN rm -rf /opt/cronicle RUN rm -rf /opt/filebrowser RUN rm -rf /opt/theia RUN rm -rf /opt/ungit RUN apt-get remove -y docker docker-engine docker.io containerd runc nano mc git gitflow ncdu USER abc And make new more optimized image docker build -t ready-website:0.2 .","title":"Create docker image from workspace"},{"location":"tutorials/get-online/serve-workspace/#deploy","text":"In order to deploy documentation website with Mkdocs-MagicSpace you will need to perform only the following 2 steps: Get workspace image on the cloud server Launch workspace in production","title":"Deploy"},{"location":"tutorials/get-online/serve-workspace/#get-workspace-image-on-the-cloud-server","text":"Unless you are already developing in the remote workspace on the same server you want to deploy your documentation website, you will need to get the image of this workspace on the remote server. The best way - is to use private docker registry, that you can buy from many docker registry providers and cloud services (you can buy it even on hub.docker.com itself) Warning It is not recommended to use free public docker registry, because it is public , and anyone can pull and open your workspace. I've got a private registry on docker hub, called alnoda/ready-website, and pushing image to the registry is as easy as docker tag ready-website:0.1 alnoda/ready-website:0.2 docker push alnoda/ready-website:0.2 On the colud server I simply login to the docker registry, and execute docker pull alnoda/ready-website:0.2 Easy! Now workspace image with the documentation website is on the cloud server ready to be deployed.","title":"Get workspace image on the cloud server"},{"location":"tutorials/get-online/serve-workspace/#launch-workspace-in-production","text":"We use Traefik to take care of TLS certificates and HTTPS. That is the reason why we start workspace in production together with Traefic service using docker-compose. Tip Configuring load balancer/reverse proxy is not an extremely easy task, that's why Mkdocs-MagicSpace comes with a small utility that will do it for you. In order to generate a production-ready docker-compose.yml file, open terminal in the running Mkdocs-MagicSpace, and execute python /home/abc/utils/staticserver.py --image=\"alnoda/ready-website:0.1\" --domain=\"<YOUR DOMAIN>\" --email=\"<YOUR EMAIL>\" --homepage=\"my-website/\" NOTE: argument --homepage=\"my-website/\" is a path to the website in the Static File Server You see that a file docker-compose.yml is generated. Copy this file to the cloud server, and execute docker-compose up -d You are live! Open your browser, and navigate to your domain.","title":"Launch workspace in production"},{"location":"tutorials/markdown/add-the-code/","text":"In order to create a code block, wrap the code with three backtics ``` Code block Output if x == 1: print(\"x is 1.\") Markdown ``` if x == 1: print(\"x is 1.\") ``` In order to highlite code add name of the language, i.e. ```python Code highliting Output if x == 1 : print ( \"x is 1.\" ) Markdown ```python if x == 1: print(\"x is 1.\") ``` In order to add line numbers add *linenums=\"1\"* Code block with numbers Output 1 2 3 4 5 6 7 8 def insertion_sort ( nums ): for i in range ( 1 , len ( nums )): item_to_insert = nums [ i ] j = i - 1 while j >= 0 and nums [ j ] > item_to_insert : nums [ j + 1 ] = nums [ j ] j -= 1 nums [ j + 1 ] = item_to_insert Markdown ```python linenums=\"1\" def insertion_sort(nums): for i in range(1, len(nums)): item_to_insert = nums[i] j = i - 1 while j >= 0 and nums[j] > item_to_insert: nums[j + 1] = nums[j] j -= 1 nums[j + 1] = item_to_insert ``` You can also mark specific code lines or ranges Mark code lines Output 1 2 3 4 5 6 7 8 def insertion_sort ( nums ): for i in range ( 1 , len ( nums )): item_to_insert = nums [ i ] j = i - 1 while j >= 0 and nums [ j ] > item_to_insert : nums [ j + 1 ] = nums [ j ] j -= 1 nums [ j + 1 ] = item_to_insert Markdown ```{.py3 linenums=\"1\" hl_lines=\"1 5-7\"} def insertion_sort(nums): for i in range(1, len(nums)): item_to_insert = nums[i] j = i - 1 while j >= 0 and nums[j] > item_to_insert: nums[j + 1] = nums[j] j -= 1 nums[j + 1] = item_to_insert ``` Code can be highlited inside the text using the following syntaxis: `#!py3 import pymdownx; pymdownx.__version__` For example: Inline code highliting Output In many languages \"hello world!\" application is just one-liner. For example in OCaml it is print_endline \"Hello, world!\" ;; in Ruby it is puts 'Hello World!' in Python it is print ( \"Hello World)\" and in javascript it is console . log ( \"Hello, World!\" ); Markdown In many languages \"hello world!\" application is just one-liner. For example in OCaml it is `#!ocaml print_endline \"Hello, world!\";;` in Ruby it is `#!ruby puts 'Hello World!'` in Python it is `#!py3 print(\"Hello World)\"` and in javascript it is `#!js console.log(\"Hello, World!\");` Tabs are in particular very useful to group code blocks or display alternative code in different languages. For example if-else statement in different languages: Language comparison Output Python 1 2 3 4 5 6 7 amount = 0 if amount < 0 : print ( 'Negative amount' ) elif amount > 0 : print ( 'Positive amount' ) else : print ( 'Zero' ) Java 1 2 3 4 5 6 7 8 int amount = 0 ; if ( amount < 0 ) { System . out . println ( \"Negative amount\" ); } else if ( amount > 0 ) { System . out . println ( \"Positive amount\" ); } else { System . out . println ( \"Zero\" ); } Ruby 1 2 3 4 5 6 7 amount = 0 if amount < 0 puts \"Negative amount\" elsif amount > 0 puts \"Positive amount\" else puts \"Zero\" Markdown === \"Python\" ``` python linenums=\"1\" amount = 0 if amount < 0: print('Negative amount') elif amount > 0: print('Positive amount') else: print('Zero') ``` === \"Java\" ``` java linenums=\"1\" int amount = 0; if (amount < 0) { System.out.println(\"Negative amount\"); } else if (amount > 0) { System.out.println(\"Positive amount\"); } else { System.out.println(\"Zero\"); } ``` === \"Ruby\" ``` ruby linenums=\"1\" amount = 0 if amount < 0 puts \"Negative amount\" elsif amount > 0 puts \"Positive amount\" else puts \"Zero\" ```","title":"Add the code"},{"location":"tutorials/markdown/basics/","text":"Header Start section / sub-section of your document with a header # This is the largest header ## This is a smaller header ###### This is a very small header Paragraph To create a line break, end a line with two or more spaces, and then type return. To create paragraphs, use a blank line to separate one or more lines of text. Paragraphs Output Q: What is the chemical formula for \"coffee\"? A: CoFe2 Q: What is the chemical formula for \"banana\"? A: BaNa2 Markdown Q: What is the chemical formula for \"coffee\"? A: CoFe2 Q: What is the chemical formula for \"banana\"? A: BaNa2 Emphasize text You can add emphasis by making text bold, italic, strikethrough or combine them alltogether. Text emphasis Output This is bold text This is italic text This is bold italic text this is strikethrough This is strikethrough bold italic text Markdown **This is bold text** *This is italic text* ***This is bold italic text*** ~~this is strikethrough~~ ~~***This is strikethrough bold italic text***~~ Markdown is designed to create readable documents, and features that hurt readability do not have standard Markdown syntaxis. For example, font size or text color. Despite this is not a standard Markdown feature, it is not hard to change the fonts and colors. Read how it can be done in the next section - Hack the Markdown Rules To create a horizontal rule, use three or more asterisks *** , dashes --- , or underscores ___ on a line by themselves. Rules Output Einstein dreaded Christmas. The whole family would come round, and he'd spend the entire day trying to work out a new theory of relativity. A physics professor always made his class sit on the edge of a cliff while they studied. He said that was where they had most potential. Physics lesson: When a body is submerged in water, the phone rings. Markdown Einstein dreaded Christmas. The whole family would come round, and he'd spend the entire day trying to work out a new theory of relativity. ------- A physics professor always made his class sit on the edge of a cliff while they studied. He said that was where they had most potential. ------- Physics lesson: When a body is submerged in water, the phone rings. Links To quickly turn a URL or email address into a link, enclose it in angle brackets. Links Output https://alnoda.org alnoda@alnoda.com Markdown <https://www.alnoda.org> <alnoda@alnoda.com> Addinng the whole URL of the webpage you want to link looks chunky and not recommended. Instead create text links Links with titles Output Recommended markdown references: Getting started with markdown The Markdown Guide Markdown Recommended markdown references: - [Getting started with markdown](https://programminghistorian.org/en/lessons/getting-started-with-markdown) - [The Markdown Guide](https://www.markdownguide.org/) You can easily link Markdown documents with each other using relative paths. If the doc you want to link is in the same folder, just use its name Links betweenn markdown documents Output Recommended markdown references: Hack the Markdown Improve readability with tabs, lists and footnotes Markdown Recommended markdown references: - [Hack the Markdown](hack-markdown.md) - [Improve readability with tabs, lists and footnotes](improve-readability.md) And you can make links to the sections of the same markdown file, or any other markdown file Links betweenn markdown documents Output Link a paragraph in this doc Emphasize text Link to a paragraph in the other doc Sequence diagram Markdown Link a paragraph in this doc [Emphasize text](#emphasize-text) Link to a paragraph in the other doc [Sequence diagram](diagrams.md#sequence-diagram)","title":"Start with the basics"},{"location":"tutorials/markdown/basics/#header","text":"Start section / sub-section of your document with a header # This is the largest header ## This is a smaller header ###### This is a very small header","title":"Header"},{"location":"tutorials/markdown/basics/#paragraph","text":"To create a line break, end a line with two or more spaces, and then type return. To create paragraphs, use a blank line to separate one or more lines of text. Paragraphs Output Q: What is the chemical formula for \"coffee\"? A: CoFe2 Q: What is the chemical formula for \"banana\"? A: BaNa2 Markdown Q: What is the chemical formula for \"coffee\"? A: CoFe2 Q: What is the chemical formula for \"banana\"? A: BaNa2","title":"Paragraph"},{"location":"tutorials/markdown/basics/#emphasize-text","text":"You can add emphasis by making text bold, italic, strikethrough or combine them alltogether. Text emphasis Output This is bold text This is italic text This is bold italic text this is strikethrough This is strikethrough bold italic text Markdown **This is bold text** *This is italic text* ***This is bold italic text*** ~~this is strikethrough~~ ~~***This is strikethrough bold italic text***~~ Markdown is designed to create readable documents, and features that hurt readability do not have standard Markdown syntaxis. For example, font size or text color. Despite this is not a standard Markdown feature, it is not hard to change the fonts and colors. Read how it can be done in the next section - Hack the Markdown","title":"Emphasize text"},{"location":"tutorials/markdown/basics/#rules","text":"To create a horizontal rule, use three or more asterisks *** , dashes --- , or underscores ___ on a line by themselves. Rules Output Einstein dreaded Christmas. The whole family would come round, and he'd spend the entire day trying to work out a new theory of relativity. A physics professor always made his class sit on the edge of a cliff while they studied. He said that was where they had most potential. Physics lesson: When a body is submerged in water, the phone rings. Markdown Einstein dreaded Christmas. The whole family would come round, and he'd spend the entire day trying to work out a new theory of relativity. ------- A physics professor always made his class sit on the edge of a cliff while they studied. He said that was where they had most potential. ------- Physics lesson: When a body is submerged in water, the phone rings.","title":"Rules"},{"location":"tutorials/markdown/basics/#links","text":"To quickly turn a URL or email address into a link, enclose it in angle brackets. Links Output https://alnoda.org alnoda@alnoda.com Markdown <https://www.alnoda.org> <alnoda@alnoda.com> Addinng the whole URL of the webpage you want to link looks chunky and not recommended. Instead create text links Links with titles Output Recommended markdown references: Getting started with markdown The Markdown Guide Markdown Recommended markdown references: - [Getting started with markdown](https://programminghistorian.org/en/lessons/getting-started-with-markdown) - [The Markdown Guide](https://www.markdownguide.org/) You can easily link Markdown documents with each other using relative paths. If the doc you want to link is in the same folder, just use its name Links betweenn markdown documents Output Recommended markdown references: Hack the Markdown Improve readability with tabs, lists and footnotes Markdown Recommended markdown references: - [Hack the Markdown](hack-markdown.md) - [Improve readability with tabs, lists and footnotes](improve-readability.md) And you can make links to the sections of the same markdown file, or any other markdown file Links betweenn markdown documents Output Link a paragraph in this doc Emphasize text Link to a paragraph in the other doc Sequence diagram Markdown Link a paragraph in this doc [Emphasize text](#emphasize-text) Link to a paragraph in the other doc [Sequence diagram](diagrams.md#sequence-diagram)","title":"Links"},{"location":"tutorials/markdown/classy-markdown/","text":"Emoji and Icons Make your docs look classy and fun to read by using beautiful icons and emoji. There are thousands of them, and you will always find what you need. Yo can include emoji in your markdown text using special words. For example, simply adding :smile: right to the markdown text, will make this smily face show up There are lots of emoji (thousand) available out of the box Examples of Emoji Output The full list of short emoji names Markdown :smile: :heart: :thumbsup: :100: :muscle: :accept: :point_up: :airplane: :champagne: :raised_hands: :boom: :laughing: :metal: :handshake: :older_man: :sheep: :no_entry: :mouse: :relieved: :question: :wink: :wave: :rainbow: :sleeping: :point_right: [The full list of short emoji names](https://github.com/facelessuser/pymdown-extensions/blob/main/pymdownx/emoji1_db.py) Same as with emoji, you can include fancy icons in your markdown documents. You can use icons from the following icon sets: - Font Awesome - Material Design Icons - Octicons Getting icon from Font Awesome Open Font Awesome icon explorer web page Chose only free icons to show, select one of the categories: regular , solid , light , thin , brands Pick up any icon from the selected category - each of them has name, for example icon video from the category solid Combine words fontawesome , solid and video to create the short icon name: :fontawesome - solid - video: Add this name to the markdown text, and the icon is showing up Getting icon from Material Design Open Material Design Icons explorer Find an icon, for example chat-alert-outline Combine words material and chat-alert-outline to create the short icon name: :material - chat-alert-outline: Add this name to the markdown text, and the icon is showing up Getting icon from Octicons Open Octicons explorer Find an icon, for example cpu Chose the size: 24px or 16px Combine words octicons , cpu and 24 to create the short icon name: :octicons - cpu - 24: Add this name to the markdown text, and the icon is showing up Examples of icons Output Markdown :fontawesome-brands-medium: :fontawesome-brands-facebook: :fontawesome-solid-book-open: :fontawesome-regular-snowflake: :material-google-maps: :material-guy-fawkes-mask: :fontawesome-brands-youtube-square: :material-check-circle: :material-arrow-right: :fontawesome-solid-user: :fontawesome-solid-paper-plane: :fontawesome-solid-ship: :fontawesome-brands-firefox:{style=\"color: orange; font-size: 40px;\"} Smart symbols There are several symbols that be will automatically beautified without any additional actions Markdown Result (tm) \u2122 (c) \u00a9 (r) \u00ae c/o \u2105 +/- \u00b1 --> \u2192 <-- \u2190 <--> \u2194 =/= \u2260 1/4, etc. \u00bc, etc. 1st 2nd etc. 1 st 2 nd etc. Find any icon or emoji easily! Abbreviations FYI abbreviations that are familiar to you might confuse other people. Make it simpler for everyone Abbreviation Output The dumbest message I've ever recieved: \"OK IDK FWIW IMHO RTFM ROTFLMAO JK ILY TTFN \" Markdown The dumbest message I've ever recieved: \"OK IDK FWIW IMHO RTFM ROTFLMAO JK ILY TTFN\" *[IDK]: I don't know *[FWIW]: for what it's worth *[IMHO]: in my humble opinion *[RTFM]: read the manual *[ROTFLMAO]: Rolling on the floor laughing *[JK]: Just kidding *[ILY]: I love you *[TTFN]: Ta ta for now Superscipt & Subscript Wrap text around both sides with ^ to make it look like a superscript Superscript Output Sin 2 + Cos 2 = 1 2 e $ 80 Googol = 10 100 Markdown Sin^2^ + Cos^2^ = 1 2^e^ ^$^80 Googol = 10^100^ Wrap text around both sides with ~ to make it look like a subscript Subscript Output C hex = 12 dec = 14 oct C 2 H 5 0H 67 / 68 Markdown C~hex~ = 12~dec~ = 14~oct~ C~2~H~5~0H ^67^/~68~ Critic to insert text use {++insert text++} to remove text use {--remove text--} to substitute this with this use {~~substitute this~>with this~~} to highlight text use {==highlight text==} to highlight text with a comment use {==highlight text==}{>>with a comment<<} Critic Output We Uber drivers never know whom we\u2019re going to end up with as a passenger in the same car . One day, I was driving over a new bridge, the design of which was very confusing ugly . Completely confounded, I muttered Actually I said it out loud , \u201cI\u2019d love to meet the genius retard who designed this mess.\u201d With that, my passenger extended his hand in my direction I thought he wanted to choke me and said, \u201cWell, today is your very lucky day. My name is Mike, I work for the county engineer\u2019s office, and I\u2019m the genius obviously an irony who designed this!\u201d. Surprisingly, he still gave me a tip of 2 dollars . Markdown We Uber drivers never know whom we\u2019re going to end up with as a passenger {--in the same car--}. One day, I was driving over a new bridge, the design of which was very {~~confusing~>ugly~~}. Completely confounded, {==I muttered==}{>>Actually I said it out loud<<}, \u201cI\u2019d love to meet the {~~genius~>retard~~} who designed this mess.\u201d With that, my passenger {==extended his hand in my direction==}{>>I thought he wanted to choke me<<} and said, \u201cWell, today is your {--*very*--} lucky day. My name is Mike, I work for the county engineer\u2019s office, and I\u2019m the {==genius==}{>>obviously an irony<<} who designed this!\u201d. Surprisingly, he still gave me a tip {++**of 2 dollars**++}. Keys You can create beautiful styles for keyboard keys and key combinations just like this: ++ctrl++ yields Ctrl Beautiful Keys Output Enter Tab Space Up Down Page Up Home Backspace Ins Alt Right Alt Left Command Right Ctrl Fn Shift Left Shift | \\ | ; ~ _ { } [ ] \" ' ! , = < > - 1 F9 Q Num 0 Num 1 Num Lock Ctrl + Alt + Del Markdown ++enter++ ++tab++ ++space++ ++arrow-up++ ++arrow-down++ ++page-up++ ++home++ ++backspace++ ++insert++ ++alt++ ++right-alt++ ++left-command++ ++right-control++ ++fn++ ++shift++ ++left-shift++ ++pipe++ ++backslash++ ++bar++ ++semicolon++ ++tilde++ ++underscore++ ++brace-left++ ++brace-right++ ++bracket-left++ ++bracket-right++ ++double-quote++ ++single-quote++ ++exclam++ ++comma++ ++equal++ ++less++ ++greater++ ++minus++ ++1++ ++f9++ ++q++ ++num0++ ++num1++ ++num-lock++ ++ctrl+alt+delete++ The complete list of keys","title":"Make it classy with emoji, icons and more"},{"location":"tutorials/markdown/classy-markdown/#emoji-and-icons","text":"Make your docs look classy and fun to read by using beautiful icons and emoji. There are thousands of them, and you will always find what you need. Yo can include emoji in your markdown text using special words. For example, simply adding :smile: right to the markdown text, will make this smily face show up There are lots of emoji (thousand) available out of the box Examples of Emoji Output The full list of short emoji names Markdown :smile: :heart: :thumbsup: :100: :muscle: :accept: :point_up: :airplane: :champagne: :raised_hands: :boom: :laughing: :metal: :handshake: :older_man: :sheep: :no_entry: :mouse: :relieved: :question: :wink: :wave: :rainbow: :sleeping: :point_right: [The full list of short emoji names](https://github.com/facelessuser/pymdown-extensions/blob/main/pymdownx/emoji1_db.py) Same as with emoji, you can include fancy icons in your markdown documents. You can use icons from the following icon sets: - Font Awesome - Material Design Icons - Octicons Getting icon from Font Awesome Open Font Awesome icon explorer web page Chose only free icons to show, select one of the categories: regular , solid , light , thin , brands Pick up any icon from the selected category - each of them has name, for example icon video from the category solid Combine words fontawesome , solid and video to create the short icon name: :fontawesome - solid - video: Add this name to the markdown text, and the icon is showing up Getting icon from Material Design Open Material Design Icons explorer Find an icon, for example chat-alert-outline Combine words material and chat-alert-outline to create the short icon name: :material - chat-alert-outline: Add this name to the markdown text, and the icon is showing up Getting icon from Octicons Open Octicons explorer Find an icon, for example cpu Chose the size: 24px or 16px Combine words octicons , cpu and 24 to create the short icon name: :octicons - cpu - 24: Add this name to the markdown text, and the icon is showing up Examples of icons Output Markdown :fontawesome-brands-medium: :fontawesome-brands-facebook: :fontawesome-solid-book-open: :fontawesome-regular-snowflake: :material-google-maps: :material-guy-fawkes-mask: :fontawesome-brands-youtube-square: :material-check-circle: :material-arrow-right: :fontawesome-solid-user: :fontawesome-solid-paper-plane: :fontawesome-solid-ship: :fontawesome-brands-firefox:{style=\"color: orange; font-size: 40px;\"} Smart symbols There are several symbols that be will automatically beautified without any additional actions Markdown Result (tm) \u2122 (c) \u00a9 (r) \u00ae c/o \u2105 +/- \u00b1 --> \u2192 <-- \u2190 <--> \u2194 =/= \u2260 1/4, etc. \u00bc, etc. 1st 2nd etc. 1 st 2 nd etc. Find any icon or emoji easily!","title":"Emoji and Icons"},{"location":"tutorials/markdown/classy-markdown/#abbreviations","text":"FYI abbreviations that are familiar to you might confuse other people. Make it simpler for everyone Abbreviation Output The dumbest message I've ever recieved: \"OK IDK FWIW IMHO RTFM ROTFLMAO JK ILY TTFN \" Markdown The dumbest message I've ever recieved: \"OK IDK FWIW IMHO RTFM ROTFLMAO JK ILY TTFN\" *[IDK]: I don't know *[FWIW]: for what it's worth *[IMHO]: in my humble opinion *[RTFM]: read the manual *[ROTFLMAO]: Rolling on the floor laughing *[JK]: Just kidding *[ILY]: I love you *[TTFN]: Ta ta for now","title":"Abbreviations"},{"location":"tutorials/markdown/classy-markdown/#superscipt-subscript","text":"Wrap text around both sides with ^ to make it look like a superscript Superscript Output Sin 2 + Cos 2 = 1 2 e $ 80 Googol = 10 100 Markdown Sin^2^ + Cos^2^ = 1 2^e^ ^$^80 Googol = 10^100^ Wrap text around both sides with ~ to make it look like a subscript Subscript Output C hex = 12 dec = 14 oct C 2 H 5 0H 67 / 68 Markdown C~hex~ = 12~dec~ = 14~oct~ C~2~H~5~0H ^67^/~68~","title":"Superscipt &amp; Subscript"},{"location":"tutorials/markdown/classy-markdown/#critic","text":"to insert text use {++insert text++} to remove text use {--remove text--} to substitute this with this use {~~substitute this~>with this~~} to highlight text use {==highlight text==} to highlight text with a comment use {==highlight text==}{>>with a comment<<} Critic Output We Uber drivers never know whom we\u2019re going to end up with as a passenger in the same car . One day, I was driving over a new bridge, the design of which was very confusing ugly . Completely confounded, I muttered Actually I said it out loud , \u201cI\u2019d love to meet the genius retard who designed this mess.\u201d With that, my passenger extended his hand in my direction I thought he wanted to choke me and said, \u201cWell, today is your very lucky day. My name is Mike, I work for the county engineer\u2019s office, and I\u2019m the genius obviously an irony who designed this!\u201d. Surprisingly, he still gave me a tip of 2 dollars . Markdown We Uber drivers never know whom we\u2019re going to end up with as a passenger {--in the same car--}. One day, I was driving over a new bridge, the design of which was very {~~confusing~>ugly~~}. Completely confounded, {==I muttered==}{>>Actually I said it out loud<<}, \u201cI\u2019d love to meet the {~~genius~>retard~~} who designed this mess.\u201d With that, my passenger {==extended his hand in my direction==}{>>I thought he wanted to choke me<<} and said, \u201cWell, today is your {--*very*--} lucky day. My name is Mike, I work for the county engineer\u2019s office, and I\u2019m the {==genius==}{>>obviously an irony<<} who designed this!\u201d. Surprisingly, he still gave me a tip {++**of 2 dollars**++}.","title":"Critic"},{"location":"tutorials/markdown/classy-markdown/#keys","text":"You can create beautiful styles for keyboard keys and key combinations just like this: ++ctrl++ yields Ctrl Beautiful Keys Output Enter Tab Space Up Down Page Up Home Backspace Ins Alt Right Alt Left Command Right Ctrl Fn Shift Left Shift | \\ | ; ~ _ { } [ ] \" ' ! , = < > - 1 F9 Q Num 0 Num 1 Num Lock Ctrl + Alt + Del Markdown ++enter++ ++tab++ ++space++ ++arrow-up++ ++arrow-down++ ++page-up++ ++home++ ++backspace++ ++insert++ ++alt++ ++right-alt++ ++left-command++ ++right-control++ ++fn++ ++shift++ ++left-shift++ ++pipe++ ++backslash++ ++bar++ ++semicolon++ ++tilde++ ++underscore++ ++brace-left++ ++brace-right++ ++bracket-left++ ++bracket-right++ ++double-quote++ ++single-quote++ ++exclam++ ++comma++ ++equal++ ++less++ ++greater++ ++minus++ ++1++ ++f9++ ++q++ ++num0++ ++num1++ ++num-lock++ ++ctrl+alt+delete++ The complete list of keys","title":"Keys"},{"location":"tutorials/markdown/diagrams/","text":"Mermaid allows using text syntaxis to create diagrams. Thus Mermaid diagrams can be part of Markdown documentation and have all the benefits of version control or can even be auto-generated using jinja2 templates. Warning In this tutorial we provide introduction to basic features of Mermaid, but they alrteady allow you to do a lot! Check out complete Mermaid docs to learn the full power. Pie chart Very simple, just specify title and all entries with absolute Values State Diagram Output pie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 Markdown ```mermaid pie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 ``` Flow chart All Flowcharts are composed of nodes, the geometric shapes and edges, the arrows or lines. The code defines the way how these nodes and edges are made and connected. Nodes always have id, which is used to create links, and optionally nodes can have text inside. There is a selection of node shapes. Links can have text and be of different type. Graph should have direction: LR (left-right) or TD (top-down). Flow chart example Output graph TD A[Start] --> B{Is it?}; B -->|Yes| C[OK]; C --> D[Rethink]; D --> B; B ---->|No| E[End]; Markdown ```mermaid graph TD A[Start] --> B{Is it?}; B -->|Yes| C[OK]; C --> D[Rethink]; D --> B; B ---->|No| E[End]; ``` Nodes shapes Output graph LR A1 --> A2[text in the box] --> B2[text in the box] A3(rounded edges box) --> B3([round box]) --> C3((Circle)) A4[[double wall]] --> B4[(Database)] --> C4>Flag] A6{Diamond} --> B6[/Prism\\] --> C6[\\Reverse Prism/] Markdown ```mermaid graph LR A1 --> A2[text in the box] --> B2[text in the box] A3(rounded border box) --> B3([rounded box]) --> C3((Circle)) A4[[double wall]] --> B4[(Database)] --> C4>Flag] A6{Diamond} --> B6[/Prism\\] --> C6[\\Reverse Prism/] ``` Nodes links Output graph LR A --> B --- C --text!--- D E --text--> F -.-> G -.text.-> H I ==> J ==text==> K L --o M --x N O o--o P < --> Q x--x R Markdown Sequence diagram Sequence diagram is used to demonstrate interactions between actors - elements of some system. It is perfect to show how processes operate with one another and in what order. This diagram is a list of communications in the form [Actor][Arrow][Actor]:Message text Types of arrows Type Description -> Solid line without arrow \u2192 Dotted line without arrow ->> Solid line with arrowhead \u2192> Dotted line with arrowhead -x Solid line with a cross at the end --x Dotted line with a cross at the end. -) Solid line with an open arrow at the end (async) --) Dotted line with a open arrow at the end (async) Example Output sequenceDiagram Producer ->> Queue: Message sent activate Queue Queue -->> Producer: Message acknowledged deactivate Queue Consumer ->> Queue: Get messages after offset 0 activate Queue Queue --> Consumer: Message provided deactivate Queue activate Consumer Note over Consumer: Processing Message Consumer -->> Queue: change offset to 1 deactivate Consumer loop Every 2 seconds Consumer --x Service Monitor: Send heartbeat end Note over Consumer,Service Monitor: restarted if no heartbeat Markdown ```mermaid sequenceDiagram Producer ->> Queue: Message sent activate Queue Queue -->> Producer: Message acknowledged deactivate Queue Consumer ->> Queue: Get messages after offset 0 activate Queue Queue --> Consumer: Message provided deactivate Queue activate Consumer Note over Consumer: Processing Message Consumer -->> Queue: change offset to 1 deactivate Consumer loop Every 2 seconds Consumer --x Service Monitor: Send heartbeat end Note over Consumer,Service Monitor: restarted if no heartbeat ``` Class diagram Class diagram in the Unified Modeling Language (UML) describes the structure of a system by showing the system's classes, their attributes, operations (or methods), and the relationships between the objects. Class Diagram Output classDiagram Animal < |-- Duck Animal < |-- Fish Animal < |-- Zebra class Animal{ +int age +String gender +isMammal() +mate() } class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } Markdown ```mermaid classDiagram Animal <|-- Duck Animal <|-- Fish Animal <|-- Zebra class Animal{ +int age +String gender +isMammal() +mate() } class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } ``` Create dirrefent relations between classes: Class Relations Output classDiagram classA --|> classB : Inheritance classC --* classD : Composition classE --o classF : Aggregation classG --> classH : Association classI -- classJ : Link(Solid) classK ..> classL : Dependency classM ..|> classN : Realization classO .. classP : Link(Dashed) Markdown ```mermaid classDiagram classA --|> classB : Inheritance classC --* classD : Composition classE --o classF : Aggregation classG --> classH : Association classI -- classJ : Link(Solid) classK ..> classL : Dependency classM ..|> classN : Realization classO .. classP : Link(Dashed) ``` Entity Relationship Diagram ERD diagrams allow documenting data end establishing relations between data collections. Each relation consists of the following parts: <first-entity> <relationship> <second-entity> : <relationship-label> , i.e. ORDER ||--|{ LINE_ITEM : contains . The relationship part of each statement can be broken down into three sub-components: the cardinality of the first entity with respect to the second, whether the relationship confers identity on a 'child' entity the cardinality of the second entity with respect to the first Cardinality is a property that describes how many elements of another entity can be related to the entity in question. In the above example a ORDER can have one or more LINE_ITEM instances associated to it, whereas a LINE_ITEM can have one and only one ORDER. In each cardinality marker there are two characters. The outermost character represents a maximum value, and the innermost character represents a minimum value. The table below summarises possible cardinalities. Value (left) Value (right) Meaning |o o| Zero or one || || Exactly one }o o{ Zero or more (no upper limit) }| |{ One or more (no upper limit) Class Relations Output erDiagram CUSTOMER { string name string custNumber string sector } ORDER { int orderNumber string deliveryAddress } LINE-ITEM { string productCode int quantity float pricePerUnit } ADDRESS { int addressId string street string city string cuntry } PRODUCT { string productCode string category string color } CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains ADDRESS ||--o{ ORDER : ship-to PRODUCT ||--o{ LINE-ITEM : contains Markdown ```mermaid erDiagram CUSTOMER { string name string custNumber string sector } ORDER { int orderNumber string deliveryAddress } LINE-ITEM { string productCode int quantity float pricePerUnit } ADDRESS { int addressId string street string city string cuntry } PRODUCT { string productCode string category string color } CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains ADDRESS ||--o{ ORDER : ship-to PRODUCT ||--o{ LINE-ITEM : contains ``` User Journey Diagram User journeys describe at a high level of detail exactly what steps different users take to complete a specific task within a system, application or website. This technique shows the current (as-is) user workflow, and reveals areas of improvement for the to-be workflow. Each user journey is split into sections, these describe the part of the task the user is trying to complete. Tasks syntax is <Task name>: <score>: <comma separated list of actors> Customer Journey Output journey title Customer Journey & satisfaction section Onboardin Verification: 3: Private, Business, Cooperations Checks: 2: Private section Presale Meet representative: 5: Private, Business, Cooperations Legal Experiecne: 4: Business, Cooperations Live support: 4: Business, Cooperations Email support: 3: Private Markdown ```mermaid journey title Customer Journey & satisfaction section Onboardin Verification: 3: Private, Business, Cooperations Checks: 2: Private section Presale Meet representative: 5: Private, Business, Cooperations Legal Experiecne: 4: Business, Cooperations Live support: 4: Business, Cooperations Email support: 3: Private ``` Gantt diagram Gantt Charts will record each scheduled task as one continuous bar that extends from the left to the right. The x axis represents time and the y records the different tasks and the order in which they are to be completed. Gantt chart consists of tasks grouped in sections. Every task has the folloving attributes position name Optional Values 1 criticality yes crit 2 execution state yes active , done 3 task id yes any 4 start date after task_1d , 2021-01-06 5 end date 12d , 2021-01-23 State Diagram Output gantt title A Gantt Diagram dateFormat YYYY-MM-DD section New Product R&D :crit, done, rnd1, 2021-01-06, 24h Product line :crit, active, rnd2, after rnd1, 12d Launch :crit, active, rnd3, 2021-01-08, 2d Support :crit, rnd4, after rnd3, 24d section Country Expansion Office : done, exp1, 2021-01-06, 2021-01-09 Country launch : done, exp2, after exp1, 4d Marketing : active, exp3, 2021-01-09, 18d PR : after exp2, 5d Markdown ```mermaid gantt title A Gantt Diagram dateFormat YYYY-MM-DD section New Product R&D :crit, done, rnd1, 2021-01-06, 24h Product line :crit, active, rnd2, after rnd1, 12d Launch :crit, active, rnd3, 2021-01-08, 2d Support :crit, rnd4, after rnd3, 24d section Country Expansion Office : done, exp1, 2021-01-06, 2021-01-09 Country launch : done, exp2, after exp1, 4d Marketing : active, exp3, 2021-01-09, 18d PR : exp4, after exp2, 5d ``` Requirement Diagram A Requirement diagram provides a visualization for requirements and their connections, to each other and other documented elements. The modeling specs follow those defined by SysML v1.6. State Diagram Output requirementDiagram requirement test_req { id: 1 text: the test text. risk: high verifymethod: test } element test_entity { type: simulation } test_entity - satisfies -> test_req Markdown ```mermaid requirementDiagram requirement test_req { id: 1 text: the test text. risk: high verifymethod: test } element test_entity { type: simulation } test_entity - satisfies -> test_req ``` State Diagram State diagram - is a type of diagram used in computer science and related fields to describe the behavior of systems. State diagrams require that the system described is composed of a finite number of states; sometimes, this is indeed the case, while at other times this is a reasonable abstraction State Diagram Output stateDiagram-v2 [*] --> Still Still --> Useless: Declare Useless --> [*] Still --> Moving Moving --> Still Moving --> Crash Crash --> if_state if_state --> Recover: if n < 0 if_state --> Fail: if n >= 0 Recover --> Still Fail --> [*] state Useless { [*] --> unload unload --> [*] } state if_state < > Markdown ```mermaid stateDiagram-v2 [*] --> Still Still --> Useless: Declare Useless --> [*] Still --> Moving Moving --> Still Moving --> Crash Crash --> if_state if_state --> Recover: if n < 0 if_state --> Fail: if n >= 0 Recover --> Still Fail --> [*] state Useless { [*] --> unload unload --> [*] } state if_state <<choice>> ```","title":"Draw diagrams"},{"location":"tutorials/markdown/diagrams/#pie-chart","text":"Very simple, just specify title and all entries with absolute Values State Diagram Output pie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 Markdown ```mermaid pie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 ```","title":"Pie chart"},{"location":"tutorials/markdown/diagrams/#flow-chart","text":"All Flowcharts are composed of nodes, the geometric shapes and edges, the arrows or lines. The code defines the way how these nodes and edges are made and connected. Nodes always have id, which is used to create links, and optionally nodes can have text inside. There is a selection of node shapes. Links can have text and be of different type. Graph should have direction: LR (left-right) or TD (top-down). Flow chart example Output graph TD A[Start] --> B{Is it?}; B -->|Yes| C[OK]; C --> D[Rethink]; D --> B; B ---->|No| E[End]; Markdown ```mermaid graph TD A[Start] --> B{Is it?}; B -->|Yes| C[OK]; C --> D[Rethink]; D --> B; B ---->|No| E[End]; ``` Nodes shapes Output graph LR A1 --> A2[text in the box] --> B2[text in the box] A3(rounded edges box) --> B3([round box]) --> C3((Circle)) A4[[double wall]] --> B4[(Database)] --> C4>Flag] A6{Diamond} --> B6[/Prism\\] --> C6[\\Reverse Prism/] Markdown ```mermaid graph LR A1 --> A2[text in the box] --> B2[text in the box] A3(rounded border box) --> B3([rounded box]) --> C3((Circle)) A4[[double wall]] --> B4[(Database)] --> C4>Flag] A6{Diamond} --> B6[/Prism\\] --> C6[\\Reverse Prism/] ``` Nodes links Output graph LR A --> B --- C --text!--- D E --text--> F -.-> G -.text.-> H I ==> J ==text==> K L --o M --x N O o--o P < --> Q x--x R Markdown","title":"Flow chart"},{"location":"tutorials/markdown/diagrams/#sequence-diagram","text":"Sequence diagram is used to demonstrate interactions between actors - elements of some system. It is perfect to show how processes operate with one another and in what order. This diagram is a list of communications in the form [Actor][Arrow][Actor]:Message text Types of arrows Type Description -> Solid line without arrow \u2192 Dotted line without arrow ->> Solid line with arrowhead \u2192> Dotted line with arrowhead -x Solid line with a cross at the end --x Dotted line with a cross at the end. -) Solid line with an open arrow at the end (async) --) Dotted line with a open arrow at the end (async) Example Output sequenceDiagram Producer ->> Queue: Message sent activate Queue Queue -->> Producer: Message acknowledged deactivate Queue Consumer ->> Queue: Get messages after offset 0 activate Queue Queue --> Consumer: Message provided deactivate Queue activate Consumer Note over Consumer: Processing Message Consumer -->> Queue: change offset to 1 deactivate Consumer loop Every 2 seconds Consumer --x Service Monitor: Send heartbeat end Note over Consumer,Service Monitor: restarted if no heartbeat Markdown ```mermaid sequenceDiagram Producer ->> Queue: Message sent activate Queue Queue -->> Producer: Message acknowledged deactivate Queue Consumer ->> Queue: Get messages after offset 0 activate Queue Queue --> Consumer: Message provided deactivate Queue activate Consumer Note over Consumer: Processing Message Consumer -->> Queue: change offset to 1 deactivate Consumer loop Every 2 seconds Consumer --x Service Monitor: Send heartbeat end Note over Consumer,Service Monitor: restarted if no heartbeat ```","title":"Sequence diagram"},{"location":"tutorials/markdown/diagrams/#class-diagram","text":"Class diagram in the Unified Modeling Language (UML) describes the structure of a system by showing the system's classes, their attributes, operations (or methods), and the relationships between the objects. Class Diagram Output classDiagram Animal < |-- Duck Animal < |-- Fish Animal < |-- Zebra class Animal{ +int age +String gender +isMammal() +mate() } class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } Markdown ```mermaid classDiagram Animal <|-- Duck Animal <|-- Fish Animal <|-- Zebra class Animal{ +int age +String gender +isMammal() +mate() } class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } ``` Create dirrefent relations between classes: Class Relations Output classDiagram classA --|> classB : Inheritance classC --* classD : Composition classE --o classF : Aggregation classG --> classH : Association classI -- classJ : Link(Solid) classK ..> classL : Dependency classM ..|> classN : Realization classO .. classP : Link(Dashed) Markdown ```mermaid classDiagram classA --|> classB : Inheritance classC --* classD : Composition classE --o classF : Aggregation classG --> classH : Association classI -- classJ : Link(Solid) classK ..> classL : Dependency classM ..|> classN : Realization classO .. classP : Link(Dashed) ```","title":"Class diagram"},{"location":"tutorials/markdown/diagrams/#entity-relationship-diagram","text":"ERD diagrams allow documenting data end establishing relations between data collections. Each relation consists of the following parts: <first-entity> <relationship> <second-entity> : <relationship-label> , i.e. ORDER ||--|{ LINE_ITEM : contains . The relationship part of each statement can be broken down into three sub-components: the cardinality of the first entity with respect to the second, whether the relationship confers identity on a 'child' entity the cardinality of the second entity with respect to the first Cardinality is a property that describes how many elements of another entity can be related to the entity in question. In the above example a ORDER can have one or more LINE_ITEM instances associated to it, whereas a LINE_ITEM can have one and only one ORDER. In each cardinality marker there are two characters. The outermost character represents a maximum value, and the innermost character represents a minimum value. The table below summarises possible cardinalities. Value (left) Value (right) Meaning |o o| Zero or one || || Exactly one }o o{ Zero or more (no upper limit) }| |{ One or more (no upper limit) Class Relations Output erDiagram CUSTOMER { string name string custNumber string sector } ORDER { int orderNumber string deliveryAddress } LINE-ITEM { string productCode int quantity float pricePerUnit } ADDRESS { int addressId string street string city string cuntry } PRODUCT { string productCode string category string color } CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains ADDRESS ||--o{ ORDER : ship-to PRODUCT ||--o{ LINE-ITEM : contains Markdown ```mermaid erDiagram CUSTOMER { string name string custNumber string sector } ORDER { int orderNumber string deliveryAddress } LINE-ITEM { string productCode int quantity float pricePerUnit } ADDRESS { int addressId string street string city string cuntry } PRODUCT { string productCode string category string color } CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains ADDRESS ||--o{ ORDER : ship-to PRODUCT ||--o{ LINE-ITEM : contains ```","title":"Entity Relationship Diagram"},{"location":"tutorials/markdown/diagrams/#user-journey-diagram","text":"User journeys describe at a high level of detail exactly what steps different users take to complete a specific task within a system, application or website. This technique shows the current (as-is) user workflow, and reveals areas of improvement for the to-be workflow. Each user journey is split into sections, these describe the part of the task the user is trying to complete. Tasks syntax is <Task name>: <score>: <comma separated list of actors> Customer Journey Output journey title Customer Journey & satisfaction section Onboardin Verification: 3: Private, Business, Cooperations Checks: 2: Private section Presale Meet representative: 5: Private, Business, Cooperations Legal Experiecne: 4: Business, Cooperations Live support: 4: Business, Cooperations Email support: 3: Private Markdown ```mermaid journey title Customer Journey & satisfaction section Onboardin Verification: 3: Private, Business, Cooperations Checks: 2: Private section Presale Meet representative: 5: Private, Business, Cooperations Legal Experiecne: 4: Business, Cooperations Live support: 4: Business, Cooperations Email support: 3: Private ```","title":"User Journey Diagram"},{"location":"tutorials/markdown/diagrams/#gantt-diagram","text":"Gantt Charts will record each scheduled task as one continuous bar that extends from the left to the right. The x axis represents time and the y records the different tasks and the order in which they are to be completed. Gantt chart consists of tasks grouped in sections. Every task has the folloving attributes position name Optional Values 1 criticality yes crit 2 execution state yes active , done 3 task id yes any 4 start date after task_1d , 2021-01-06 5 end date 12d , 2021-01-23 State Diagram Output gantt title A Gantt Diagram dateFormat YYYY-MM-DD section New Product R&D :crit, done, rnd1, 2021-01-06, 24h Product line :crit, active, rnd2, after rnd1, 12d Launch :crit, active, rnd3, 2021-01-08, 2d Support :crit, rnd4, after rnd3, 24d section Country Expansion Office : done, exp1, 2021-01-06, 2021-01-09 Country launch : done, exp2, after exp1, 4d Marketing : active, exp3, 2021-01-09, 18d PR : after exp2, 5d Markdown ```mermaid gantt title A Gantt Diagram dateFormat YYYY-MM-DD section New Product R&D :crit, done, rnd1, 2021-01-06, 24h Product line :crit, active, rnd2, after rnd1, 12d Launch :crit, active, rnd3, 2021-01-08, 2d Support :crit, rnd4, after rnd3, 24d section Country Expansion Office : done, exp1, 2021-01-06, 2021-01-09 Country launch : done, exp2, after exp1, 4d Marketing : active, exp3, 2021-01-09, 18d PR : exp4, after exp2, 5d ```","title":"Gantt diagram"},{"location":"tutorials/markdown/diagrams/#requirement-diagram","text":"A Requirement diagram provides a visualization for requirements and their connections, to each other and other documented elements. The modeling specs follow those defined by SysML v1.6. State Diagram Output requirementDiagram requirement test_req { id: 1 text: the test text. risk: high verifymethod: test } element test_entity { type: simulation } test_entity - satisfies -> test_req Markdown ```mermaid requirementDiagram requirement test_req { id: 1 text: the test text. risk: high verifymethod: test } element test_entity { type: simulation } test_entity - satisfies -> test_req ```","title":"Requirement Diagram"},{"location":"tutorials/markdown/diagrams/#state-diagram","text":"State diagram - is a type of diagram used in computer science and related fields to describe the behavior of systems. State diagrams require that the system described is composed of a finite number of states; sometimes, this is indeed the case, while at other times this is a reasonable abstraction State Diagram Output stateDiagram-v2 [*] --> Still Still --> Useless: Declare Useless --> [*] Still --> Moving Moving --> Still Moving --> Crash Crash --> if_state if_state --> Recover: if n < 0 if_state --> Fail: if n >= 0 Recover --> Still Fail --> [*] state Useless { [*] --> unload unload --> [*] } state if_state < > Markdown ```mermaid stateDiagram-v2 [*] --> Still Still --> Useless: Declare Useless --> [*] Still --> Moving Moving --> Still Moving --> Crash Crash --> if_state if_state --> Recover: if n < 0 if_state --> Fail: if n >= 0 Recover --> Still Fail --> [*] state Useless { [*] --> unload unload --> [*] } state if_state <<choice>> ```","title":"State Diagram"},{"location":"tutorials/markdown/formulas/","text":"You can use MkDocs Workspace to create powerful mathematical documentation websites or print documents, by exporting docs to pdf files. MkDocs Workspace renders LaTeX math equations with MathJax . Showcase: formulas Output \\[ T^{i_1 i_2 \\dots i_p}_{j_1 j_2 \\dots j_q} = T(x^{i_1},\\dots,x^{i_p},e_{j_1},\\dots,e_{j_q}) \\] \\[ \\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align} \\] \\[ \\begin{matrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{matrix} \\] \\[ \\left[ \\begin{array}{cc|c} 1&2&3\\\\ 4&5&6 \\end{array} \\right] \\] \\[ \\begin{align} \\sqrt{37} & = \\sqrt{\\frac{73^2-1}{12^2}} \\\\ & = \\sqrt{\\frac{73^2}{12^2}\\cdot\\frac{73^2-1}{73^2}} \\\\ & = \\sqrt{\\frac{73^2}{12^2}}\\sqrt{\\frac{73^2-1}{73^2}} \\\\ & = \\frac{73}{12}\\sqrt{1 - \\frac{1}{73^2}} \\\\ & \\approx \\frac{73}{12}\\left(1 - \\frac{1}{2\\cdot73^2}\\right) \\end{align} \\] \\[ f(n) = \\begin{cases} n/2, & \\text{if $n$ is even} \\\\ 3n+1, & \\text{if $n$ is odd} \\end{cases} \\] \\[ \\begin{array}{c|lcr} n & \\text{Left} & \\text{Center} & \\text{Right} \\\\ \\hline 1 & 0.24 & 1 & 125 \\\\ 2 & -1 & 189 & -8 \\\\ 3 & -20 & 2000 & 1+10i \\end{array} \\] \\[ \\left\\{ \\begin{array}{l} 0 = c_x-a_{x0}-d_{x0}\\dfrac{(c_x-a_{x0})\\cdot d_{x0}}{\\|d_{x0}\\|^2} + c_x-a_{x1}-d_{x1}\\dfrac{(c_x-a_{x1})\\cdot d_{x1}}{\\|d_{x1}\\|^2} \\\\[2ex] 0 = c_y-a_{y0}-d_{y0}\\dfrac{(c_y-a_{y0})\\cdot d_{y0}}{\\|d_{y0}\\|^2} + c_y-a_{y1}-d_{y1}\\dfrac{(c_y-a_{y1})\\cdot d_{y1}}{\\|d_{y1}\\|^2} \\end{array} \\right. \\] \\[ \\underset{j=1}{\\overset{\\infty}{\\LARGE\\mathrm K}}\\frac{a_j}{b_j}=\\cfrac{a_1}{b_1+\\cfrac{a_2}{b_2+\\cfrac{a_3}{b_3+\\ddots}}} \\] \\[ \\bbox[yellow] { e^x=\\lim_{n\\to\\infty} \\left( 1+\\frac{x}{n} \\right)^n \\qquad (1) } \\] \\[ |x|, ||v|| \\quad\\longrightarrow\\quad \\lvert x\\rvert, \\lVert v\\rVert \\] \\[ \\begin{array}{c|rrrr}& x^3 & x^2 & x^1 & x^0\\\\ & 1 & -6 & 11 & -6\\\\ {\\color{red}1} & \\downarrow & 1 & -5 & 6\\\\ \\hline & 1 & -5 & 6 & |\\phantom{-} {\\color{blue}0} \\end{array} \\] \\[ z = \\overbrace{ \\underbrace{x}_\\text{real} + i \\underbrace{y}_\\text{imaginary} }^\\text{complex number} \\] Markdown \\[ T^{i_1 i_2 \\dots i_p}_{j_1 j_2 \\dots j_q} = T(x^{i_1},\\dots,x^{i_p},e_{j_1},\\dots,e_{j_q}) \\] $$ \\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align} $$ $$ \\begin{matrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{matrix} $$ $$ \\left[ \\begin{array}{cc|c} 1&2&3\\\\ 4&5&6 \\end{array} \\right] $$ $$ \\begin{align} \\sqrt{37} & = \\sqrt{\\frac{73^2-1}{12^2}} \\\\ & = \\sqrt{\\frac{73^2}{12^2}\\cdot\\frac{73^2-1}{73^2}} \\\\ & = \\sqrt{\\frac{73^2}{12^2}}\\sqrt{\\frac{73^2-1}{73^2}} \\\\ & = \\frac{73}{12}\\sqrt{1 - \\frac{1}{73^2}} \\\\ & \\approx \\frac{73}{12}\\left(1 - \\frac{1}{2\\cdot73^2}\\right) \\end{align} $$ $$ f(n) = \\begin{cases} n/2, & \\text{if $n$ is even} \\\\ 3n+1, & \\text{if $n$ is odd} \\end{cases} $$ $$ \\begin{array}{c|lcr} n & \\text{Left} & \\text{Center} & \\text{Right} \\\\ \\hline 1 & 0.24 & 1 & 125 \\\\ 2 & -1 & 189 & -8 \\\\ 3 & -20 & 2000 & 1+10i \\end{array} $$ $$ \\left\\{ \\begin{array}{l} 0 = c_x-a_{x0}-d_{x0}\\dfrac{(c_x-a_{x0})\\cdot d_{x0}}{\\|d_{x0}\\|^2} + c_x-a_{x1}-d_{x1}\\dfrac{(c_x-a_{x1})\\cdot d_{x1}}{\\|d_{x1}\\|^2} \\\\[2ex] 0 = c_y-a_{y0}-d_{y0}\\dfrac{(c_y-a_{y0})\\cdot d_{y0}}{\\|d_{y0}\\|^2} + c_y-a_{y1}-d_{y1}\\dfrac{(c_y-a_{y1})\\cdot d_{y1}}{\\|d_{y1}\\|^2} \\end{array} \\right. $$ $$ \\underset{j=1}{\\overset{\\infty}{\\LARGE\\mathrm K}}\\frac{a_j}{b_j}=\\cfrac{a_1}{b_1+\\cfrac{a_2}{b_2+\\cfrac{a_3}{b_3+\\ddots}}} $$ $$ \\bbox[yellow] { e^x=\\lim_{n\\to\\infty} \\left( 1+\\frac{x}{n} \\right)^n \\qquad (1) } $$ $$ |x|, ||v|| \\quad\\longrightarrow\\quad \\lvert x\\rvert, \\lVert v\\rVert $$ $$ \\begin{array}{c|rrrr}& x^3 & x^2 & x^1 & x^0\\\\ & 1 & -6 & 11 & -6\\\\ {\\color{red}1} & \\downarrow & 1 & -5 & 6\\\\ \\hline & 1 & -5 & 6 & |\\phantom{-} {\\color{blue}0} \\end{array} $$ $$ z = \\overbrace{ \\underbrace{x}_\\text{real} + i \\underbrace{y}_\\text{imaginary} }^\\text{complex number} $$ Inline vs. block mode Formulas are created using one of the notations: $...$ and \\(...\\) for inline math $$...$$ , \\[...\\] , and \\begin{}...\\end{} for block math. Block mode should start from the new line. Output Inline and block formulas render differently. For example, this is \\(\\sum_{i=0}^n i^2 = \\frac{(n^2+\\epsilon)(2n+1)}{6\\phi}\\) an inline mode) And the block mode looks like this (don't forget empty line!) \\[\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}\\] Markdown Inline and block formulas render differently. For example, this is $\\sum_{i=0}^n i^2 = \\frac{(n^2+\\epsilon)(2n+1)}{6\\phi}$ an inline mode) And the block mode looks like this (don't forget empty line!) $$\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}$$ Add Greek letters to the formula Output \\[\\sum_{i=0}^n \\pi^2 = \\Delta\\frac{(n^2+\\epsilon)(2n+1)}{6\\phi}\\] Markdown $$ \\sum_{i=0}^n \\pi^2 = \\Delta\\frac{(n^2+\\epsilon)(2n+1)}{6\\phi} $$ Groups A group is either a single symbol, or any formula surrounded by curly braces {\u2026}. Operators, fractions, subscripts or superscripts appy to the group or groups. For example, you can use use ^ and _ to create superscripts and subscripts respectively. Output \\[ x_i^2 + \\log_2 x \\] Markdown $$ x_i^2 + \\log_2 x $$ And because superscripts, subscripts, and other operations apply only to the next group , if you write 10^10 , you will get a surprise: \\(10^10\\) . But 10^{10} gives what you probably wanted: \\(10^{10}\\) . Fractions In order to create fractions use \\frac{...}{...} . I.e. Output \\[ \\frac{73^2-1}{12^2} \\] Markdown $$ \\frac{73^2-1}{12^2} $$ Combine Fractions Output \\[ \\frac{\\Gamma + \\Omega}{\\frac{73^2-1}{12^2}} \\] Markdown $$ \\frac{\\Gamma + \\Omega}{\\frac{73^2-1}{12^2}} $$ Operators and other notations Examples of Latex math operators and notations Notation Output \\sqrt{x} \\(\\sqrt{x}\\) \\sin(a + b) \\(\\sin(a + b)\\) \\log(x + y) \\(\\log{(x + y)}\\) \\log_4(x + y) \\(\\log_4{(x + y)}\\) \\ln{x} \\(\\ln{x}\\) e^{x + y} \\(e^{x + y}\\) \\lim_{x \\to 0}{x^2} \\(\\lim_{x \\to 0}{x^2}\\) \\min{x} \\(\\min{x}\\) f(n) = x^2 \\(f(n) = x^2\\) ... ... Special symbols Notation Output a\\equiv b \\(a\\equiv b\\) \\bar{x} - \\hat{x} - \\tilde{x} \\(\\bar{x} \\hat{x} \\tilde{x}\\) \\dot{x} + \\ddot{x} + \\dddot{x} \\(\\dot{x} \\ddot{x} \\dddot{x}\\) \\exists a,b\\in G$ with $a\\neq b$ such that $f(a)=f(b) \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) a_1 + a_2 + a_3 + \\cdots + a_n \\(a_1 + a_2 + a_3 + \\cdots + a_n\\) \\lt \\gt \\le \\leq \\leqq \\leqslant \\(\\lt \\gt \\le \\leq \\leqq \\leqslant\\) \\ge \\geq \\geqq \\geqslant \\neq \\(\\ge \\geq \\geqq \\geqslant \\neq\\) \\times \\div \\pm \\mp \\cdot \\(\\times \\div \\pm \\mp \\cdot\\) \\cup \\cap \\(\\cup \\cap\\) \\setminus \\subset \\subseteq \\subsetneq \\supset \\(\\setminus \\subset \\subseteq \\subsetneq \\supset\\) \\in \\notin \\(\\in \\notin\\) \\emptyset \\varnothing \\(\\emptyset \\varnothing\\) \\binom{n+1}{2k} \\(\\binom{n+1}{2k}\\) \\to \\rightarrow \\leftarrow \\Rightarrow \\Leftarrow \\mapsto \\(\\to \\rightarrow \\leftarrow \\Rightarrow \\Leftarrow \\mapsto\\) \\land \\lor \\lnot \\forall \\exists \\top \\bot \\vdash \\vDash \\(\\land \\lor \\lnot \\forall \\exists\\) $\\top \\bot \\vdash \\vDash$ \\(\\top \\bot \\vdash \\vDash\\) \\approx \\sim \\simeq \\cong \\equiv \\prec \\lhd \\therefore \\(\\approx \\sim \\simeq \\cong \\equiv \\prec \\lhd \\therefore\\) \\overline{ABC} \\(\\overline{ABC}\\) \\underline{XYZ} \\(\\underline{XYZ}\\) \\widetilde{AB} \\(\\widetilde{AB}\\) \\underleftarrow{ABC} \\(\\underleftarrow{ABC}\\) \\underrightarrow{XYZ} \\(\\underrightarrow{XYZ}\\) \\xleftarrow{} \\xrightarrow{} \\(\\xleftarrow{} \\xrightarrow{}\\) Sums, products, integrals Notation Output \\sum_{i=0}^n i^2 \\(\\sum_{i=0}^n i^2\\) \\prod_{i=0}^n (2i + i) \\(\\prod_{i=0}^n (2i + i)\\) \\int(x) \\(\\int(x)\\) \\int_{i=0}^n (2i + i) \\(\\int_{i=0}^n (2i + i)\\) \\iint \\(\\iint\\) \\iiint \\(\\iiint\\) \\idotsint \\(\\idotsint\\) Set operators Notation Output \\overline{A} = A^c \\(\\overline{A} = A^c\\) A \\in B, B \\notin C, D = \\emptyset \\(A \\in B, B \\notin C, D = \\emptyset\\) (A \\cup B \\cap C) \\setminus (D \\subset E) \\subseteq F \\((A \\cup B \\cap C) \\setminus (D \\subset E) \\subseteq F\\) \\bigcup_{i=1}^n A_i \\(\\bigcup_{i=1}^n A^i\\) \\bigcap_{i=1} A_i \\(\\bigcap_{i=1} A_i\\) Parentheses Ordinary symbols ()[] make parentheses and brackets, i.e. \\((2+3)[4+4]\\) . Use escape char \\{ and \\} for curly braces {} . Notation Output (x) \\((x)\\) [x] \\([x]\\) \\{x\\} \\(\\{x\\}\\) |x| \\(\\vert x \\vert\\) ||x|| \\(\\Vert x \\Vert\\) $\\vert x \\vert$ \\(\\vert x \\vert\\) $\\Vert x \\Vert$ \\(\\Vert x \\Vert\\) \\langle x \\rangle \\(\\langle x \\rangle\\) \\lceil x \\rceil \\(\\lceil x \\rceil\\) \\lfloor x \\rfloor \\(\\lfloor x \\rfloor\\) There are different sizes of parentheses Output \\[ \\Biggl(\\biggl(\\Bigl(\\bigl((x)\\bigr)\\Bigr)\\biggr)\\Biggr) \\] Markdown $$ \\Biggl(\\biggl(\\Bigl(\\bigl((x)\\bigr)\\Bigr)\\biggr)\\Biggr) $$ Hint Use \\left( and \\right) notations in formulas instead of ( and ) respectively. Symbols like ( will make small parentheses, which are not suitable for fractions. For example, in case of (\\frac{\\sqrt x}{y^3}) the output is: Output \\[ (\\frac{\\sqrt x}{y^3}) \\] Markdown $$ (\\frac{\\sqrt x}{y^3}) $$ But if you use \\left( and \\right) notations instead, you will get Output \\[ \\left(\\frac{\\sqrt x}{y^3}\\right) \\] Markdown $$ \\left(\\frac{\\sqrt x}{y^3}\\right) $$ Combine fractions, operators and parentheses: Output \\[ \\left(\\frac{\\left(\\sqrt{\\frac{73^2}{12x}}\\sqrt{\\frac{x|x|}{\\log_x}}\\right)}{\\sqrt[3]{\\frac xy}}\\right) \\] Markdown $$ \\left(\\frac{\\left(\\sqrt{\\frac{73^2}{12x}}\\sqrt{\\frac{x|x|}{\\log_x}}\\right)}{\\sqrt[3]{\\frac xy}}\\right) $$ System of equations, formulas and functions Use cases to create systems of equations or functions definitions by cases (piecewise functions). Output \\[ f(n) = \\begin{cases} n/2, & \\text{if $n$ is even} \\\\ 3n+1, & \\text{if $n$ is odd} \\end{cases} \\] Markdown $$ f(n) = \\begin{cases} n/2, & \\text{if $n$ is even} \\\\ 3n+1, & \\text{if $n$ is odd} \\end{cases} $$ Aligned systems of formulas using \\begin{align} and \\end{align} Output \\[ \\begin{align} \\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} & = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\ \\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\ \\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\ \\nabla \\cdot \\vec{\\mathbf{B}} & = 0 \\end{align} \\] Markdown $$ \\begin{align} \\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} & = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\ \\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\ \\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\ \\nabla \\cdot \\vec{\\mathbf{B}} & = 0 \\end{align} $$ In order to create system of quations use \\begin{array} , \\end{array} together with \\left\\{ and \\right Output \\[ \\left\\{ \\begin{array}{c} a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\ a_3x+b_3y+c_3z=d_3 \\end{array} \\right. \\] Markdown $$ \\left\\{ \\begin{array}{c} a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\ a_3x+b_3y+c_3z=d_3 \\end{array} \\right. $$ System of equations Output Alternative way to produce system of equations \\[ \\begin{cases} a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\ a_3x+b_3y+c_3z=d_3 \\end{cases} \\] To align the = signs use \\begin{aligned} and \\end{aligned} together with \\left\\{ and \\right \\[ \\left\\{ \\begin{aligned} a_1x+b_1y+c_1z &=d_1+e_1 \\\\ a_2x+b_2y&=d_2 \\\\ a_3x+b_3y+c_3z &=d_3 \\end{aligned} \\right. \\] Use \\begin{array}{ll} to align everything left \\[ \\left\\{ \\begin{array}{ll} a_1x+b_1y+c_1z &=d_1+e_1 \\\\ a_2x+b_2y &=d_2 \\\\ a_3x+b_3y+c_3z &=d_3 \\end{array} \\right. \\] Use \\\\[2ex] to create larger vertical spaces between equations \\[ \\begin{cases} a_1x+b_1y+c_1z=\\frac{p_1}{q_1} \\\\[2ex] a_2x+b_2y+c_2z=\\frac{p_2}{q_2} \\\\[2ex] a_3x+b_3y+c_3z=\\frac{p_3}{q_3} \\end{cases} \\] Markdown Alternative way to produce system of equations $$ \\begin{cases} a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\ a_3x+b_3y+c_3z=d_3 \\end{cases} $$ To align the ```=``` signs use ```\\begin{aligned}``` and ```\\end{aligned}``` together with ```\\left\\{``` and ```\\right``` $$ \\left\\{ \\begin{aligned} a_1x+b_1y+c_1z &=d_1+e_1 \\\\ a_2x+b_2y&=d_2 \\\\ a_3x+b_3y+c_3z &=d_3 \\end{aligned} \\right. $$ Use ```\\begin{array}{ll}``` to align everything left $$ \\left\\{ \\begin{array}{ll} a_1x+b_1y+c_1z &=d_1+e_1 \\\\ a_2x+b_2y &=d_2 \\\\ a_3x+b_3y+c_3z &=d_3 \\end{array} \\right. $$ Use ```\\\\[2ex]``` to create larger vertical spaces between equations $$ \\begin{cases} a_1x+b_1y+c_1z=\\frac{p_1}{q_1} \\\\[2ex] a_2x+b_2y+c_2z=\\frac{p_2}{q_2} \\\\[2ex] a_3x+b_3y+c_3z=\\frac{p_3}{q_3} \\end{cases} $$ Matrices In order to create matrixes use $$\\begin{matrix}\u2026\\end{matrix}$$ , in between the \\begin and \\end , put the matrix elements. End each matrix row with \\\\ , and separate matrix elements with & Output \\[ \\begin{matrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{matrix} \\] Markdown $$ \\begin{matrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{matrix} $$ Advanced matrix notations Output To add brackets use {pmatrix} , {bmatrix} , {Bmatrix} , {vmatrix} . With {pmatrix} \\[ \\begin{pmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{pmatrix} \\] With {bmatrix} \\[ \\begin{bmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{bmatrix} \\] With {Bmatrix} \\[ \\begin{Bmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{Bmatrix} \\] With {Vmatrix} \\[ \\begin{vmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{vmatrix} \\] With vertical line \\[ \\left[ \\begin{array}{cc|c} 1&2&3\\\\ 4&5&6 \\end{array} \\right] \\] With horizontal line \\[ \\begin{pmatrix} a & b\\\\ c & d\\\\ \\hline 1 & 0\\\\ 0 & 1 \\end{pmatrix} \\] Use \\cdots for \u22ef , \\ddots for \u22f1 and \\vdots for \u22ee when you want to omit some of the entries: \\[ \\begin{vmatrix} 1 & x & \\cdots & x^2 \\\\ 1 & y & \\cdots & y^2 \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 1 & z & \\cdots & z^2 \\\\ \\end{vmatrix} \\] Markdown To add brackets use ```{pmatrix}```, ```{bmatrix}```, ```{Bmatrix}```, ```{vmatrix}```. With ```{pmatrix}``` $$ \\begin{pmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{pmatrix} $$ With ```{bmatrix}``` $$ \\begin{bmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{bmatrix} $$ With ```{Bmatrix}``` $$ \\begin{Bmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{Bmatrix} $$ With ```{Vmatrix}``` $$ \\begin{vmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{vmatrix} $$ With vertical line $$ \\left[ \\begin{array}{cc|c} 1&2&3\\\\ 4&5&6 \\end{array} \\right] $$ With horizontal line $$ \\begin{pmatrix} a & b\\\\ c & d\\\\ \\hline 1 & 0\\\\ 0 & 1 \\end{pmatrix} $$ Use ```\\cdots``` for **\u22ef**, ```\\ddots``` for **\u22f1** and ```\\vdots``` for **\u22ee** when you want to omit some of the entries: $$ \\begin{vmatrix} 1 & x & \\cdots & x^2 \\\\ 1 & y & \\cdots & y^2 \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 1 & z & \\cdots & z^2 \\\\ \\end{vmatrix} $$","title":"Write formulas"},{"location":"tutorials/markdown/formulas/#inline-vs-block-mode","text":"Formulas are created using one of the notations: $...$ and \\(...\\) for inline math $$...$$ , \\[...\\] , and \\begin{}...\\end{} for block math. Block mode should start from the new line. Output Inline and block formulas render differently. For example, this is \\(\\sum_{i=0}^n i^2 = \\frac{(n^2+\\epsilon)(2n+1)}{6\\phi}\\) an inline mode) And the block mode looks like this (don't forget empty line!) \\[\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}\\] Markdown Inline and block formulas render differently. For example, this is $\\sum_{i=0}^n i^2 = \\frac{(n^2+\\epsilon)(2n+1)}{6\\phi}$ an inline mode) And the block mode looks like this (don't forget empty line!) $$\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}$$ Add Greek letters to the formula Output \\[\\sum_{i=0}^n \\pi^2 = \\Delta\\frac{(n^2+\\epsilon)(2n+1)}{6\\phi}\\] Markdown $$ \\sum_{i=0}^n \\pi^2 = \\Delta\\frac{(n^2+\\epsilon)(2n+1)}{6\\phi} $$","title":"Inline vs. block mode"},{"location":"tutorials/markdown/formulas/#groups","text":"A group is either a single symbol, or any formula surrounded by curly braces {\u2026}. Operators, fractions, subscripts or superscripts appy to the group or groups. For example, you can use use ^ and _ to create superscripts and subscripts respectively. Output \\[ x_i^2 + \\log_2 x \\] Markdown $$ x_i^2 + \\log_2 x $$ And because superscripts, subscripts, and other operations apply only to the next group , if you write 10^10 , you will get a surprise: \\(10^10\\) . But 10^{10} gives what you probably wanted: \\(10^{10}\\) .","title":"Groups"},{"location":"tutorials/markdown/formulas/#fractions","text":"In order to create fractions use \\frac{...}{...} . I.e. Output \\[ \\frac{73^2-1}{12^2} \\] Markdown $$ \\frac{73^2-1}{12^2} $$ Combine Fractions Output \\[ \\frac{\\Gamma + \\Omega}{\\frac{73^2-1}{12^2}} \\] Markdown $$ \\frac{\\Gamma + \\Omega}{\\frac{73^2-1}{12^2}} $$","title":"Fractions"},{"location":"tutorials/markdown/formulas/#operators-and-other-notations","text":"Examples of Latex math operators and notations Notation Output \\sqrt{x} \\(\\sqrt{x}\\) \\sin(a + b) \\(\\sin(a + b)\\) \\log(x + y) \\(\\log{(x + y)}\\) \\log_4(x + y) \\(\\log_4{(x + y)}\\) \\ln{x} \\(\\ln{x}\\) e^{x + y} \\(e^{x + y}\\) \\lim_{x \\to 0}{x^2} \\(\\lim_{x \\to 0}{x^2}\\) \\min{x} \\(\\min{x}\\) f(n) = x^2 \\(f(n) = x^2\\) ... ...","title":"Operators and other notations"},{"location":"tutorials/markdown/formulas/#special-symbols","text":"Notation Output a\\equiv b \\(a\\equiv b\\) \\bar{x} - \\hat{x} - \\tilde{x} \\(\\bar{x} \\hat{x} \\tilde{x}\\) \\dot{x} + \\ddot{x} + \\dddot{x} \\(\\dot{x} \\ddot{x} \\dddot{x}\\) \\exists a,b\\in G$ with $a\\neq b$ such that $f(a)=f(b) \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) a_1 + a_2 + a_3 + \\cdots + a_n \\(a_1 + a_2 + a_3 + \\cdots + a_n\\) \\lt \\gt \\le \\leq \\leqq \\leqslant \\(\\lt \\gt \\le \\leq \\leqq \\leqslant\\) \\ge \\geq \\geqq \\geqslant \\neq \\(\\ge \\geq \\geqq \\geqslant \\neq\\) \\times \\div \\pm \\mp \\cdot \\(\\times \\div \\pm \\mp \\cdot\\) \\cup \\cap \\(\\cup \\cap\\) \\setminus \\subset \\subseteq \\subsetneq \\supset \\(\\setminus \\subset \\subseteq \\subsetneq \\supset\\) \\in \\notin \\(\\in \\notin\\) \\emptyset \\varnothing \\(\\emptyset \\varnothing\\) \\binom{n+1}{2k} \\(\\binom{n+1}{2k}\\) \\to \\rightarrow \\leftarrow \\Rightarrow \\Leftarrow \\mapsto \\(\\to \\rightarrow \\leftarrow \\Rightarrow \\Leftarrow \\mapsto\\) \\land \\lor \\lnot \\forall \\exists \\top \\bot \\vdash \\vDash \\(\\land \\lor \\lnot \\forall \\exists\\) $\\top \\bot \\vdash \\vDash$ \\(\\top \\bot \\vdash \\vDash\\) \\approx \\sim \\simeq \\cong \\equiv \\prec \\lhd \\therefore \\(\\approx \\sim \\simeq \\cong \\equiv \\prec \\lhd \\therefore\\) \\overline{ABC} \\(\\overline{ABC}\\) \\underline{XYZ} \\(\\underline{XYZ}\\) \\widetilde{AB} \\(\\widetilde{AB}\\) \\underleftarrow{ABC} \\(\\underleftarrow{ABC}\\) \\underrightarrow{XYZ} \\(\\underrightarrow{XYZ}\\) \\xleftarrow{} \\xrightarrow{} \\(\\xleftarrow{} \\xrightarrow{}\\)","title":"Special symbols"},{"location":"tutorials/markdown/formulas/#sums-products-integrals","text":"Notation Output \\sum_{i=0}^n i^2 \\(\\sum_{i=0}^n i^2\\) \\prod_{i=0}^n (2i + i) \\(\\prod_{i=0}^n (2i + i)\\) \\int(x) \\(\\int(x)\\) \\int_{i=0}^n (2i + i) \\(\\int_{i=0}^n (2i + i)\\) \\iint \\(\\iint\\) \\iiint \\(\\iiint\\) \\idotsint \\(\\idotsint\\)","title":"Sums, products, integrals"},{"location":"tutorials/markdown/formulas/#set-operators","text":"Notation Output \\overline{A} = A^c \\(\\overline{A} = A^c\\) A \\in B, B \\notin C, D = \\emptyset \\(A \\in B, B \\notin C, D = \\emptyset\\) (A \\cup B \\cap C) \\setminus (D \\subset E) \\subseteq F \\((A \\cup B \\cap C) \\setminus (D \\subset E) \\subseteq F\\) \\bigcup_{i=1}^n A_i \\(\\bigcup_{i=1}^n A^i\\) \\bigcap_{i=1} A_i \\(\\bigcap_{i=1} A_i\\)","title":"Set operators"},{"location":"tutorials/markdown/formulas/#parentheses","text":"Ordinary symbols ()[] make parentheses and brackets, i.e. \\((2+3)[4+4]\\) . Use escape char \\{ and \\} for curly braces {} . Notation Output (x) \\((x)\\) [x] \\([x]\\) \\{x\\} \\(\\{x\\}\\) |x| \\(\\vert x \\vert\\) ||x|| \\(\\Vert x \\Vert\\) $\\vert x \\vert$ \\(\\vert x \\vert\\) $\\Vert x \\Vert$ \\(\\Vert x \\Vert\\) \\langle x \\rangle \\(\\langle x \\rangle\\) \\lceil x \\rceil \\(\\lceil x \\rceil\\) \\lfloor x \\rfloor \\(\\lfloor x \\rfloor\\) There are different sizes of parentheses Output \\[ \\Biggl(\\biggl(\\Bigl(\\bigl((x)\\bigr)\\Bigr)\\biggr)\\Biggr) \\] Markdown $$ \\Biggl(\\biggl(\\Bigl(\\bigl((x)\\bigr)\\Bigr)\\biggr)\\Biggr) $$ Hint Use \\left( and \\right) notations in formulas instead of ( and ) respectively. Symbols like ( will make small parentheses, which are not suitable for fractions. For example, in case of (\\frac{\\sqrt x}{y^3}) the output is: Output \\[ (\\frac{\\sqrt x}{y^3}) \\] Markdown $$ (\\frac{\\sqrt x}{y^3}) $$ But if you use \\left( and \\right) notations instead, you will get Output \\[ \\left(\\frac{\\sqrt x}{y^3}\\right) \\] Markdown $$ \\left(\\frac{\\sqrt x}{y^3}\\right) $$ Combine fractions, operators and parentheses: Output \\[ \\left(\\frac{\\left(\\sqrt{\\frac{73^2}{12x}}\\sqrt{\\frac{x|x|}{\\log_x}}\\right)}{\\sqrt[3]{\\frac xy}}\\right) \\] Markdown $$ \\left(\\frac{\\left(\\sqrt{\\frac{73^2}{12x}}\\sqrt{\\frac{x|x|}{\\log_x}}\\right)}{\\sqrt[3]{\\frac xy}}\\right) $$","title":"Parentheses"},{"location":"tutorials/markdown/formulas/#system-of-equations-formulas-and-functions","text":"Use cases to create systems of equations or functions definitions by cases (piecewise functions). Output \\[ f(n) = \\begin{cases} n/2, & \\text{if $n$ is even} \\\\ 3n+1, & \\text{if $n$ is odd} \\end{cases} \\] Markdown $$ f(n) = \\begin{cases} n/2, & \\text{if $n$ is even} \\\\ 3n+1, & \\text{if $n$ is odd} \\end{cases} $$ Aligned systems of formulas using \\begin{align} and \\end{align} Output \\[ \\begin{align} \\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} & = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\ \\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\ \\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\ \\nabla \\cdot \\vec{\\mathbf{B}} & = 0 \\end{align} \\] Markdown $$ \\begin{align} \\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} & = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\ \\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\ \\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\ \\nabla \\cdot \\vec{\\mathbf{B}} & = 0 \\end{align} $$ In order to create system of quations use \\begin{array} , \\end{array} together with \\left\\{ and \\right Output \\[ \\left\\{ \\begin{array}{c} a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\ a_3x+b_3y+c_3z=d_3 \\end{array} \\right. \\] Markdown $$ \\left\\{ \\begin{array}{c} a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\ a_3x+b_3y+c_3z=d_3 \\end{array} \\right. $$ System of equations Output Alternative way to produce system of equations \\[ \\begin{cases} a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\ a_3x+b_3y+c_3z=d_3 \\end{cases} \\] To align the = signs use \\begin{aligned} and \\end{aligned} together with \\left\\{ and \\right \\[ \\left\\{ \\begin{aligned} a_1x+b_1y+c_1z &=d_1+e_1 \\\\ a_2x+b_2y&=d_2 \\\\ a_3x+b_3y+c_3z &=d_3 \\end{aligned} \\right. \\] Use \\begin{array}{ll} to align everything left \\[ \\left\\{ \\begin{array}{ll} a_1x+b_1y+c_1z &=d_1+e_1 \\\\ a_2x+b_2y &=d_2 \\\\ a_3x+b_3y+c_3z &=d_3 \\end{array} \\right. \\] Use \\\\[2ex] to create larger vertical spaces between equations \\[ \\begin{cases} a_1x+b_1y+c_1z=\\frac{p_1}{q_1} \\\\[2ex] a_2x+b_2y+c_2z=\\frac{p_2}{q_2} \\\\[2ex] a_3x+b_3y+c_3z=\\frac{p_3}{q_3} \\end{cases} \\] Markdown Alternative way to produce system of equations $$ \\begin{cases} a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\ a_3x+b_3y+c_3z=d_3 \\end{cases} $$ To align the ```=``` signs use ```\\begin{aligned}``` and ```\\end{aligned}``` together with ```\\left\\{``` and ```\\right``` $$ \\left\\{ \\begin{aligned} a_1x+b_1y+c_1z &=d_1+e_1 \\\\ a_2x+b_2y&=d_2 \\\\ a_3x+b_3y+c_3z &=d_3 \\end{aligned} \\right. $$ Use ```\\begin{array}{ll}``` to align everything left $$ \\left\\{ \\begin{array}{ll} a_1x+b_1y+c_1z &=d_1+e_1 \\\\ a_2x+b_2y &=d_2 \\\\ a_3x+b_3y+c_3z &=d_3 \\end{array} \\right. $$ Use ```\\\\[2ex]``` to create larger vertical spaces between equations $$ \\begin{cases} a_1x+b_1y+c_1z=\\frac{p_1}{q_1} \\\\[2ex] a_2x+b_2y+c_2z=\\frac{p_2}{q_2} \\\\[2ex] a_3x+b_3y+c_3z=\\frac{p_3}{q_3} \\end{cases} $$","title":"System of equations, formulas and functions"},{"location":"tutorials/markdown/formulas/#matrices","text":"In order to create matrixes use $$\\begin{matrix}\u2026\\end{matrix}$$ , in between the \\begin and \\end , put the matrix elements. End each matrix row with \\\\ , and separate matrix elements with & Output \\[ \\begin{matrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{matrix} \\] Markdown $$ \\begin{matrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{matrix} $$ Advanced matrix notations Output To add brackets use {pmatrix} , {bmatrix} , {Bmatrix} , {vmatrix} . With {pmatrix} \\[ \\begin{pmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{pmatrix} \\] With {bmatrix} \\[ \\begin{bmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{bmatrix} \\] With {Bmatrix} \\[ \\begin{Bmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{Bmatrix} \\] With {Vmatrix} \\[ \\begin{vmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{vmatrix} \\] With vertical line \\[ \\left[ \\begin{array}{cc|c} 1&2&3\\\\ 4&5&6 \\end{array} \\right] \\] With horizontal line \\[ \\begin{pmatrix} a & b\\\\ c & d\\\\ \\hline 1 & 0\\\\ 0 & 1 \\end{pmatrix} \\] Use \\cdots for \u22ef , \\ddots for \u22f1 and \\vdots for \u22ee when you want to omit some of the entries: \\[ \\begin{vmatrix} 1 & x & \\cdots & x^2 \\\\ 1 & y & \\cdots & y^2 \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 1 & z & \\cdots & z^2 \\\\ \\end{vmatrix} \\] Markdown To add brackets use ```{pmatrix}```, ```{bmatrix}```, ```{Bmatrix}```, ```{vmatrix}```. With ```{pmatrix}``` $$ \\begin{pmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{pmatrix} $$ With ```{bmatrix}``` $$ \\begin{bmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{bmatrix} $$ With ```{Bmatrix}``` $$ \\begin{Bmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{Bmatrix} $$ With ```{Vmatrix}``` $$ \\begin{vmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{vmatrix} $$ With vertical line $$ \\left[ \\begin{array}{cc|c} 1&2&3\\\\ 4&5&6 \\end{array} \\right] $$ With horizontal line $$ \\begin{pmatrix} a & b\\\\ c & d\\\\ \\hline 1 & 0\\\\ 0 & 1 \\end{pmatrix} $$ Use ```\\cdots``` for **\u22ef**, ```\\ddots``` for **\u22f1** and ```\\vdots``` for **\u22ee** when you want to omit some of the entries: $$ \\begin{vmatrix} 1 & x & \\cdots & x^2 \\\\ 1 & y & \\cdots & y^2 \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 1 & z & \\cdots & z^2 \\\\ \\end{vmatrix} $$","title":"Matrices"},{"location":"tutorials/markdown/hack-markdown/","text":"/* Remove TOC on this page */ .md-sidebar.md-sidebar--secondary { display: none; } Info In most cases, you will not use the features described in this section, and you can skip them. This section was added to demonstrate that you will be not limited by standard or even Extended Markdown. If you stumble upon the limitations of Markdown, you can use raw HTML, CSS, and even Javascript directly in your Markdown documents, greatly extending its functionality. This section might convince you that Markdown (using MkDocs-MagicSpace) is the right choice to start. Because even if you hit the limitations of the extended Markdown sometime in the future, you will be able to solve it without the need to remake everything using another technology Attribute lists The Attribute Lists adds the ability to apply CSS styles to Markdown elemennts. It is very easy and convenient way to go beyond standard Markdown. In order to apply attributes add block with {curly braces} after the element, use it to specify class names or css styles. For example, text customized using attribute list Example Output Do you know the difference between a car salesperson and a software salesperson? The car salesperson knows when they're lying. Markdown ``` Do you know the difference between a car salesperson and a software salesperson? The car salesperson knows when they're lying. ```{style=\"background-color: black; color: white\"} If you are using MkDocs-MagicSpace, MkDocs material theme is set up and you can style a link to another website to look like a button with Material design. You just need to list classes that should be applied to the link Style link as button Output Visit our Github page Markdown [Visit our Github page :fontawesome-brands-github-alt:](hhttps://github.com/bluxmit/alnoda-workspaces){ .md-button .md-button--primary } HTML & CSS inside Markdown You can use HTML and CSS directly inside your Markdown document mixing them all together. This gives you the great power! Now we can style the text as much as we want Styling text Output Microsoft is working on software for self-driving vehicles I can't wait until my car suddenly stops in the middle of the highway and reboots to install updates. Markdown <span style=\"font-family: serif; color: #f59842; font-size: 1.2rem;\">Microsoft is working on software for self-driving vehicles</span></br> <span style=\"font-family: serif; color: teal; font-size: 0.8rem;\">I can't wait until my car suddenly stops in the middle of the highway and reboots to install updates.</span> A good idea is to combine HTML + CSS with Attribut lists. You can define CSS for some class in the <style> tag, and apply it many times to different obbjects. @keyframes heart { 0%, 40%, 80%, 100% { transform: scale(1); } 20%, 60% { transform: scale(1.15); } } .heart { animation: heart 1000ms infinite; color: red; font-size: 2em; } Animated icon Output Markdown <style> @keyframes heart { 0%, 40%, 80%, 100% { transform: scale(1); } 20%, 60% { transform: scale(1.15); } } .heart { animation: heart 1000ms infinite; color: red; font-size: 2em; } </style> :octicons-heart-fill-24:{ .heart } :octicons-heart-fill-24:{ .heart } :octicons-heart-fill-24:{ .heart } Markdown inside HTML & CSS By default, Markdown ignores any content within a raw HTML block-level element. But MkDocs MagicSpace has lots of plugins and extensions installed, so this is not a problem! The content of a raw HTML block-level element can be parsed as Markdown by including a markdown attribute on the opening tag. For example, the checklist is left-centered: One Two Three Let's make it middle-centered by wrapping in the HTML Markdown within HTML Output One Two Three Markdown <div style=\"display: flex; justify-content: center;\" markdown=\"block\"> - [X] One - [X] Two - [ ] Three </div> You can find more information about Markdown within HTML in this document Modify MkDocs pages You can use CSS to modify any MkDocs document page, for example, remove components you don't like. For instance, the Table of Content (TOC), which you can see on other pages was, removed from this page by adding the following snippet of code directly to the Markdown < style > /* Remove TOC on this page */ . md-sidebar . md-sidebar--secondary { display : none ; } </ style > Hint There is a bettter way to remove TOC or navigation from any page - using metadata in the beginning of the page --- hide: - navigation - toc --- Go full crazy Finally, you can include very sophisticated HTML, CSS and even Javascript code inside your Markdown documents .wrapper { margin-top: 50px; margin-bottom: 5px; background-color: #ffc32b; width: 100%; height: 600px; border-radius: 5px; } .container { width: 300px; height: 280px; position: relative; top: calc(50% - 140px); left: calc(50% - 150px); } .coffee-header { width: 100%; height: 80px; position: absolute; top: 0; left: 0; background-color: #ddcfcc; border-radius: 10px; } .coffee-header__buttons { width: 25px; height: 25px; position: absolute; top: 25px; background-color: #282323; border-radius: 50%; } .coffee-header__buttons::after { content: \"\"; width: 8px; height: 8px; position: absolute; bottom: -8px; left: calc(50% - 4px); background-color: #615e5e; } .coffee-header__button-one { left: 15px; } .coffee-header__button-two { left: 50px; } .coffee-header__display { width: 50px; height: 50px; position: absolute; top: calc(50% - 25px); left: calc(50% - 25px); border-radius: 50%; background-color: #9acfc5; border: 5px solid #43beae; box-sizing: border-box; } .coffee-header__details { width: 8px; height: 20px; position: absolute; top: 10px; right: 10px; background-color: #9b9091; box-shadow: -12px 0 0 #9b9091, -24px 0 0 #9b9091; } .coffee-medium { width: 90%; height: 160px; position: absolute; top: 80px; left: calc(50% - 45%); background-color: #bcb0af; } .coffee-medium:before { content: \"\"; width: 90%; height: 100px; background-color: #776f6e; position: absolute; bottom: 0; left: calc(50% - 45%); border-radius: 20px 20px 0 0; } .coffe-medium__exit { width: 60px; height: 20px; position: absolute; top: 0; left: calc(50% - 30px); background-color: #231f20; } .coffe-medium__exit::before { content: \"\"; width: 50px; height: 20px; border-radius: 0 0 50% 50%; position: absolute; bottom: -20px; left: calc(50% - 25px); background-color: #231f20; } .coffe-medium__exit::after { content: \"\"; width: 10px; height: 10px; position: absolute; bottom: -30px; left: calc(50% - 5px); background-color: #231f20; } .coffee-medium__arm { width: 70px; height: 20px; position: absolute; top: 15px; right: 25px; background-color: #231f20; } .coffee-medium__arm::before { content: \"\"; width: 15px; height: 5px; position: absolute; top: 7px; left: -15px; background-color: #9e9495; } .coffee-medium__cup { width: 80px; height: 47px; position: absolute; bottom: 0; left: calc(50% - 40px); background-color: #FFF; border-radius: 0 0 70px 70px / 0 0 110px 110px; } .coffee-medium__cup::after { content: \"\"; width: 20px; height: 20px; position: absolute; top: 6px; right: -13px; border: 5px solid #FFF; border-radius: 50%; } @keyframes liquid { 0% { height: 0px; opacity: 1; } 5% { height: 0px; opacity: 1; } 20% { height: 62px; opacity: 1; } 95% { height: 62px; opacity: 1; } 100% { height: 62px; opacity: 0; } } .coffee-medium__liquid { width: 6px; height: 63px; opacity: 0; position: absolute; top: 50px; left: calc(50% - 3px); background-color: #74372b; animation: liquid 4s 4s linear infinite; } .coffee-medium__smoke { width: 8px; height: 20px; position: absolute; border-radius: 5px; background-color: #b3aeae; } @keyframes smokeOne { 0% { bottom: 20px; opacity: 0; } 40% { bottom: 50px; opacity: .5; } 80% { bottom: 80px; opacity: .3; } 100% { bottom: 80px; opacity: 0; } } @keyframes smokeTwo { 0% { bottom: 40px; opacity: 0; } 40% { bottom: 70px; opacity: .5; } 80% { bottom: 80px; opacity: .3; } 100% { bottom: 80px; opacity: 0; } } .coffee-medium__smoke-one { opacity: 0; bottom: 50px; left: 102px; animation: smokeOne 3s 4s linear infinite; } .coffee-medium__smoke-two { opacity: 0; bottom: 70px; left: 118px; animation: smokeTwo 3s 5s linear infinite; } .coffee-medium__smoke-three { opacity: 0; bottom: 65px; right: 118px; animation: smokeTwo 3s 6s linear infinite; } .coffee-medium__smoke-for { opacity: 0; bottom: 50px; right: 102px; animation: smokeOne 3s 5s linear infinite; } .coffee-footer { width: 95%; height: 15px; position: absolute; bottom: 25px; left: calc(50% - 47.5%); background-color: #41bdad; border-radius: 10px; } .coffee-footer::after { content: \"\"; width: 106%; height: 26px; position: absolute; bottom: -25px; left: -8px; background-color: #000; } .author { font-style: italic; text-align: right; color: grey; font-size: 0.6rem; font-family: serif; } Author: Henrique Rodrigues (August 31, 2018) Show the code <style> .wrapper { margin-top: 50px; margin-bottom: 5px; background-color: #ffc32b; width: 100%; height: 600px; border-radius: 5px; } .container { width: 300px; height: 280px; position: relative; top: calc(50% - 140px); left: calc(50% - 150px); } .coffee-header { width: 100%; height: 80px; position: absolute; top: 0; left: 0; background-color: #ddcfcc; border-radius: 10px; } .coffee-header__buttons { width: 25px; height: 25px; position: absolute; top: 25px; background-color: #282323; border-radius: 50%; } .coffee-header__buttons::after { content: \"\"; width: 8px; height: 8px; position: absolute; bottom: -8px; left: calc(50% - 4px); background-color: #615e5e; } .coffee-header__button-one { left: 15px; } .coffee-header__button-two { left: 50px; } .coffee-header__display { width: 50px; height: 50px; position: absolute; top: calc(50% - 25px); left: calc(50% - 25px); border-radius: 50%; background-color: #9acfc5; border: 5px solid #43beae; box-sizing: border-box; } .coffee-header__details { width: 8px; height: 20px; position: absolute; top: 10px; right: 10px; background-color: #9b9091; box-shadow: -12px 0 0 #9b9091, -24px 0 0 #9b9091; } .coffee-medium { width: 90%; height: 160px; position: absolute; top: 80px; left: calc(50% - 45%); background-color: #bcb0af; } .coffee-medium:before { content: \"\"; width: 90%; height: 100px; background-color: #776f6e; position: absolute; bottom: 0; left: calc(50% - 45%); border-radius: 20px 20px 0 0; } .coffe-medium__exit { width: 60px; height: 20px; position: absolute; top: 0; left: calc(50% - 30px); background-color: #231f20; } .coffe-medium__exit::before { content: \"\"; width: 50px; height: 20px; border-radius: 0 0 50% 50%; position: absolute; bottom: -20px; left: calc(50% - 25px); background-color: #231f20; } .coffe-medium__exit::after { content: \"\"; width: 10px; height: 10px; position: absolute; bottom: -30px; left: calc(50% - 5px); background-color: #231f20; } .coffee-medium__arm { width: 70px; height: 20px; position: absolute; top: 15px; right: 25px; background-color: #231f20; } .coffee-medium__arm::before { content: \"\"; width: 15px; height: 5px; position: absolute; top: 7px; left: -15px; background-color: #9e9495; } .coffee-medium__cup { width: 80px; height: 47px; position: absolute; bottom: 0; left: calc(50% - 40px); background-color: #FFF; border-radius: 0 0 70px 70px / 0 0 110px 110px; } .coffee-medium__cup::after { content: \"\"; width: 20px; height: 20px; position: absolute; top: 6px; right: -13px; border: 5px solid #FFF; border-radius: 50%; } @keyframes liquid { 0% { height: 0px; opacity: 1; } 5% { height: 0px; opacity: 1; } 20% { height: 62px; opacity: 1; } 95% { height: 62px; opacity: 1; } 100% { height: 62px; opacity: 0; } } .coffee-medium__liquid { width: 6px; height: 63px; opacity: 0; position: absolute; top: 50px; left: calc(50% - 3px); background-color: #74372b; animation: liquid 4s 4s linear infinite; } .coffee-medium__smoke { width: 8px; height: 20px; position: absolute; border-radius: 5px; background-color: #b3aeae; } @keyframes smokeOne { 0% { bottom: 20px; opacity: 0; } 40% { bottom: 50px; opacity: .5; } 80% { bottom: 80px; opacity: .3; } 100% { bottom: 80px; opacity: 0; } } @keyframes smokeTwo { 0% { bottom: 40px; opacity: 0; } 40% { bottom: 70px; opacity: .5; } 80% { bottom: 80px; opacity: .3; } 100% { bottom: 80px; opacity: 0; } } .coffee-medium__smoke-one { opacity: 0; bottom: 50px; left: 102px; animation: smokeOne 3s 4s linear infinite; } .coffee-medium__smoke-two { opacity: 0; bottom: 70px; left: 118px; animation: smokeTwo 3s 5s linear infinite; } .coffee-medium__smoke-three { opacity: 0; bottom: 65px; right: 118px; animation: smokeTwo 3s 6s linear infinite; } .coffee-medium__smoke-for { opacity: 0; bottom: 50px; right: 102px; animation: smokeOne 3s 5s linear infinite; } .coffee-footer { width: 95%; height: 15px; position: absolute; bottom: 25px; left: calc(50% - 47.5%); background-color: #41bdad; border-radius: 10px; } .coffee-footer::after { content: \"\"; width: 106%; height: 26px; position: absolute; bottom: -25px; left: -8px; background-color: #000; } .author { font-style: italic; text-align: right; color: grey; font-size: 0.6rem; font-family: serif; } </style> <div class=\"wrapper\"> <div class=\"container\"> <div class=\"coffee-header\"> <div class=\"coffee-header__buttons coffee-header__button-one\"></div> <div class=\"coffee-header__buttons coffee-header__button-two\"></div> <div class=\"coffee-header__display\"></div> <div class=\"coffee-header__details\"></div> </div> <div class=\"coffee-medium\"> <div class=\"coffe-medium__exit\"></div> <div class=\"coffee-medium__arm\"></div> <div class=\"coffee-medium__liquid\"></div> <div class=\"coffee-medium__smoke coffee-medium__smoke-one\"></div> <div class=\"coffee-medium__smoke coffee-medium__smoke-two\"></div> <div class=\"coffee-medium__smoke coffee-medium__smoke-three\"></div> <div class=\"coffee-medium__smoke coffee-medium__smoke-for\"></div> <div class=\"coffee-medium__cup\"></div> </div> <div class=\"coffee-footer\"></div> </div> </div> <div class=\"author\"> Author: Henrique Rodrigues (August 31, 2018) </div>","title":"Hack the markdown"},{"location":"tutorials/markdown/hack-markdown/#attribute-lists","text":"The Attribute Lists adds the ability to apply CSS styles to Markdown elemennts. It is very easy and convenient way to go beyond standard Markdown. In order to apply attributes add block with {curly braces} after the element, use it to specify class names or css styles. For example, text customized using attribute list Example Output Do you know the difference between a car salesperson and a software salesperson? The car salesperson knows when they're lying. Markdown ``` Do you know the difference between a car salesperson and a software salesperson? The car salesperson knows when they're lying. ```{style=\"background-color: black; color: white\"} If you are using MkDocs-MagicSpace, MkDocs material theme is set up and you can style a link to another website to look like a button with Material design. You just need to list classes that should be applied to the link Style link as button Output Visit our Github page Markdown [Visit our Github page :fontawesome-brands-github-alt:](hhttps://github.com/bluxmit/alnoda-workspaces){ .md-button .md-button--primary }","title":"Attribute lists"},{"location":"tutorials/markdown/hack-markdown/#html-css-inside-markdown","text":"You can use HTML and CSS directly inside your Markdown document mixing them all together. This gives you the great power! Now we can style the text as much as we want Styling text Output Microsoft is working on software for self-driving vehicles I can't wait until my car suddenly stops in the middle of the highway and reboots to install updates. Markdown <span style=\"font-family: serif; color: #f59842; font-size: 1.2rem;\">Microsoft is working on software for self-driving vehicles</span></br> <span style=\"font-family: serif; color: teal; font-size: 0.8rem;\">I can't wait until my car suddenly stops in the middle of the highway and reboots to install updates.</span> A good idea is to combine HTML + CSS with Attribut lists. You can define CSS for some class in the <style> tag, and apply it many times to different obbjects. @keyframes heart { 0%, 40%, 80%, 100% { transform: scale(1); } 20%, 60% { transform: scale(1.15); } } .heart { animation: heart 1000ms infinite; color: red; font-size: 2em; } Animated icon Output Markdown <style> @keyframes heart { 0%, 40%, 80%, 100% { transform: scale(1); } 20%, 60% { transform: scale(1.15); } } .heart { animation: heart 1000ms infinite; color: red; font-size: 2em; } </style> :octicons-heart-fill-24:{ .heart } :octicons-heart-fill-24:{ .heart } :octicons-heart-fill-24:{ .heart }","title":"HTML &amp; CSS inside Markdown"},{"location":"tutorials/markdown/hack-markdown/#markdown-inside-html-css","text":"By default, Markdown ignores any content within a raw HTML block-level element. But MkDocs MagicSpace has lots of plugins and extensions installed, so this is not a problem! The content of a raw HTML block-level element can be parsed as Markdown by including a markdown attribute on the opening tag. For example, the checklist is left-centered: One Two Three Let's make it middle-centered by wrapping in the HTML Markdown within HTML Output One Two Three Markdown <div style=\"display: flex; justify-content: center;\" markdown=\"block\"> - [X] One - [X] Two - [ ] Three </div> You can find more information about Markdown within HTML in this document","title":"Markdown inside HTML &amp; CSS"},{"location":"tutorials/markdown/hack-markdown/#modify-mkdocs-pages","text":"You can use CSS to modify any MkDocs document page, for example, remove components you don't like. For instance, the Table of Content (TOC), which you can see on other pages was, removed from this page by adding the following snippet of code directly to the Markdown < style > /* Remove TOC on this page */ . md-sidebar . md-sidebar--secondary { display : none ; } </ style > Hint There is a bettter way to remove TOC or navigation from any page - using metadata in the beginning of the page --- hide: - navigation - toc ---","title":"Modify MkDocs pages"},{"location":"tutorials/markdown/hack-markdown/#go-full-crazy","text":"Finally, you can include very sophisticated HTML, CSS and even Javascript code inside your Markdown documents .wrapper { margin-top: 50px; margin-bottom: 5px; background-color: #ffc32b; width: 100%; height: 600px; border-radius: 5px; } .container { width: 300px; height: 280px; position: relative; top: calc(50% - 140px); left: calc(50% - 150px); } .coffee-header { width: 100%; height: 80px; position: absolute; top: 0; left: 0; background-color: #ddcfcc; border-radius: 10px; } .coffee-header__buttons { width: 25px; height: 25px; position: absolute; top: 25px; background-color: #282323; border-radius: 50%; } .coffee-header__buttons::after { content: \"\"; width: 8px; height: 8px; position: absolute; bottom: -8px; left: calc(50% - 4px); background-color: #615e5e; } .coffee-header__button-one { left: 15px; } .coffee-header__button-two { left: 50px; } .coffee-header__display { width: 50px; height: 50px; position: absolute; top: calc(50% - 25px); left: calc(50% - 25px); border-radius: 50%; background-color: #9acfc5; border: 5px solid #43beae; box-sizing: border-box; } .coffee-header__details { width: 8px; height: 20px; position: absolute; top: 10px; right: 10px; background-color: #9b9091; box-shadow: -12px 0 0 #9b9091, -24px 0 0 #9b9091; } .coffee-medium { width: 90%; height: 160px; position: absolute; top: 80px; left: calc(50% - 45%); background-color: #bcb0af; } .coffee-medium:before { content: \"\"; width: 90%; height: 100px; background-color: #776f6e; position: absolute; bottom: 0; left: calc(50% - 45%); border-radius: 20px 20px 0 0; } .coffe-medium__exit { width: 60px; height: 20px; position: absolute; top: 0; left: calc(50% - 30px); background-color: #231f20; } .coffe-medium__exit::before { content: \"\"; width: 50px; height: 20px; border-radius: 0 0 50% 50%; position: absolute; bottom: -20px; left: calc(50% - 25px); background-color: #231f20; } .coffe-medium__exit::after { content: \"\"; width: 10px; height: 10px; position: absolute; bottom: -30px; left: calc(50% - 5px); background-color: #231f20; } .coffee-medium__arm { width: 70px; height: 20px; position: absolute; top: 15px; right: 25px; background-color: #231f20; } .coffee-medium__arm::before { content: \"\"; width: 15px; height: 5px; position: absolute; top: 7px; left: -15px; background-color: #9e9495; } .coffee-medium__cup { width: 80px; height: 47px; position: absolute; bottom: 0; left: calc(50% - 40px); background-color: #FFF; border-radius: 0 0 70px 70px / 0 0 110px 110px; } .coffee-medium__cup::after { content: \"\"; width: 20px; height: 20px; position: absolute; top: 6px; right: -13px; border: 5px solid #FFF; border-radius: 50%; } @keyframes liquid { 0% { height: 0px; opacity: 1; } 5% { height: 0px; opacity: 1; } 20% { height: 62px; opacity: 1; } 95% { height: 62px; opacity: 1; } 100% { height: 62px; opacity: 0; } } .coffee-medium__liquid { width: 6px; height: 63px; opacity: 0; position: absolute; top: 50px; left: calc(50% - 3px); background-color: #74372b; animation: liquid 4s 4s linear infinite; } .coffee-medium__smoke { width: 8px; height: 20px; position: absolute; border-radius: 5px; background-color: #b3aeae; } @keyframes smokeOne { 0% { bottom: 20px; opacity: 0; } 40% { bottom: 50px; opacity: .5; } 80% { bottom: 80px; opacity: .3; } 100% { bottom: 80px; opacity: 0; } } @keyframes smokeTwo { 0% { bottom: 40px; opacity: 0; } 40% { bottom: 70px; opacity: .5; } 80% { bottom: 80px; opacity: .3; } 100% { bottom: 80px; opacity: 0; } } .coffee-medium__smoke-one { opacity: 0; bottom: 50px; left: 102px; animation: smokeOne 3s 4s linear infinite; } .coffee-medium__smoke-two { opacity: 0; bottom: 70px; left: 118px; animation: smokeTwo 3s 5s linear infinite; } .coffee-medium__smoke-three { opacity: 0; bottom: 65px; right: 118px; animation: smokeTwo 3s 6s linear infinite; } .coffee-medium__smoke-for { opacity: 0; bottom: 50px; right: 102px; animation: smokeOne 3s 5s linear infinite; } .coffee-footer { width: 95%; height: 15px; position: absolute; bottom: 25px; left: calc(50% - 47.5%); background-color: #41bdad; border-radius: 10px; } .coffee-footer::after { content: \"\"; width: 106%; height: 26px; position: absolute; bottom: -25px; left: -8px; background-color: #000; } .author { font-style: italic; text-align: right; color: grey; font-size: 0.6rem; font-family: serif; } Author: Henrique Rodrigues (August 31, 2018) Show the code <style> .wrapper { margin-top: 50px; margin-bottom: 5px; background-color: #ffc32b; width: 100%; height: 600px; border-radius: 5px; } .container { width: 300px; height: 280px; position: relative; top: calc(50% - 140px); left: calc(50% - 150px); } .coffee-header { width: 100%; height: 80px; position: absolute; top: 0; left: 0; background-color: #ddcfcc; border-radius: 10px; } .coffee-header__buttons { width: 25px; height: 25px; position: absolute; top: 25px; background-color: #282323; border-radius: 50%; } .coffee-header__buttons::after { content: \"\"; width: 8px; height: 8px; position: absolute; bottom: -8px; left: calc(50% - 4px); background-color: #615e5e; } .coffee-header__button-one { left: 15px; } .coffee-header__button-two { left: 50px; } .coffee-header__display { width: 50px; height: 50px; position: absolute; top: calc(50% - 25px); left: calc(50% - 25px); border-radius: 50%; background-color: #9acfc5; border: 5px solid #43beae; box-sizing: border-box; } .coffee-header__details { width: 8px; height: 20px; position: absolute; top: 10px; right: 10px; background-color: #9b9091; box-shadow: -12px 0 0 #9b9091, -24px 0 0 #9b9091; } .coffee-medium { width: 90%; height: 160px; position: absolute; top: 80px; left: calc(50% - 45%); background-color: #bcb0af; } .coffee-medium:before { content: \"\"; width: 90%; height: 100px; background-color: #776f6e; position: absolute; bottom: 0; left: calc(50% - 45%); border-radius: 20px 20px 0 0; } .coffe-medium__exit { width: 60px; height: 20px; position: absolute; top: 0; left: calc(50% - 30px); background-color: #231f20; } .coffe-medium__exit::before { content: \"\"; width: 50px; height: 20px; border-radius: 0 0 50% 50%; position: absolute; bottom: -20px; left: calc(50% - 25px); background-color: #231f20; } .coffe-medium__exit::after { content: \"\"; width: 10px; height: 10px; position: absolute; bottom: -30px; left: calc(50% - 5px); background-color: #231f20; } .coffee-medium__arm { width: 70px; height: 20px; position: absolute; top: 15px; right: 25px; background-color: #231f20; } .coffee-medium__arm::before { content: \"\"; width: 15px; height: 5px; position: absolute; top: 7px; left: -15px; background-color: #9e9495; } .coffee-medium__cup { width: 80px; height: 47px; position: absolute; bottom: 0; left: calc(50% - 40px); background-color: #FFF; border-radius: 0 0 70px 70px / 0 0 110px 110px; } .coffee-medium__cup::after { content: \"\"; width: 20px; height: 20px; position: absolute; top: 6px; right: -13px; border: 5px solid #FFF; border-radius: 50%; } @keyframes liquid { 0% { height: 0px; opacity: 1; } 5% { height: 0px; opacity: 1; } 20% { height: 62px; opacity: 1; } 95% { height: 62px; opacity: 1; } 100% { height: 62px; opacity: 0; } } .coffee-medium__liquid { width: 6px; height: 63px; opacity: 0; position: absolute; top: 50px; left: calc(50% - 3px); background-color: #74372b; animation: liquid 4s 4s linear infinite; } .coffee-medium__smoke { width: 8px; height: 20px; position: absolute; border-radius: 5px; background-color: #b3aeae; } @keyframes smokeOne { 0% { bottom: 20px; opacity: 0; } 40% { bottom: 50px; opacity: .5; } 80% { bottom: 80px; opacity: .3; } 100% { bottom: 80px; opacity: 0; } } @keyframes smokeTwo { 0% { bottom: 40px; opacity: 0; } 40% { bottom: 70px; opacity: .5; } 80% { bottom: 80px; opacity: .3; } 100% { bottom: 80px; opacity: 0; } } .coffee-medium__smoke-one { opacity: 0; bottom: 50px; left: 102px; animation: smokeOne 3s 4s linear infinite; } .coffee-medium__smoke-two { opacity: 0; bottom: 70px; left: 118px; animation: smokeTwo 3s 5s linear infinite; } .coffee-medium__smoke-three { opacity: 0; bottom: 65px; right: 118px; animation: smokeTwo 3s 6s linear infinite; } .coffee-medium__smoke-for { opacity: 0; bottom: 50px; right: 102px; animation: smokeOne 3s 5s linear infinite; } .coffee-footer { width: 95%; height: 15px; position: absolute; bottom: 25px; left: calc(50% - 47.5%); background-color: #41bdad; border-radius: 10px; } .coffee-footer::after { content: \"\"; width: 106%; height: 26px; position: absolute; bottom: -25px; left: -8px; background-color: #000; } .author { font-style: italic; text-align: right; color: grey; font-size: 0.6rem; font-family: serif; } </style> <div class=\"wrapper\"> <div class=\"container\"> <div class=\"coffee-header\"> <div class=\"coffee-header__buttons coffee-header__button-one\"></div> <div class=\"coffee-header__buttons coffee-header__button-two\"></div> <div class=\"coffee-header__display\"></div> <div class=\"coffee-header__details\"></div> </div> <div class=\"coffee-medium\"> <div class=\"coffe-medium__exit\"></div> <div class=\"coffee-medium__arm\"></div> <div class=\"coffee-medium__liquid\"></div> <div class=\"coffee-medium__smoke coffee-medium__smoke-one\"></div> <div class=\"coffee-medium__smoke coffee-medium__smoke-two\"></div> <div class=\"coffee-medium__smoke coffee-medium__smoke-three\"></div> <div class=\"coffee-medium__smoke coffee-medium__smoke-for\"></div> <div class=\"coffee-medium__cup\"></div> </div> <div class=\"coffee-footer\"></div> </div> </div> <div class=\"author\"> Author: Henrique Rodrigues (August 31, 2018) </div>","title":"Go full crazy"},{"location":"tutorials/markdown/highlight-what-matters/","text":"Blockquotes Blockquotes can be created by using symbol > at the start of the line. For example the following markdown > In order to understand recursion, one must first understand recursion. outputs In order to understand recursion, one must first understand recursion. Of course, you can write multiple lines in the blockquote Multiline Blockquote - option 1 Output Measuring programming progress by lines of code is like measuring aircraft building progress by weight Bill Gates (co-founder of Microsoft) Markdown > Measuring programming progress by lines of code is like measuring aircraft building progress by weight > **Bill Gates (co-founder of Microsoft)** Starting every new line with > can be cumbersome, especially if you need to make line breaks Multiline Blockquote option 2 Output If Internet Explorer is brave enough to ask to be your default browser, you should be brave enough to ask that girl out. Markdown > ``` If Internet Explorer is brave enough to ask to be your default browser, you should be brave enough to ask that girl out. ``` Admonitions Admonition is an extension to Markdown that looks shiny and attractive. Admonitions are created with the following syntax: !!! type \"Title of Admonition\" Something importatnt you want to highlight! outputs this Title of Admonition Something importatnt you want to highlight! Admonition without text in the header The following markdown snippet !!! note Admonition without text in the header outputs this Note Admonition without text in the header Admonition without header The following markdown snippet !!! note \"\" Admonition without header outputs this Admonition without header Admonition with text and code Include any code block directly inside the Admonition !!! note In Python we use indentation instead of curly braces: ```python i = 1 while i < 6: print(i) if i == 3: break i += 1 ``` If indentation is wrong, the python code will fail to execute The result will look like this Note In Python we use indentation instead of curly braces: i = 1 while i < 6 : print ( i ) if i == 3 : break i += 1 If indentation is incorrect, the python code will fail to execute Collapsible Admonition Start Admonition with ??? ??? type \"Python generator example\" A generator function that yields ints is secretly just a function that returns an iterator of ints, so that's how we annotate it ``` python def g(n: int) -> Iterator[int]: i = 0 while i < n: yield i i += 1 ``` Result - collapsible Admonnition Python generator function example A generator function that yields ints is secretly just a function that returns an iterator of ints, so that's how we annotate it def g ( n : int ) -> Iterator [ int ]: i = 0 while i < n : yield i i += 1 Nested Admonition You can create Admonitions inside other Admonitions ??? note \"Open styled details\" ??? danger \"Nested details!\" And more content again. Looking like this Open styled details Nested details! And more content again. Admonitions with tabs Using tabs inside Admonitions can be handy Recursion in markdown Output Recursion in markdown Output return True Markdown #!py3 return True Markdown !!! example \"Recursion in markdown\" === \"Output\" `#!py3 return True` === \"Markdown\" ` #!py3 return True ` Admonition types There are numerous Admonition types that you can use to make important text stand out. Every Admonition starts with the type keyword following after !!! or ??? For example, Admonition of info type !!! info The wood frog can hold its pee for up to eight months. looks like this Info The wood frog can hold its pee for up to eight months. Other Admonition types: summary , abstract , tldr Tldr went looking for myself and came back empty handed tip , hint , important Tip If you get a loan at a bank, you will be paying for it 30 years. If you rob a bank you will be out in just 10 success , check , done Success Monday 12:30. I finally came to office and had my first cup of coffee question , help , faq Question How far of a drive is it from Miami to Florida? warning , caution , attention Warning Don't feed the Dragons! They are on a strict diet. failure , fail , missing Failure I made Jusus shaped cookies but I burnt them danger , error Error ErrorReporter stopped working bug Bug A ladybird bug can eat 5,000 insects in its whole lifetime example Example Unlike humans, bees can make collaborative decisions quote , cite Quote Always remember that you are absolutely unique. Just like everyone else","title":"Highlight with blockquotes and admonitions"},{"location":"tutorials/markdown/highlight-what-matters/#blockquotes","text":"Blockquotes can be created by using symbol > at the start of the line. For example the following markdown > In order to understand recursion, one must first understand recursion. outputs In order to understand recursion, one must first understand recursion. Of course, you can write multiple lines in the blockquote Multiline Blockquote - option 1 Output Measuring programming progress by lines of code is like measuring aircraft building progress by weight Bill Gates (co-founder of Microsoft) Markdown > Measuring programming progress by lines of code is like measuring aircraft building progress by weight > **Bill Gates (co-founder of Microsoft)** Starting every new line with > can be cumbersome, especially if you need to make line breaks Multiline Blockquote option 2 Output If Internet Explorer is brave enough to ask to be your default browser, you should be brave enough to ask that girl out. Markdown > ``` If Internet Explorer is brave enough to ask to be your default browser, you should be brave enough to ask that girl out. ```","title":"Blockquotes"},{"location":"tutorials/markdown/highlight-what-matters/#admonitions","text":"Admonition is an extension to Markdown that looks shiny and attractive. Admonitions are created with the following syntax: !!! type \"Title of Admonition\" Something importatnt you want to highlight! outputs this Title of Admonition Something importatnt you want to highlight!","title":"Admonitions"},{"location":"tutorials/markdown/highlight-what-matters/#admonition-without-text-in-the-header","text":"The following markdown snippet !!! note Admonition without text in the header outputs this Note Admonition without text in the header","title":"Admonition without text in the header"},{"location":"tutorials/markdown/highlight-what-matters/#admonition-without-header","text":"The following markdown snippet !!! note \"\" Admonition without header outputs this Admonition without header","title":"Admonition without header"},{"location":"tutorials/markdown/highlight-what-matters/#admonition-with-text-and-code","text":"Include any code block directly inside the Admonition !!! note In Python we use indentation instead of curly braces: ```python i = 1 while i < 6: print(i) if i == 3: break i += 1 ``` If indentation is wrong, the python code will fail to execute The result will look like this Note In Python we use indentation instead of curly braces: i = 1 while i < 6 : print ( i ) if i == 3 : break i += 1 If indentation is incorrect, the python code will fail to execute","title":"Admonition with text and code"},{"location":"tutorials/markdown/highlight-what-matters/#collapsible-admonition","text":"Start Admonition with ??? ??? type \"Python generator example\" A generator function that yields ints is secretly just a function that returns an iterator of ints, so that's how we annotate it ``` python def g(n: int) -> Iterator[int]: i = 0 while i < n: yield i i += 1 ``` Result - collapsible Admonnition Python generator function example A generator function that yields ints is secretly just a function that returns an iterator of ints, so that's how we annotate it def g ( n : int ) -> Iterator [ int ]: i = 0 while i < n : yield i i += 1","title":"Collapsible Admonition"},{"location":"tutorials/markdown/highlight-what-matters/#nested-admonition","text":"You can create Admonitions inside other Admonitions ??? note \"Open styled details\" ??? danger \"Nested details!\" And more content again. Looking like this Open styled details Nested details! And more content again.","title":"Nested Admonition"},{"location":"tutorials/markdown/highlight-what-matters/#admonitions-with-tabs","text":"Using tabs inside Admonitions can be handy Recursion in markdown Output Recursion in markdown Output return True Markdown #!py3 return True Markdown !!! example \"Recursion in markdown\" === \"Output\" `#!py3 return True` === \"Markdown\" ` #!py3 return True `","title":"Admonitions with tabs"},{"location":"tutorials/markdown/highlight-what-matters/#admonition-types","text":"There are numerous Admonition types that you can use to make important text stand out. Every Admonition starts with the type keyword following after !!! or ??? For example, Admonition of info type !!! info The wood frog can hold its pee for up to eight months. looks like this Info The wood frog can hold its pee for up to eight months. Other Admonition types: summary , abstract , tldr Tldr went looking for myself and came back empty handed tip , hint , important Tip If you get a loan at a bank, you will be paying for it 30 years. If you rob a bank you will be out in just 10 success , check , done Success Monday 12:30. I finally came to office and had my first cup of coffee question , help , faq Question How far of a drive is it from Miami to Florida? warning , caution , attention Warning Don't feed the Dragons! They are on a strict diet. failure , fail , missing Failure I made Jusus shaped cookies but I burnt them danger , error Error ErrorReporter stopped working bug Bug A ladybird bug can eat 5,000 insects in its whole lifetime example Example Unlike humans, bees can make collaborative decisions quote , cite Quote Always remember that you are absolutely unique. Just like everyone else","title":"Admonition types"},{"location":"tutorials/markdown/images/","text":"Standard Markdown allows the addition of images to the page. Both local images, and images from the Internet can be displayed on the Markdown pages Hide the pain Harold Output Markdown ![hide the pain Harold](img/Harold-main.png) Extended Markdown allows centering and styling the images with Attribute lists Image left Output Hide the Pain Harold is the meme of the decade (according to Imgur). Hungarian legend Andr\u00e1s Arat\u00f3 found fame after he was turned into a meme for his seemingly pained smiling expression. Markdown ![Placeholder](img/Harold-1.png){ align=left style=\"height: 30%; width: 30%; border-radius: 5px;\" loading=lazy} # Hide the Pain Harold is the meme of the decade (according to Imgur). ## Hungarian legend Andr\u00e1s Arat\u00f3 found fame after he was turned into a meme for his seemingly pained smiling expression. Image right Output All he was doing was posing for stock photos and was doing his best to look natural. However, people picked up on his facial expressions and he's since become one of the most recognisable memes on the internet. Markdown ![Placeholder](img/Harold-2.png){ align=right style=\"height: 40%; width: 40%; border-radius: 5px;\" loading=lazy} ## All he was doing was posing for stock photos and was doing his best to look natural. However, people picked up on his facial expressions and he's since become one of the most recognisable memes on the internet.","title":"Make images awesome"},{"location":"tutorials/markdown/images/#hide-the-pain-harold-is-the-meme-of-the-decade-according-to-imgur","text":"","title":"Hide the Pain Harold is the meme of the decade (according to Imgur)."},{"location":"tutorials/markdown/images/#hungarian-legend-andras-arato-found-fame-after-he-was-turned-into-a-meme-for-his-seemingly-pained-smiling-expression","text":"Markdown ![Placeholder](img/Harold-1.png){ align=left style=\"height: 30%; width: 30%; border-radius: 5px;\" loading=lazy} # Hide the Pain Harold is the meme of the decade (according to Imgur). ## Hungarian legend Andr\u00e1s Arat\u00f3 found fame after he was turned into a meme for his seemingly pained smiling expression. Image right Output","title":"Hungarian legend Andr\u00e1s Arat\u00f3 found fame after he was turned into a meme for his seemingly pained smiling expression."},{"location":"tutorials/markdown/images/#all-he-was-doing-was-posing-for-stock-photos-and-was-doing-his-best-to-look-natural-however-people-picked-up-on-his-facial-expressions-and-hes-since-become-one-of-the-most-recognisable-memes-on-the-internet","text":"Markdown ![Placeholder](img/Harold-2.png){ align=right style=\"height: 40%; width: 40%; border-radius: 5px;\" loading=lazy} ## All he was doing was posing for stock photos and was doing his best to look natural. However, people picked up on his facial expressions and he's since become one of the most recognisable memes on the internet.","title":"All he was doing was posing for stock photos and was doing his best to look natural. However, people picked up on his facial expressions and he's since become one of the most recognisable memes on the internet."},{"location":"tutorials/markdown/improve-readability/","text":"Tabs Tabs come in handy if you want to create concise documentation. Pros and Cons of the Internet: Pros Everyone's always on it Everyone can use it Anyone can easily share their thoughts Old friends can find you Things can go viral It makes things easily accessible Cons It makes things easily accessible Things can go viral Old friends can find you Anyone can easily share their thoughts Everyone can use it Everyone's always on it Create tabs by using === together with the tab name Example of Tabs Markdown ***Pros and Cons of the Internet:*** === \"Pros\" 1. Everyone's always on it 2. Everyone can use it 3. Anyone can easily share their thoughts 4. Old friends can find you 5. Things can go viral 6. It makes things easily accessible === \"Cons\" 1. It makes things easily accessible 2. Things can go viral 3. Old friends can find you 4. Anyone can easily share their thoughts 5. Everyone can use it 6. Everyone's always on it Output Pros and Cons of the Internet: Pros Everyone's always on it Everyone can use it Anyone can easily share their thoughts Old friends can find you Things can go viral It makes things easily accessible Cons It makes things easily accessible Things can go viral Old friends can find you Anyone can easily share their thoughts Everyone can use it Everyone's always on it Lists Ordered and unordered lists are standard Mardown features. Extended markdown adds definition lists and task lists . Unordered list Output New Guiness records made in 2020: Cycling Backward With A Violin Longest Ear Hair Largest Smurf Meeting Ever Hardest Kick In The Groin Markdown **New Guiness records made in 2020:** * Cycling Backward With A Violin * Longest Ear Hair * Largest Smurf Meeting Ever * Hardest Kick In The Groin Ordered list Output Best inventions of 2020: Hi-tech DVD rewinder Cup holder that clips to a table Military Curved barrel machine gun Pigeon-projected missiles For every day Barbed wire baby cage Bras for men same size cups different size cups Markdown **Best inventions of 2020:** 1. Hi-tech 1. DVD rewinder 2. Cup holder that clips to a table 2. Military 1. Curved barrel machine gun 2. Pigeon-projected missiles 3. For every day 1. Barbed wire baby cage 2. Bras for men * same size cups * different size cups Definition list Output Bamboozle Cheat or fool. Brouhaha A noisy and overexcited reaction or response to something. Canoodle Kiss and cuddle amorously. Markdown `Bamboozle` : Cheat or fool. `Brouhaha` : A noisy and overexcited reaction or response to something. `Canoodle` : Kiss and cuddle amorously. Tasklist Output Plans at work Make vanilla pudding. Put in mayo jar. Eat in the office during the lunch break Wear shirt that says \u201cLife\u201d. Hand out lemons to colleagues. Hire two private investigators. Get them to follow each other. Personal plans Make an alcoholic beverage and name it \u201cresponsibly.\u201d Start drinking Responsibly. Sneeze in front of the Pope. Get blessed. Buy a horse, name it \u201cOscar Takes The Lead,\u201d enter it in horse races. Markdown - [X] Plans at work * [X] Make vanilla pudding. Put in mayo jar. Eat in the office during the lunch break * [X] Wear shirt that says \u201cLife\u201d. Hand out lemons to colleagues. * [ ] Hire two private investigators. Get them to follow each other. - [ ] Personal plans * [X] Make an alcoholic beverage and name it \u201cresponsibly.\u201d Start drinking Responsibly. * [ ] Sneeze in front of the Pope. Get blessed. * [ ] Buy a horse, name it \u201cOscar Takes The Lead,\u201d enter it in horse races. Footnotes Footnotes are great to focus on what is important for the reader, clarifying details down below. See an example of a text with footnotes (and markdown). Tasklist Output In my junior year of high school 1 , this guy asked me on a date. He rented a movie and made me a salami pizza 2 . We were watching the movie 3 and the oven beeped so the pizza was done. He looked me dead in the eyes and said, \u201cThis is the worst part.\u201d 4 I then watched this boy open the oven and pull the pizza out with his bare hands, screaming at the top of his lungs. We never had a second date. Markdown In my junior year of high school[^1], this guy asked me on a date. He rented a movie and made me a salami pizza[^2]. We were watching the movie[^3] and the oven beeped so the pizza was done. He looked me dead in the eyes and said, \u201cThis is the worst part.\u201d[^4] I then watched this boy open the oven and pull the pizza out with his bare hands, screaming at the top of his lungs. We never had a second date. [^1]: It was in Tulsa Oklahoma [^2]: I told him 3 times I was a vegetarian [^3]: Die Hard 2 - his favourite. On a first date. Really? [^4]: I thought it was about the movie Notice, footnotes are displayed not in the admonition box, but ate the end of the page. It was in Tulsa Oklahoma \u21a9 I told him 3 times I was a vegetarian \u21a9 Die Hard 2 - his favourite. On a first date. Really? \u21a9 I thought it was about the movie \u21a9","title":"Improve readability with tabs, lists and footnotes"},{"location":"tutorials/markdown/improve-readability/#tabs","text":"Tabs come in handy if you want to create concise documentation. Pros and Cons of the Internet: Pros Everyone's always on it Everyone can use it Anyone can easily share their thoughts Old friends can find you Things can go viral It makes things easily accessible Cons It makes things easily accessible Things can go viral Old friends can find you Anyone can easily share their thoughts Everyone can use it Everyone's always on it Create tabs by using === together with the tab name Example of Tabs Markdown ***Pros and Cons of the Internet:*** === \"Pros\" 1. Everyone's always on it 2. Everyone can use it 3. Anyone can easily share their thoughts 4. Old friends can find you 5. Things can go viral 6. It makes things easily accessible === \"Cons\" 1. It makes things easily accessible 2. Things can go viral 3. Old friends can find you 4. Anyone can easily share their thoughts 5. Everyone can use it 6. Everyone's always on it Output Pros and Cons of the Internet: Pros Everyone's always on it Everyone can use it Anyone can easily share their thoughts Old friends can find you Things can go viral It makes things easily accessible Cons It makes things easily accessible Things can go viral Old friends can find you Anyone can easily share their thoughts Everyone can use it Everyone's always on it","title":"Tabs"},{"location":"tutorials/markdown/improve-readability/#lists","text":"Ordered and unordered lists are standard Mardown features. Extended markdown adds definition lists and task lists . Unordered list Output New Guiness records made in 2020: Cycling Backward With A Violin Longest Ear Hair Largest Smurf Meeting Ever Hardest Kick In The Groin Markdown **New Guiness records made in 2020:** * Cycling Backward With A Violin * Longest Ear Hair * Largest Smurf Meeting Ever * Hardest Kick In The Groin Ordered list Output Best inventions of 2020: Hi-tech DVD rewinder Cup holder that clips to a table Military Curved barrel machine gun Pigeon-projected missiles For every day Barbed wire baby cage Bras for men same size cups different size cups Markdown **Best inventions of 2020:** 1. Hi-tech 1. DVD rewinder 2. Cup holder that clips to a table 2. Military 1. Curved barrel machine gun 2. Pigeon-projected missiles 3. For every day 1. Barbed wire baby cage 2. Bras for men * same size cups * different size cups Definition list Output Bamboozle Cheat or fool. Brouhaha A noisy and overexcited reaction or response to something. Canoodle Kiss and cuddle amorously. Markdown `Bamboozle` : Cheat or fool. `Brouhaha` : A noisy and overexcited reaction or response to something. `Canoodle` : Kiss and cuddle amorously. Tasklist Output Plans at work Make vanilla pudding. Put in mayo jar. Eat in the office during the lunch break Wear shirt that says \u201cLife\u201d. Hand out lemons to colleagues. Hire two private investigators. Get them to follow each other. Personal plans Make an alcoholic beverage and name it \u201cresponsibly.\u201d Start drinking Responsibly. Sneeze in front of the Pope. Get blessed. Buy a horse, name it \u201cOscar Takes The Lead,\u201d enter it in horse races. Markdown - [X] Plans at work * [X] Make vanilla pudding. Put in mayo jar. Eat in the office during the lunch break * [X] Wear shirt that says \u201cLife\u201d. Hand out lemons to colleagues. * [ ] Hire two private investigators. Get them to follow each other. - [ ] Personal plans * [X] Make an alcoholic beverage and name it \u201cresponsibly.\u201d Start drinking Responsibly. * [ ] Sneeze in front of the Pope. Get blessed. * [ ] Buy a horse, name it \u201cOscar Takes The Lead,\u201d enter it in horse races.","title":"Lists"},{"location":"tutorials/markdown/improve-readability/#footnotes","text":"Footnotes are great to focus on what is important for the reader, clarifying details down below. See an example of a text with footnotes (and markdown). Tasklist Output In my junior year of high school 1 , this guy asked me on a date. He rented a movie and made me a salami pizza 2 . We were watching the movie 3 and the oven beeped so the pizza was done. He looked me dead in the eyes and said, \u201cThis is the worst part.\u201d 4 I then watched this boy open the oven and pull the pizza out with his bare hands, screaming at the top of his lungs. We never had a second date. Markdown In my junior year of high school[^1], this guy asked me on a date. He rented a movie and made me a salami pizza[^2]. We were watching the movie[^3] and the oven beeped so the pizza was done. He looked me dead in the eyes and said, \u201cThis is the worst part.\u201d[^4] I then watched this boy open the oven and pull the pizza out with his bare hands, screaming at the top of his lungs. We never had a second date. [^1]: It was in Tulsa Oklahoma [^2]: I told him 3 times I was a vegetarian [^3]: Die Hard 2 - his favourite. On a first date. Really? [^4]: I thought it was about the movie Notice, footnotes are displayed not in the admonition box, but ate the end of the page. It was in Tulsa Oklahoma \u21a9 I told him 3 times I was a vegetarian \u21a9 Die Hard 2 - his favourite. On a first date. Really? \u21a9 I thought it was about the movie \u21a9","title":"Footnotes"},{"location":"tutorials/markdown/intro/","text":"This is a collection of short tutorials that explain how to use extended markdown features to create gorgeous static websites, focusing on documentation websites. Only features presented in the first section \"Start with the basics\" - are the standard markdown features that work everywhere. All features will work in MkDocs-MagicSpace (completely free and open-source) Make sure you have MkDocs-MagicSpace up and running before starting the tutorial. Launch MkDocs-MagicSpace","title":"Intro"},{"location":"tutorials/markdown/math-formulas/","text":"Arithmatex The Arithmatex extension allows the rendering of block and inline block equations. Arithmatex formulas are markdown blocks enclosed in \\( \\(...\\) \\) or [...]on separate lines: Inline Examples Output \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\) , \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\) . Markdown $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ , \\( p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } \\) .","title":"Math formulas"},{"location":"tutorials/markdown/math-formulas/#arithmatex","text":"The Arithmatex extension allows the rendering of block and inline block equations. Arithmatex formulas are markdown blocks enclosed in \\( \\(...\\) \\) or [...]on separate lines: Inline Examples Output \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\) , \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\) . Markdown $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ , \\( p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } \\) .","title":"Arithmatex"},{"location":"tutorials/markdown/tables/","text":"There are couple of ways to create table using Markdown: The first - is to create pretty tabbed table using symbols | and - Example Output Method Description GET Fetch resource PUT Update resource DELETE Delete resource Markdown | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | But the more convenient way is to separate columns with | More convenient table syntaxis Output Substance Description Bureaucratium Element that has a negative half-life\". In other words, the more time passes, the more massive \"Bureaucratium\" becomes Unobtainium Extremely rare, costly, or reasonably unobtainable material Buzzwordium Positively charged element, attracted to negatively low IQ Markdown **Substance** | **Description** --- | --- **Bureaucratium** | Element that has a negative half-life\". In other words, the more time passes, the more massive \"Bureaucratium\" becomes **Unobtainium** | Extremely rare, costly, or reasonably unobtainable material **Buzzwordium** | Positively charged element, attracted to negatively low IQ The text in the table can be aligned left, right or centered Left-Right alignment Output Substance Description Bombastium Rarest element in the world. Dropped into a barrel of water becomes one barrel of ice cream Jerktonium Ingestion of jerktonium causes a bad attitude, but the effects are curable by song. Philote The smallest possible particle, occupying no space at all. Markdown **Substance** | **Description** :--- | ---: **Bombastium** | Rarest element in the world. Dropped into a barrel of water becomes one barrel of ice cream **Jerktonium** | Ingestion of jerktonium causes a bad attitude, but the effects are curable by song. **Philote** | The smallest possible particle, occupying no space at all. Table with centered columns Output Substance Description Philosophon A unit of logic so tiny only a philosopher could hope to split it. Stalinium Alloy was used during WW2 providing Soviet forces enough toughness to bounce off enemy projectiles. Boyfriend Material Material that's becoming harder and harder to find these days. Markdown **Substance** | **Description** :---: | :---: **Philosophon** | A unit of logic so tiny only a philosopher could hope to split it. **Stalinium** | Alloy was used during WW2 providing Soviet forces enough toughness to bounce off enemy projectiles. **Boyfriend Material** | Material that's getting harder and harder to find these days. Hint Tables can be a very powerful feature if generated automatically using python and templates or loaded from csv files","title":"Create tables"},{"location":"tutorials/markdown/templates-macros/","text":"You can use Jinja2 templates in your documentation mixing it with Markdown in the same .md file! Warning this is a very brief introduction to Jinja2. in order to get the full power, we recommend to go through this tutorial and look into Jinja2 documentation . Typical cases for using templates are: generate dynamic content avoid repetative Markdown code render different Markdown code depending on condition Templates code is wrapped with one of the following notations {% ... %} - for Statements {{ ... }} - for Expressions to print to the template output {# ... #} - for Comments not included in the template output Template code on its own is not displayed in the ready Markdown document, only results of the templates application are displayed. Variables Set variable is as simple as {% set my_variable = \"Variable inside the emplate\" %} . In order to outpu the variable add this piece to your Markdown {{my_variable}} . Variables Output First let's declare a text variable . And then print it in bold: String printed by the template . we can also create variables of other types, for example: lists dictionaries Now we print my_list = [1, 2, 3, 4, 5] and dict = {'one': 1, 'two': 2, 'three': 3} We can get separate elements of the dicts and lists. For example first element of the list is 1 , and element \"two\" from the dict is 2 Markdown First let's declare a text variable {% set my_variable = \"String printed by the template\" %}. And then print it in bold and red: **{{my_variable}}**{style=\"color: red\"} . we can also create variables of other types, for example: - lists {% set my_list = [1, 2, 3, 4, 5] %} - dictionaries {% set my_dict = {\"one\": 1, \"two\": 2, \"three\": 3} %} Now we print my_list = {{my_list}} and dict = {{my_dict}} We can get separate elements of the dicts and lists. For example first element of the list is **{{ my_list[0] }}**, and element \"two\" from the dict is **{{ my_dict[\"two\"] }}** Assign variables in the beginning of the Markdown document Output It is more convenient to have all variable declarations in the beginning of your Markdown document rather than having them all scattered thoughout the doc. Because we declared variables, we can use them in the following text now I saw an ad for a PHP developer for the Adult Website the other day. It was really attractive but I don't know if I could bring myself to admit before my friends and family that I will be coding in PHP Markdown {% set lang = \"PHP\" %} {% set where = \"the Adult Website\" %} {% set who = \"family\" %} It is more convenient to have all variable declarations in the beginning of your Markdown document rather than having them all scattered thoughout the doc. Because we declared variables, we can use them in the following text now >``` I saw an ad for a {{lang}} developer for {{where}} the other day. It was really attractive but I don't know if I could bring myself to admit before my friends and {{who}} that I will be coding in {{lang}} ``` Statements You can use notation {{ ... }} not only to print variables, but also to evaluate some statements (with or without the variables). For example, this {{ 1 + 2 + 3 }} is rendered as 6. And if we declare list like this {% set my_list = [1, 2, 3, 4, 5] %} then {{ my_list[1] + 2 }} will produce 4 In a statement you can use use any of the methods of defined on a python's variable\u2019s type. For example {{ \"nincompoop\".upper() }} will produce NINCOMPOOP . Python types methods in Jinja2 check here how to use the following Jinja filters: 1 2 3 4 5 abs() float() lower() round() tojson() forceescape() map() safe() trim() batch() select() truncate() capitalize() groupby() min() unique() center() indent() pprint() slice() default() int() random() sort() urlencode() dictsort() join() reject() string() urlize() last() rejectattr() striptags() wordcount() escape() replace() sum() wordwrap() first() list() title() xmlattr() reverse() length() filesizeformat() dictsort() upper() selectattr() max() attr() Filters It is more common to use Jinja2 filters, rather than apply method as we did it in section above. Jinja2 filter is something we use to transform data held in variables. We apply filters by placing pipe symbol | after the variable followed by name of the filter. MAny of the Python type methods listed in the section above, can be as well applied as filters in Jinja2 templates. The example, but using filter will be {{ \"nincompoop\" | upper }} producing same output - NINCOMPOOP Examples of filters Filter Description Markdown Output round round numeric variable {{ 25.6 | round }} 26.0 sort sort list {{ [4, 1, 6, 2] | sort }} [1, 2, 4, 6] reverse reverse string {{ \"NOT A PALINDROME\" | reverse }} EMORDNILAP A TON join join all strings in a list into one string {{ ['a', 2, 'b', '3'] | join('-') }} a-2-b-3 replace replace char in a string {{ \"aaaBBBaaa\" | replace('B', 'X') }} aaaXXXaaa Filters can be applied to different types, for example filter replace works not only with a string, but also with a list of strings, being applied to each of its elements {{ ['aB', 'BB', 'c'] | replace('B', 'X') }} produces ['aX', 'XX', 'c'] Loops The syntaxis of the loop looks like this {% for item in seq %} {{item}} {% endfor %} Loops are very handy to avoid Markdown code duplication and generate templates dynamically from data. The following example creates table from the dictionary Output Funny American town names ( Table generated by the template ) Town State Boring Oregon Hell Michigan Hot Coffee Mississippi Intercourse Pensylvania No Name Colorado Pee Pee Ohaio Markdown {% set towns = [ {\"town\": \"Boring\", \"state\": \"Oregon\"}, {\"town\": \"Hell\", \"state\": \"Michigan\"}, {\"town\": \"Hot Coffee\", \"state\": \"Mississippi\"}, {\"town\": \"Intercourse\", \"state\": \"Pensylvania\"}, {\"town\": \"No Name\", \"state\": \"Colorado\"}, {\"town\": \"Pee Pee\", \"state\": \"Ohaio\"} ] %} Funny American town names (***Table generated by the template***) **Town** | **State** :--- | --- {% for item in towns %} {{ item[\"town\"] }} | {{ item[\"state\"] }} {% endfor %} Diagrams also can be generated using templates Pie chart from template Output pie title Why we use Google \"Adult content\" : 35 \"Lazy typing .com\" : 11 \"Spell checking\" : 51 \"Find useful info\" : 3 Markdown {% set google_stat = [ {\"reason\": \"Adult content\", \"percent\": 35}, {\"reason\": \"Lazy typing .com\", \"percent\": 11}, {\"reason\": \"Spell checking\", \"percent\": 51}, {\"reason\": \"Find useful info\", \"percent\": 3} ] %} ```mermaid pie title Why we use Google {% for item in google_stat %}\"{{ item.reason }}\" : {{ item.percent }} {% endfor %} ``` Conditions If-else statement has the following syntaxis {% if ... %} ... {% elif ... %} ... {% else %} ... {% endif %} Schrodinger Kenny Output Every build of static documentation website will result in a different fate for Kenny Kenny is dead Markdown {% set schrodinger_kenny = [1,2,3,4,5,6,7,8,9] | random %} Every build of static documentation website will result in a different fate for Kenny {% if schrodinger_kenny <= 3 %} Kenny is sick. {% elif 3 < schrodinger_kenny <= 7 %} Kenny is dead {% else %} Kenny looks okay --- so far {% endif %}","title":"Use templates"},{"location":"tutorials/markdown/templates-macros/#variables","text":"Set variable is as simple as {% set my_variable = \"Variable inside the emplate\" %} . In order to outpu the variable add this piece to your Markdown {{my_variable}} . Variables Output First let's declare a text variable . And then print it in bold: String printed by the template . we can also create variables of other types, for example: lists dictionaries Now we print my_list = [1, 2, 3, 4, 5] and dict = {'one': 1, 'two': 2, 'three': 3} We can get separate elements of the dicts and lists. For example first element of the list is 1 , and element \"two\" from the dict is 2 Markdown First let's declare a text variable {% set my_variable = \"String printed by the template\" %}. And then print it in bold and red: **{{my_variable}}**{style=\"color: red\"} . we can also create variables of other types, for example: - lists {% set my_list = [1, 2, 3, 4, 5] %} - dictionaries {% set my_dict = {\"one\": 1, \"two\": 2, \"three\": 3} %} Now we print my_list = {{my_list}} and dict = {{my_dict}} We can get separate elements of the dicts and lists. For example first element of the list is **{{ my_list[0] }}**, and element \"two\" from the dict is **{{ my_dict[\"two\"] }}** Assign variables in the beginning of the Markdown document Output It is more convenient to have all variable declarations in the beginning of your Markdown document rather than having them all scattered thoughout the doc. Because we declared variables, we can use them in the following text now I saw an ad for a PHP developer for the Adult Website the other day. It was really attractive but I don't know if I could bring myself to admit before my friends and family that I will be coding in PHP Markdown {% set lang = \"PHP\" %} {% set where = \"the Adult Website\" %} {% set who = \"family\" %} It is more convenient to have all variable declarations in the beginning of your Markdown document rather than having them all scattered thoughout the doc. Because we declared variables, we can use them in the following text now >``` I saw an ad for a {{lang}} developer for {{where}} the other day. It was really attractive but I don't know if I could bring myself to admit before my friends and {{who}} that I will be coding in {{lang}} ```","title":"Variables"},{"location":"tutorials/markdown/templates-macros/#statements","text":"You can use notation {{ ... }} not only to print variables, but also to evaluate some statements (with or without the variables). For example, this {{ 1 + 2 + 3 }} is rendered as 6. And if we declare list like this {% set my_list = [1, 2, 3, 4, 5] %} then {{ my_list[1] + 2 }} will produce 4 In a statement you can use use any of the methods of defined on a python's variable\u2019s type. For example {{ \"nincompoop\".upper() }} will produce NINCOMPOOP . Python types methods in Jinja2 check here how to use the following Jinja filters: 1 2 3 4 5 abs() float() lower() round() tojson() forceescape() map() safe() trim() batch() select() truncate() capitalize() groupby() min() unique() center() indent() pprint() slice() default() int() random() sort() urlencode() dictsort() join() reject() string() urlize() last() rejectattr() striptags() wordcount() escape() replace() sum() wordwrap() first() list() title() xmlattr() reverse() length() filesizeformat() dictsort() upper() selectattr() max() attr()","title":"Statements"},{"location":"tutorials/markdown/templates-macros/#filters","text":"It is more common to use Jinja2 filters, rather than apply method as we did it in section above. Jinja2 filter is something we use to transform data held in variables. We apply filters by placing pipe symbol | after the variable followed by name of the filter. MAny of the Python type methods listed in the section above, can be as well applied as filters in Jinja2 templates. The example, but using filter will be {{ \"nincompoop\" | upper }} producing same output - NINCOMPOOP Examples of filters Filter Description Markdown Output round round numeric variable {{ 25.6 | round }} 26.0 sort sort list {{ [4, 1, 6, 2] | sort }} [1, 2, 4, 6] reverse reverse string {{ \"NOT A PALINDROME\" | reverse }} EMORDNILAP A TON join join all strings in a list into one string {{ ['a', 2, 'b', '3'] | join('-') }} a-2-b-3 replace replace char in a string {{ \"aaaBBBaaa\" | replace('B', 'X') }} aaaXXXaaa Filters can be applied to different types, for example filter replace works not only with a string, but also with a list of strings, being applied to each of its elements {{ ['aB', 'BB', 'c'] | replace('B', 'X') }} produces ['aX', 'XX', 'c']","title":"Filters"},{"location":"tutorials/markdown/templates-macros/#loops","text":"The syntaxis of the loop looks like this {% for item in seq %} {{item}} {% endfor %} Loops are very handy to avoid Markdown code duplication and generate templates dynamically from data. The following example creates table from the dictionary Output Funny American town names ( Table generated by the template ) Town State Boring Oregon Hell Michigan Hot Coffee Mississippi Intercourse Pensylvania No Name Colorado Pee Pee Ohaio Markdown {% set towns = [ {\"town\": \"Boring\", \"state\": \"Oregon\"}, {\"town\": \"Hell\", \"state\": \"Michigan\"}, {\"town\": \"Hot Coffee\", \"state\": \"Mississippi\"}, {\"town\": \"Intercourse\", \"state\": \"Pensylvania\"}, {\"town\": \"No Name\", \"state\": \"Colorado\"}, {\"town\": \"Pee Pee\", \"state\": \"Ohaio\"} ] %} Funny American town names (***Table generated by the template***) **Town** | **State** :--- | --- {% for item in towns %} {{ item[\"town\"] }} | {{ item[\"state\"] }} {% endfor %} Diagrams also can be generated using templates Pie chart from template Output pie title Why we use Google \"Adult content\" : 35 \"Lazy typing .com\" : 11 \"Spell checking\" : 51 \"Find useful info\" : 3 Markdown {% set google_stat = [ {\"reason\": \"Adult content\", \"percent\": 35}, {\"reason\": \"Lazy typing .com\", \"percent\": 11}, {\"reason\": \"Spell checking\", \"percent\": 51}, {\"reason\": \"Find useful info\", \"percent\": 3} ] %} ```mermaid pie title Why we use Google {% for item in google_stat %}\"{{ item.reason }}\" : {{ item.percent }} {% endfor %} ```","title":"Loops"},{"location":"tutorials/markdown/templates-macros/#conditions","text":"If-else statement has the following syntaxis {% if ... %} ... {% elif ... %} ... {% else %} ... {% endif %} Schrodinger Kenny Output Every build of static documentation website will result in a different fate for Kenny Kenny is dead Markdown {% set schrodinger_kenny = [1,2,3,4,5,6,7,8,9] | random %} Every build of static documentation website will result in a different fate for Kenny {% if schrodinger_kenny <= 3 %} Kenny is sick. {% elif 3 < schrodinger_kenny <= 7 %} Kenny is dead {% else %} Kenny looks okay --- so far {% endif %}","title":"Conditions"},{"location":"tutorials/markdown/snippets/concierge/","text":".wrapper { margin-top: 50px; margin-bottom: 5px; background-color: #ffc32b; width: 100%; height: 600px; border-radius: 5px; } .container { width: 300px; height: 280px; position: relative; top: calc(50% - 140px); left: calc(50% - 150px); } .coffee-header { width: 100%; height: 80px; position: absolute; top: 0; left: 0; background-color: #ddcfcc; border-radius: 10px; } .coffee-header__buttons { width: 25px; height: 25px; position: absolute; top: 25px; background-color: #282323; border-radius: 50%; } .coffee-header__buttons::after { content: \"\"; width: 8px; height: 8px; position: absolute; bottom: -8px; left: calc(50% - 4px); background-color: #615e5e; } .coffee-header__button-one { left: 15px; } .coffee-header__button-two { left: 50px; } .coffee-header__display { width: 50px; height: 50px; position: absolute; top: calc(50% - 25px); left: calc(50% - 25px); border-radius: 50%; background-color: #9acfc5; border: 5px solid #43beae; box-sizing: border-box; } .coffee-header__details { width: 8px; height: 20px; position: absolute; top: 10px; right: 10px; background-color: #9b9091; box-shadow: -12px 0 0 #9b9091, -24px 0 0 #9b9091; } .coffee-medium { width: 90%; height: 160px; position: absolute; top: 80px; left: calc(50% - 45%); background-color: #bcb0af; } .coffee-medium:before { content: \"\"; width: 90%; height: 100px; background-color: #776f6e; position: absolute; bottom: 0; left: calc(50% - 45%); border-radius: 20px 20px 0 0; } .coffe-medium__exit { width: 60px; height: 20px; position: absolute; top: 0; left: calc(50% - 30px); background-color: #231f20; } .coffe-medium__exit::before { content: \"\"; width: 50px; height: 20px; border-radius: 0 0 50% 50%; position: absolute; bottom: -20px; left: calc(50% - 25px); background-color: #231f20; } .coffe-medium__exit::after { content: \"\"; width: 10px; height: 10px; position: absolute; bottom: -30px; left: calc(50% - 5px); background-color: #231f20; } .coffee-medium__arm { width: 70px; height: 20px; position: absolute; top: 15px; right: 25px; background-color: #231f20; } .coffee-medium__arm::before { content: \"\"; width: 15px; height: 5px; position: absolute; top: 7px; left: -15px; background-color: #9e9495; } .coffee-medium__cup { width: 80px; height: 47px; position: absolute; bottom: 0; left: calc(50% - 40px); background-color: #FFF; border-radius: 0 0 70px 70px / 0 0 110px 110px; } .coffee-medium__cup::after { content: \"\"; width: 20px; height: 20px; position: absolute; top: 6px; right: -13px; border: 5px solid #FFF; border-radius: 50%; } @keyframes liquid { 0% { height: 0px; opacity: 1; } 5% { height: 0px; opacity: 1; } 20% { height: 62px; opacity: 1; } 95% { height: 62px; opacity: 1; } 100% { height: 62px; opacity: 0; } } .coffee-medium__liquid { width: 6px; height: 63px; opacity: 0; position: absolute; top: 50px; left: calc(50% - 3px); background-color: #74372b; animation: liquid 4s 4s linear infinite; } .coffee-medium__smoke { width: 8px; height: 20px; position: absolute; border-radius: 5px; background-color: #b3aeae; } @keyframes smokeOne { 0% { bottom: 20px; opacity: 0; } 40% { bottom: 50px; opacity: .5; } 80% { bottom: 80px; opacity: .3; } 100% { bottom: 80px; opacity: 0; } } @keyframes smokeTwo { 0% { bottom: 40px; opacity: 0; } 40% { bottom: 70px; opacity: .5; } 80% { bottom: 80px; opacity: .3; } 100% { bottom: 80px; opacity: 0; } } .coffee-medium__smoke-one { opacity: 0; bottom: 50px; left: 102px; animation: smokeOne 3s 4s linear infinite; } .coffee-medium__smoke-two { opacity: 0; bottom: 70px; left: 118px; animation: smokeTwo 3s 5s linear infinite; } .coffee-medium__smoke-three { opacity: 0; bottom: 65px; right: 118px; animation: smokeTwo 3s 6s linear infinite; } .coffee-medium__smoke-for { opacity: 0; bottom: 50px; right: 102px; animation: smokeOne 3s 5s linear infinite; } .coffee-footer { width: 95%; height: 15px; position: absolute; bottom: 25px; left: calc(50% - 47.5%); background-color: #41bdad; border-radius: 10px; } .coffee-footer::after { content: \"\"; width: 106%; height: 26px; position: absolute; bottom: -25px; left: -8px; background-color: #000; } .author { font-style: italic; text-align: right; color: grey; font-size: 0.6rem; font-family: serif; } Author: Henrique Rodrigues (August 31, 2018)","title":"Concierge"},{"location":"tutorials/markdown/snippets/mathjax-matrices/","text":"To add brackets use {pmatrix} , {bmatrix} , {Bmatrix} , {vmatrix} . With {pmatrix} \\[ \\begin{pmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{pmatrix} \\] With {bmatrix} \\[ \\begin{bmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{bmatrix} \\] With {Bmatrix} \\[ \\begin{Bmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{Bmatrix} \\] With {Vmatrix} \\[ \\begin{vmatrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{vmatrix} \\] With vertical line \\[ \\left[ \\begin{array}{cc|c} 1&2&3\\\\ 4&5&6 \\end{array} \\right] \\] With horizontal line \\[ \\begin{pmatrix} a & b\\\\ c & d\\\\ \\hline 1 & 0\\\\ 0 & 1 \\end{pmatrix} \\] Use \\cdots for \u22ef , \\ddots for \u22f1 and \\vdots for \u22ee when you want to omit some of the entries: \\[ \\begin{vmatrix} 1 & x & \\cdots & x^2 \\\\ 1 & y & \\cdots & y^2 \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 1 & z & \\cdots & z^2 \\\\ \\end{vmatrix} \\]","title":"Mathjax matrices"},{"location":"tutorials/markdown/snippets/mathjax-showcase/","text":"\\[ T^{i_1 i_2 \\dots i_p}_{j_1 j_2 \\dots j_q} = T(x^{i_1},\\dots,x^{i_p},e_{j_1},\\dots,e_{j_q}) \\] \\[ \\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align} \\] \\[ \\begin{matrix} 1 & x & x^2 \\\\ 1 & y & y^2 \\\\ 1 & z & z^2 \\\\ \\end{matrix} \\] \\[ \\left[ \\begin{array}{cc|c} 1&2&3\\\\ 4&5&6 \\end{array} \\right] \\] \\[ \\begin{align} \\sqrt{37} & = \\sqrt{\\frac{73^2-1}{12^2}} \\\\ & = \\sqrt{\\frac{73^2}{12^2}\\cdot\\frac{73^2-1}{73^2}} \\\\ & = \\sqrt{\\frac{73^2}{12^2}}\\sqrt{\\frac{73^2-1}{73^2}} \\\\ & = \\frac{73}{12}\\sqrt{1 - \\frac{1}{73^2}} \\\\ & \\approx \\frac{73}{12}\\left(1 - \\frac{1}{2\\cdot73^2}\\right) \\end{align} \\] \\[ f(n) = \\begin{cases} n/2, & \\text{if $n$ is even} \\\\ 3n+1, & \\text{if $n$ is odd} \\end{cases} \\] \\[ \\begin{array}{c|lcr} n & \\text{Left} & \\text{Center} & \\text{Right} \\\\ \\hline 1 & 0.24 & 1 & 125 \\\\ 2 & -1 & 189 & -8 \\\\ 3 & -20 & 2000 & 1+10i \\end{array} \\] \\[ \\left\\{ \\begin{array}{l} 0 = c_x-a_{x0}-d_{x0}\\dfrac{(c_x-a_{x0})\\cdot d_{x0}}{\\|d_{x0}\\|^2} + c_x-a_{x1}-d_{x1}\\dfrac{(c_x-a_{x1})\\cdot d_{x1}}{\\|d_{x1}\\|^2} \\\\[2ex] 0 = c_y-a_{y0}-d_{y0}\\dfrac{(c_y-a_{y0})\\cdot d_{y0}}{\\|d_{y0}\\|^2} + c_y-a_{y1}-d_{y1}\\dfrac{(c_y-a_{y1})\\cdot d_{y1}}{\\|d_{y1}\\|^2} \\end{array} \\right. \\] \\[ \\underset{j=1}{\\overset{\\infty}{\\LARGE\\mathrm K}}\\frac{a_j}{b_j}=\\cfrac{a_1}{b_1+\\cfrac{a_2}{b_2+\\cfrac{a_3}{b_3+\\ddots}}} \\] \\[ \\bbox[yellow] { e^x=\\lim_{n\\to\\infty} \\left( 1+\\frac{x}{n} \\right)^n \\qquad (1) } \\] \\[ |x|, ||v|| \\quad\\longrightarrow\\quad \\lvert x\\rvert, \\lVert v\\rVert \\] \\[ \\begin{array}{c|rrrr}& x^3 & x^2 & x^1 & x^0\\\\ & 1 & -6 & 11 & -6\\\\ {\\color{red}1} & \\downarrow & 1 & -5 & 6\\\\ \\hline & 1 & -5 & 6 & |\\phantom{-} {\\color{blue}0} \\end{array} \\] \\[ z = \\overbrace{ \\underbrace{x}_\\text{real} + i \\underbrace{y}_\\text{imaginary} }^\\text{complex number} \\]","title":"Mathjax showcase"},{"location":"tutorials/markdown/snippets/mathjax-system-equations/","text":"Alternative way to produce system of equations \\[ \\begin{cases} a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\ a_3x+b_3y+c_3z=d_3 \\end{cases} \\] To align the = signs use \\begin{aligned} and \\end{aligned} together with \\left\\{ and \\right \\[ \\left\\{ \\begin{aligned} a_1x+b_1y+c_1z &=d_1+e_1 \\\\ a_2x+b_2y&=d_2 \\\\ a_3x+b_3y+c_3z &=d_3 \\end{aligned} \\right. \\] Use \\begin{array}{ll} to align everything left \\[ \\left\\{ \\begin{array}{ll} a_1x+b_1y+c_1z &=d_1+e_1 \\\\ a_2x+b_2y &=d_2 \\\\ a_3x+b_3y+c_3z &=d_3 \\end{array} \\right. \\] Use \\\\[2ex] to create larger vertical spaces between equations \\[ \\begin{cases} a_1x+b_1y+c_1z=\\frac{p_1}{q_1} \\\\[2ex] a_2x+b_2y+c_2z=\\frac{p_2}{q_2} \\\\[2ex] a_3x+b_3y+c_3z=\\frac{p_3}{q_3} \\end{cases} \\]","title":"Mathjax system equations"},{"location":"tutorials/markdown/snippets/mkdocs-workspace-compatible/","text":"All features will work in MkDocs-Workspace (completely free and open-source)","title":"Mkdocs workspace compatible"},{"location":"tutorials/markdown/snippets/non-standard-md/","text":"Some of the features listed below are not standard and require additional configuration All features will work in MkDocs-Workspace (completely free and open-source)","title":"Non standard md"},{"location":"tutorials/markdown/snippets/pumping-heart/","text":"@keyframes heart { 0%, 40%, 80%, 100% { transform: scale(1); } 20%, 60% { transform: scale(1.15); } } .heart { animation: heart 1000ms infinite; color: red; font-size: 2em; }","title":"Pumping heart"},{"location":"tutorials/markdown/snippets/remove-toc/","text":"/* Remove TOC on this page */ .md-sidebar.md-sidebar--secondary { display: none; }","title":"Remove toc"},{"location":"tutorials/markdown/snippets/standard-md/","text":"Only features presented in the first section \"Start with the basics\" - are the standard markdown features that work everywhere. All features will work in MkDocs-MagicSpace (completely free and open-source)","title":"Standard md"}]}